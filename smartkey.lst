

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Wed Mar 25 08:22:52 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text484,local,class=CODE,delta=2
    14                           	psect	text485,local,class=CODE,delta=2
    15                           	psect	text486,local,class=CODE,delta=2
    16                           	psect	text487,local,class=CODE,delta=2
    17                           	psect	text488,local,class=CODE,delta=2
    18                           	psect	text489,local,class=CODE,delta=2
    19                           	psect	text490,local,class=CODE,delta=2
    20                           	psect	text491,local,class=CODE,delta=2
    21                           	psect	text492,local,class=CODE,delta=2
    22                           	psect	text493,local,class=CODE,delta=2
    23                           	psect	text494,local,class=CODE,delta=2
    24                           	psect	text495,local,class=CODE,delta=2
    25                           	psect	text496,local,class=CODE,delta=2
    26                           	psect	text497,local,class=CODE,delta=2
    27                           	psect	text498,local,class=CODE,delta=2
    28                           	psect	text499,local,class=CODE,delta=2
    29                           	psect	text500,local,class=CODE,delta=2
    30                           	psect	text501,local,class=CODE,delta=2
    31                           	psect	text502,local,class=CODE,delta=2
    32                           	psect	text503,local,class=CODE,delta=2
    33                           	psect	text504,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text505,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x11E,1
    38                           	dabs	1,0x11F,1
    39                           	dabs	1,0x119,1
    40                           	dabs	1,0x11A,1
    41                           	dabs	1,0x11B,1
    42                           	dabs	1,0x10F,1
    43                           	dabs	1,0x10E,1
    44                           	dabs	1,0x116,1
    45                           	dabs	1,0x19D,1
    46                           	dabs	1,0x19E,1
    47                           	dabs	1,0x118,1
    48                           	dabs	1,0x115,1
    49                           	dabs	1,0x11E,1
    50                           	dabs	1,0x11E,1
    51                           	dabs	1,0x11F,1
    52                           	dabs	1,0x11F,1
    53                           	dabs	1,0x11E,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11E,1
    57                           	dabs	1,0x11E,1
    58                           	dabs	1,0x11E,1
    59                           	dabs	1,0x11F,1
    60                           	dabs	1,0x11F,1
    61                           	dabs	1,0x119,1
    62                           	dabs	1,0x119,1
    63                           	dabs	1,0x119,1
    64                           	dabs	1,0x119,1
    65                           	dabs	1,0x119,1
    66                           	dabs	1,0x119,1
    67                           	dabs	1,0x119,1
    68                           	dabs	1,0x19E,1
    69                           	dabs	1,0x118,1
    70                           	dabs	1,0x11A,1
    71                           	dabs	1,0x11A,1
    72                           	dabs	1,0x11A,1
    73                           	dabs	1,0x11A,1
    74                           	dabs	1,0x11A,1
    75                           	dabs	1,0x11A,1
    76                           	dabs	1,0x11A,1
    77                           	dabs	1,0x19E,1
    78                           	dabs	1,0x11B,1
    79                           	dabs	1,0x118,1
    80                           	dabs	1,0x18C,1
    81                           	dabs	1,0x116,1
    82                           	dabs	1,0x116,1
    83                           	dabs	1,0x116,1
    84                           	dabs	1,0x116,1
    85                           	dabs	1,0x11B,1
    86                           	dabs	1,0x11B,1
    87                           	dabs	1,0x19E,1
    88                           	dabs	1,0x19E,1
    89                           	dabs	1,0x19E,1
    90                           	dabs	1,0x19E,1
    91                           	dabs	1,0x19D,1
    92                           	dabs	1,0x19D,1
    93                           	dabs	1,0x19D,1
    94                           	dabs	1,0x19D,1
    95                           	dabs	1,0x19D,1
    96                           	dabs	1,0x11B,1
    97                           	dabs	1,0x118,1
    98                           	dabs	1,0x118,1
    99                           	dabs	1,0x118,1
   100                           	dabs	1,0x118,1
   101                           	dabs	1,0x118,1
   102                           	dabs	1,0x118,1
   103                           	dabs	1,0x115,1
   104                           	dabs	1,0x115,1
   105                           	dabs	1,0x115,1
   106                           	dabs	1,0x115,1
   107                           	dabs	1,0x18C,1
   108                           	dabs	1,0x7E,2
   109  000A                     
   110                           	psect	idataBANK0
   111  035A                     __pidataBANK0:	
   112                           
   113                           ;initializer for id_clear@F1097
   114  035A  34FF               	retlw	255
   115  035B  34FF               	retlw	255
   116  035C  34FF               	retlw	255
   117  035D  34FF               	retlw	255
   118  035E  34FF               	retlw	255
   119                           
   120                           ;initializer for _buffTag
   121  035F  3400               	retlw	0
   122  0360  3400               	retlw	0
   123  0361  3411               	retlw	17
   124  0362  340B               	retlw	11
   125  0363  344F               	retlw	79
   126  0364  3400               	retlw	0
   127  0365  3400               	retlw	0
   128  0366  3481               	retlw	129
   129  0367  342F               	retlw	47
   130  0368  3422               	retlw	34
   131  0369  3400               	retlw	0
   132  036A  3400               	retlw	0
   133  036B  347D               	retlw	125
   134  036C  3467               	retlw	103
   135  036D  3405               	retlw	5
   136  036E  3400               	retlw	0
   137  036F  3400               	retlw	0
   138  0370  347E               	retlw	126
   139  0371  3431               	retlw	49
   140  0372  34E7               	retlw	231
   141  0373  3400               	retlw	0
   142  0374  3400               	retlw	0
   143  0375  347E               	retlw	126
   144  0376  3451               	retlw	81
   145  0377  34E6               	retlw	230
   146  011E                     _ANSEL	set	286	;_ANSEL
   147  011F                     _ANSELH	set	287	;_ANSELH
   148  0119                     _CM1CON0	set	281	;_CM1CON0
   149  011A                     _CM2CON0	set	282	;_CM2CON0
   150  011B                     _CM2CON1	set	283	;_CM2CON1
   151  010F                     _EEADRH	set	271	;_EEADRH
   152  010E                     _EEDATH	set	270	;_EEDATH
   153  0116                     _IOCB	set	278	;_IOCB
   154  019D                     _PSTRCON	set	413	;_PSTRCON
   155  019E                     _SRCON	set	414	;_SRCON
   156  0118                     _VRCON	set	280	;_VRCON
   157  0115                     _WPUB	set	277	;_WPUB
   158  08F0                     _ANS0	set	2288	;_ANS0
   159  08F1                     _ANS1	set	2289	;_ANS1
   160  08FA                     _ANS10	set	2298	;_ANS10
   161  08FB                     _ANS11	set	2299	;_ANS11
   162  08F2                     _ANS2	set	2290	;_ANS2
   163  08F3                     _ANS3	set	2291	;_ANS3
   164  08F4                     _ANS4	set	2292	;_ANS4
   165  08F5                     _ANS5	set	2293	;_ANS5
   166  08F6                     _ANS6	set	2294	;_ANS6
   167  08F7                     _ANS7	set	2295	;_ANS7
   168  08F8                     _ANS8	set	2296	;_ANS8
   169  08F9                     _ANS9	set	2297	;_ANS9
   170  08C8                     _C1CH0	set	2248	;_C1CH0
   171  08C9                     _C1CH1	set	2249	;_C1CH1
   172  08CD                     _C1OE	set	2253	;_C1OE
   173  08CF                     _C1ON	set	2255	;_C1ON
   174  08CE                     _C1OUT	set	2254	;_C1OUT
   175  08CC                     _C1POL	set	2252	;_C1POL
   176  08CA                     _C1R	set	2250	;_C1R
   177  0CF5                     _C1SEN	set	3317	;_C1SEN
   178  08C7                     _C1VREN	set	2247	;_C1VREN
   179  08D0                     _C2CH0	set	2256	;_C2CH0
   180  08D1                     _C2CH1	set	2257	;_C2CH1
   181  08D5                     _C2OE	set	2261	;_C2OE
   182  08D7                     _C2ON	set	2263	;_C2ON
   183  08D6                     _C2OUT	set	2262	;_C2OUT
   184  08D4                     _C2POL	set	2260	;_C2POL
   185  08D2                     _C2R	set	2258	;_C2R
   186  0CF4                     _C2REN	set	3316	;_C2REN
   187  08D8                     _C2SYNC	set	2264	;_C2SYNC
   188  08C6                     _C2VREN	set	2246	;_C2VREN
   189  0C67                     _EEPGD	set	3175	;_EEPGD
   190  08B4                     _IOCB4	set	2228	;_IOCB4
   191  08B5                     _IOCB5	set	2229	;_IOCB5
   192  08B6                     _IOCB6	set	2230	;_IOCB6
   193  08B7                     _IOCB7	set	2231	;_IOCB7
   194  08DF                     _MC1OUT	set	2271	;_MC1OUT
   195  08DE                     _MC2OUT	set	2270	;_MC2OUT
   196  0CF2                     _PULSR	set	3314	;_PULSR
   197  0CF3                     _PULSS	set	3315	;_PULSS
   198  0CF6                     _SR0	set	3318	;_SR0
   199  0CF7                     _SR1	set	3319	;_SR1
   200  0CE8                     _STRA	set	3304	;_STRA
   201  0CE9                     _STRB	set	3305	;_STRB
   202  0CEA                     _STRC	set	3306	;_STRC
   203  0CEB                     _STRD	set	3307	;_STRD
   204  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   205  08D9                     _T1GSS	set	2265	;_T1GSS
   206  08C4                     _VP6EN	set	2244	;_VP6EN
   207  08C0                     _VR0	set	2240	;_VR0
   208  08C1                     _VR1	set	2241	;_VR1
   209  08C2                     _VR2	set	2242	;_VR2
   210  08C3                     _VR3	set	2243	;_VR3
   211  08C5                     _VRR	set	2245	;_VRR
   212  08AC                     _WPUB4	set	2220	;_WPUB4
   213  08AD                     _WPUB5	set	2221	;_WPUB5
   214  08AE                     _WPUB6	set	2222	;_WPUB6
   215  08AF                     _WPUB7	set	2223	;_WPUB7
   216  0C62                     _WREN	set	3170	;_WREN
   217  000B                     _INTCON	set	11
   218  0014                     _P1ADTH	set	20
   219  000E                     _P1ADTL	set	14
   220  0016                     _P1CON	set	22
   221  000C                     _PIR1	set	12
   222  0005                     _PORTA	set	5
   223  0007                     _PORTC	set	7
   224  0012                     _T2CON0	set	18
   225  0013                     _TMR2H	set	19
   226  0011                     _TMR2L	set	17
   227  0067                     _EEIF	set	103
   228  005F                     _GIE	set	95
   229  005E                     _PEIE	set	94
   230  002B                     _RA3	set	43
   231  002D                     _RA5	set	45
   232  0038                     _RC0	set	56
   233  005D                     _T0IE	set	93
   234  005A                     _T0IF	set	90
   235  00FB                     _T0ON	set	251
   236  0061                     _TMR2IF	set	97
   237  0092                     _TMR2ON	set	146
   238  009B                     _EEADR	set	155
   239  009C                     _EECON1	set	156
   240  009A                     _EEDAT	set	154
   241  0081                     _OPTION	set	129
   242  008F                     _OSCCON	set	143
   243  0090                     _P1OE	set	144
   244  0099                     _P1POL	set	153
   245  008C                     _PIE1	set	140
   246  0092                     _PR2H	set	146
   247  0091                     _PR2L	set	145
   248  009E                     _T2CON1	set	158
   249  0085                     _TRISA	set	133
   250  0087                     _TRISC	set	135
   251  0095                     _WPUA	set	149
   252  0093                     _WPUC	set	147
   253  047A                     _HTS	set	1146
   254  04E0                     _RD	set	1248
   255  0461                     _TMR2IE	set	1121
   256  04E8                     _WR	set	1256
   257  0001                     _TMR0	set	1
   258                           
   259                           	psect	cinit
   260  03AD                     start_initialization:	
   261  03AD  303E               	movlw	low (__pdataBANK0+30)
   262                           
   263                           ; Clear objects allocated to BANK0
   264  03AE  01D8               	clrf	__pbssBANK0& (0+127)
   265  03AF  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   266  03B0  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   267  03B1  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   268  03B2  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   269  03B3  01DD               	clrf	(__pbssBANK0+5)& (0+127)
   270  03B4  01DE               	clrf	(__pbssBANK0+6)& (0+127)
   271  03B5  01DF               	clrf	(__pbssBANK0+7)& (0+127)
   272  03B6  01E0               	clrf	(__pbssBANK0+8)& (0+127)
   273  03B7  01E1               	clrf	(__pbssBANK0+9)& (0+127)
   274                           
   275                           ; Initialize objects allocated to BANK0
   276  03B8  1383               	bcf	3,7	;select IRP bank0
   277  03B9  00FD               	movwf	125
   278  03BA  3003               	movlw	high __pidataBANK0
   279  03BB  00FE               	movwf	126
   280  03BC  305A               	movlw	low __pidataBANK0
   281  03BD  00FF               	movwf	127
   282  03BE  3020               	movlw	low __pdataBANK0
   283  03BF  0084               	movwf	4
   284  03C0  240F               	fcall	init_ram
   285  03C1                     end_of_initialization:	
   286                           ;End of C runtime variable initialization code
   287                           
   288  03C1  0183               	clrf	3
   289  03C2  2955               	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssBANK0
   292  0058                     __pbssBANK0:	
   293  0058                     _timeOut:	
   294  0058                     	ds	2
   295  005A                     _timeTick:	
   296  005A                     	ds	2
   297  005C                     _mtState:	
   298  005C                     	ds	1
   299  005D                     _keyID:	
   300  005D                     	ds	5
   301                           
   302                           	psect	dataBANK0
   303  0020                     __pdataBANK0:	
   304  0020                     id_clear@F1097:	
   305  0020                     	ds	5
   306  0025                     _buffTag:	
   307  0025                     	ds	25
   308                           
   309                           	psect	inittext
   310  040B                     init_fetch:	
   311                           ;	Called with low address in FSR and high address in W
   312                           
   313  040B  087E               	movf	126,w
   314  040C  008A               	movwf	10
   315  040D  087F               	movf	127,w
   316  040E  0082               	movwf	2
   317  040F                     init_ram:	
   318                           ;Called with:
   319                           ;	high address of idata address in btemp 
   320                           ;	low address of idata address in btemp+1 
   321                           ;	low address of data in FSR
   322                           ;	high address + 1 of data in btemp-1
   323                           
   324  040F  240B               	fcall	init_fetch
   325  0410  0080               	movwf	0
   326  0411  0A84               	incf	4,f
   327  0412  0804               	movf	4,w
   328  0413  067D               	xorwf	125,w
   329  0414  1903               	btfsc	3,2
   330  0415  3400               	retlw	0
   331  0416  0AFF               	incf	127,f
   332  0417  1903               	btfsc	3,2
   333  0418  0AFE               	incf	126,f
   334  0419  2C0F               	goto	init_ram
   335                           
   336                           	psect	cstackCOMMON
   337  0070                     __pcstackCOMMON:	
   338  0070                     ?_sys_init:	
   339  0070                     ?_gpio_init:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0070                     ?_timer_init:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0070                     ?_int_init:	
   346                           ; 0 bytes @ 0x0
   347                           
   348  0070                     ?_SET_EPWM_ON:	
   349                           ; 0 bytes @ 0x0
   350                           
   351  0070                     ?_delay_x10ms:	
   352                           ; 0 bytes @ 0x0
   353                           
   354  0070                     ?_ISR:	
   355                           ; 0 bytes @ 0x0
   356                           
   357  0070                     ??_ISR:	
   358                           ; 0 bytes @ 0x0
   359                           
   360  0070                     ?_main:	
   361                           ; 0 bytes @ 0x0
   362                           
   363  0070                     ?_eepromReadByte:	
   364                           ; 0 bytes @ 0x0
   365                           
   366  0070                     ?_get_RFID:	
   367                           ; 1 bytes @ 0x0
   368                           
   369                           
   370                           ; 1 bytes @ 0x0
   371  0070                     	ds	2
   372  0072                     ??_sys_init:	
   373  0072                     ??_gpio_init:	
   374                           ; 0 bytes @ 0x2
   375                           
   376  0072                     ??_timer_init:	
   377                           ; 0 bytes @ 0x2
   378                           
   379  0072                     ??_int_init:	
   380                           ; 0 bytes @ 0x2
   381                           
   382  0072                     ??_eepromReadByte:	
   383                           ; 0 bytes @ 0x2
   384                           
   385  0072                     ?_eepromWriteByte:	
   386                           ; 0 bytes @ 0x2
   387                           
   388  0072                     ??_SET_EPWM_ON:	
   389                           ; 0 bytes @ 0x2
   390                           
   391  0072                     ??_delay_x10ms:	
   392                           ; 0 bytes @ 0x2
   393                           
   394  0072                     ?_setState:	
   395                           ; 0 bytes @ 0x2
   396                           
   397  0072                     ?_comArr:	
   398                           ; 0 bytes @ 0x2
   399                           
   400  0072                     ?___bmul:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0072                     ?___lbdiv:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     ?_timerOut:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     eepromReadByte@EEAddr:	
   410                           ; 2 bytes @ 0x2
   411                           
   412  0072                     eepromWriteByte@EEData:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     comArr@arr2:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     ___bmul@multiplicand:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ___lbdiv@divisor:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0072                     timerOut@time:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0072                     setState@_tOut:	
   428                           ; 2 bytes @ 0x2
   429                           
   430                           
   431                           ; 2 bytes @ 0x2
   432  0072                     	ds	1
   433  0073                     ??_eepromWriteByte:	
   434  0073                     ??___bmul:	
   435                           ; 0 bytes @ 0x3
   436                           
   437  0073                     ??___lbdiv:	
   438                           ; 0 bytes @ 0x3
   439                           
   440  0073                     eepromReadByte@ReEepromData:	
   441                           ; 0 bytes @ 0x3
   442                           
   443  0073                     comArr@len1:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0073                     ___bmul@product:	
   447                           ; 1 bytes @ 0x3
   448                           
   449  0073                     ___lbdiv@dividend:	
   450                           ; 1 bytes @ 0x3
   451                           
   452                           
   453                           ; 1 bytes @ 0x3
   454  0073                     	ds	1
   455  0074                     ?_eepromReadBlock:	
   456  0074                     ??_timerOut:	
   457                           ; 0 bytes @ 0x4
   458                           
   459  0074                     ??_setState:	
   460                           ; 0 bytes @ 0x4
   461                           
   462  0074                     eepromReadBlock@buff:	
   463                           ; 0 bytes @ 0x4
   464                           
   465  0074                     comArr@len2:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0074                     timerOut@Logic:	
   469                           ; 1 bytes @ 0x4
   470                           
   471  0074                     delay_x10ms@t:	
   472                           ; 1 bytes @ 0x4
   473                           
   474  0074                     setState@stt:	
   475                           ; 1 bytes @ 0x4
   476                           
   477  0074                     ___bmul@multiplier:	
   478                           ; 1 bytes @ 0x4
   479                           
   480  0074                     ___lbdiv@counter:	
   481                           ; 1 bytes @ 0x4
   482                           
   483                           
   484                           ; 1 bytes @ 0x4
   485  0074                     	ds	1
   486  0075                     ??_comArr:	
   487  0075                     ?_beep2:	
   488                           ; 0 bytes @ 0x5
   489                           
   490  0075                     eepromReadBlock@len:	
   491                           ; 0 bytes @ 0x5
   492                           
   493  0075                     eepromWriteByte@EEAddr:	
   494                           ; 1 bytes @ 0x5
   495                           
   496  0075                     beep2@rep:	
   497                           ; 1 bytes @ 0x5
   498                           
   499  0075                     ___lbdiv@quotient:	
   500                           ; 1 bytes @ 0x5
   501                           
   502  0075                     timerOut@CurTimer:	
   503                           ; 1 bytes @ 0x5
   504                           
   505                           
   506                           ; 2 bytes @ 0x5
   507  0075                     	ds	1
   508  0076                     ??_eepromReadBlock:	
   509  0076                     ?_eepromWriteBlock:	
   510                           ; 0 bytes @ 0x6
   511                           
   512  0076                     ??_beep2:	
   513                           ; 0 bytes @ 0x6
   514                           
   515  0076                     eepromWriteBlock@buff:	
   516                           ; 0 bytes @ 0x6
   517                           
   518  0076                     beep2@sel:	
   519                           ; 1 bytes @ 0x6
   520                           
   521                           
   522                           ; 1 bytes @ 0x6
   523  0076                     	ds	1
   524  0077                     ??_get_RFID:	
   525  0077                     eepromReadBlock@addStart:	
   526                           ; 0 bytes @ 0x7
   527                           
   528  0077                     eepromWriteBlock@len:	
   529                           ; 1 bytes @ 0x7
   530                           
   531                           
   532                           ; 1 bytes @ 0x7
   533  0077                     	ds	1
   534  0078                     ??_eepromWriteBlock:	
   535  0078                     eepromReadBlock@i:	
   536                           ; 0 bytes @ 0x8
   537                           
   538  0078                     comArr@arr1:	
   539                           ; 1 bytes @ 0x8
   540                           
   541                           
   542                           ; 1 bytes @ 0x8
   543  0078                     	ds	1
   544  0079                     eepromWriteBlock@addStart:	
   545  0079                     comArr@i:	
   546                           ; 1 bytes @ 0x9
   547                           
   548                           
   549                           ; 1 bytes @ 0x9
   550  0079                     	ds	1
   551  007A                     ?_id_search:	
   552  007A                     eepromWriteBlock@i:	
   553                           ; 1 bytes @ 0xA
   554                           
   555  007A                     id_search@buff:	
   556                           ; 1 bytes @ 0xA
   557                           
   558                           
   559                           ; 1 bytes @ 0xA
   560  007A                     	ds	1
   561  007B                     ??_id_search:	
   562  007B                     id_replate@id:	
   563                           ; 0 bytes @ 0xB
   564                           
   565                           
   566                           ; 1 bytes @ 0xB
   567  007B                     	ds	1
   568  007C                     ??_id_clear:	
   569                           
   570                           	psect	cstackBANK0
   571  003E                     __pcstackBANK0:	
   572                           ; 0 bytes @ 0xC
   573                           
   574  003E                     ?_id_replate:	
   575  003E                     id_search@id_input:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  003E                     id_replate@Cont:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  003E                     get_RFID@RF_serial_55bits:	
   582                           ; 1 bytes @ 0x0
   583                           
   584                           
   585                           ; 11 bytes @ 0x0
   586  003E                     	ds	1
   587  003F                     id_search@i:	
   588  003F                     id_replate@buff:	
   589                           ; 1 bytes @ 0x1
   590                           
   591                           
   592                           ; 1 bytes @ 0x1
   593  003F                     	ds	1
   594  0040                     ??_id_replate:	
   595                           
   596                           ; 0 bytes @ 0x2
   597  0040                     	ds	2
   598  0042                     ?_id_clear:	
   599  0042                     id_clear@idMax:	
   600                           ; 0 bytes @ 0x4
   601                           
   602                           
   603                           ; 1 bytes @ 0x4
   604  0042                     	ds	1
   605  0043                     id_clear@tmp:	
   606                           
   607                           ; 5 bytes @ 0x5
   608  0043                     	ds	5
   609  0048                     id_clear@idMin:	
   610                           
   611                           ; 1 bytes @ 0xA
   612  0048                     	ds	1
   613  0049                     get_RFID@flag_RFID_syn:	
   614                           
   615                           ; 1 bytes @ 0xB
   616  0049                     	ds	1
   617  004A                     get_RFID@even_col:	
   618                           
   619                           ; 1 bytes @ 0xC
   620  004A                     	ds	1
   621  004B                     get_RFID@even_row:	
   622                           
   623                           ; 1 bytes @ 0xD
   624  004B                     	ds	1
   625  004C                     get_RFID@j:	
   626                           
   627                           ; 1 bytes @ 0xE
   628  004C                     	ds	1
   629  004D                     get_RFID@i:	
   630                           
   631                           ; 1 bytes @ 0xF
   632  004D                     	ds	1
   633  004E                     get_RFID@flag_RFID_last:	
   634                           
   635                           ; 1 bytes @ 0x10
   636  004E                     	ds	1
   637  004F                     get_RFID@timeOutVal:	
   638                           
   639                           ; 2 bytes @ 0x11
   640  004F                     	ds	2
   641  0051                     get_RFID@ii:	
   642                           
   643                           ; 1 bytes @ 0x13
   644  0051                     	ds	1
   645  0052                     ??_main:	
   646                           
   647                           ; 0 bytes @ 0x14
   648  0052                     	ds	3
   649  0055                     main@idState:	
   650                           
   651                           ; 1 bytes @ 0x17
   652  0055                     	ds	1
   653  0056                     main@tmp:	
   654                           
   655                           ; 1 bytes @ 0x18
   656  0056                     	ds	1
   657  0057                     main@idop:	
   658                           
   659                           ; 1 bytes @ 0x19
   660  0057                     	ds	1
   661                           
   662                           	psect	maintext
   663  0155                     __pmaintext:	
   664 ;;Data sizes: Strings 0, constant 0, data 30, bss 10, persistent 0 stack 0
   665 ;;Auto spaces:   Size  Autos    Used
   666 ;; COMMON          14     12      12
   667 ;; BANK0           80     26      66
   668 ;; BANK1           32      0       0
   669 ;;
   670 ;; Pointer list with targets:
   671 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   672 ;;		 -> TMR0(BITSFR0[1]), 
   673 ;;
   674 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   675 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   676 ;;
   677 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   678 ;;		 -> buffTag(BANK0[25]), 
   679 ;;
   680 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   681 ;;		 -> buffTag(BANK0[25]), 
   682 ;;
   683 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   684 ;;		 -> keyID(BANK0[5]), 
   685 ;;
   686 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   687 ;;		 -> buffTag(BANK0[25]), 
   688 ;;
   689 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   690 ;;		 -> keyID(BANK0[5]), 
   691 ;;
   692 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   693 ;;		 -> buffTag(BANK0[25]), 
   694 ;;
   695 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   696 ;;		 -> buffTag(BANK0[25]), 
   697 ;;
   698 ;;
   699 ;; Critical Paths under _main in COMMON
   700 ;;
   701 ;;   _main->_id_search
   702 ;;   _main->_id_replate
   703 ;;   _id_clear->_id_replate
   704 ;;   _id_replate->_eepromWriteBlock
   705 ;;   _beep2->_delay_x10ms
   706 ;;   _eepromWriteBlock->_eepromWriteByte
   707 ;;   _id_search->_comArr
   708 ;;   _get_RFID->_timerOut
   709 ;;   _eepromReadBlock->_eepromReadByte
   710 ;;
   711 ;; Critical Paths under _ISR in COMMON
   712 ;;
   713 ;;   None.
   714 ;;
   715 ;; Critical Paths under _main in BANK0
   716 ;;
   717 ;;   _main->_get_RFID
   718 ;;   _id_clear->_id_replate
   719 ;;
   720 ;; Critical Paths under _ISR in BANK0
   721 ;;
   722 ;;   None.
   723 ;;
   724 ;; Critical Paths under _main in BANK1
   725 ;;
   726 ;;   None.
   727 ;;
   728 ;; Critical Paths under _ISR in BANK1
   729 ;;
   730 ;;   None.
   731 ;;
   732 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   733 ;;
   734 ;;
   735 ;;Call Graph Tables:
   736 ;;
   737 ;; ---------------------------------------------------------------------------------
   738 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   739 ;; ---------------------------------------------------------------------------------
   740 ;; (0) _main                                                10    10      0    4539
   741 ;;                                             20 BANK0      6     6      0
   742 ;;                           _sys_init
   743 ;;                          _gpio_init
   744 ;;                         _timer_init
   745 ;;                           _int_init
   746 ;;                    _eepromWriteByte
   747 ;;                        _SET_EPWM_ON
   748 ;;                     _eepromReadByte
   749 ;;                    _eepromReadBlock
   750 ;;                           _setState
   751 ;;                           _get_RFID
   752 ;;                          _id_search
   753 ;;                           _id_clear
   754 ;;                              _beep2
   755 ;;                         _id_replate
   756 ;; ---------------------------------------------------------------------------------
   757 ;; (1) _id_clear                                             7     6      1     718
   758 ;;                                              4 BANK0      7     6      1
   759 ;;                         _id_replate
   760 ;; ---------------------------------------------------------------------------------
   761 ;; (1) _id_replate                                           5     3      2     623
   762 ;;                                             11 COMMON     1     1      0
   763 ;;                                              0 BANK0      4     2      2
   764 ;;                             ___bmul
   765 ;;                   _eepromWriteBlock
   766 ;; ---------------------------------------------------------------------------------
   767 ;; (1) _beep2                                                2     1      1      88
   768 ;;                                              5 COMMON     2     1      1
   769 ;;                        _delay_x10ms
   770 ;; ---------------------------------------------------------------------------------
   771 ;; (2) _eepromWriteBlock                                     5     3      2     178
   772 ;;                                              6 COMMON     5     3      2
   773 ;;                    _eepromWriteByte
   774 ;; ---------------------------------------------------------------------------------
   775 ;; (1) _id_search                                            4     3      1     518
   776 ;;                                             10 COMMON     2     1      1
   777 ;;                                              0 BANK0      2     2      0
   778 ;;                             _comArr
   779 ;;                            ___lbdiv
   780 ;; ---------------------------------------------------------------------------------
   781 ;; (2) _delay_x10ms                                          3     3      0      22
   782 ;;                                              2 COMMON     3     3      0
   783 ;; ---------------------------------------------------------------------------------
   784 ;; (1) _get_RFID                                            21    21      0    1917
   785 ;;                                              7 COMMON     1     1      0
   786 ;;                                              0 BANK0     20    20      0
   787 ;;                           _timerOut
   788 ;;                            ___lbdiv
   789 ;; ---------------------------------------------------------------------------------
   790 ;; (3) _eepromWriteByte                                      4     3      1      44
   791 ;;                                              2 COMMON     4     3      1
   792 ;; ---------------------------------------------------------------------------------
   793 ;; (1) _eepromReadBlock                                      5     3      2     179
   794 ;;                                              4 COMMON     5     3      2
   795 ;;                     _eepromReadByte
   796 ;; ---------------------------------------------------------------------------------
   797 ;; (1) _sys_init                                             0     0      0       0
   798 ;; ---------------------------------------------------------------------------------
   799 ;; (2) ___lbdiv                                              4     3      1     162
   800 ;;                                              2 COMMON     4     3      1
   801 ;; ---------------------------------------------------------------------------------
   802 ;; (2) ___bmul                                               3     2      1      92
   803 ;;                                              2 COMMON     3     2      1
   804 ;; ---------------------------------------------------------------------------------
   805 ;; (1) _setState                                             3     1      2      44
   806 ;;                                              2 COMMON     3     1      2
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   809 ;; ---------------------------------------------------------------------------------
   810 ;; (2) _timerOut                                             5     3      2      90
   811 ;;                                              2 COMMON     5     3      2
   812 ;; ---------------------------------------------------------------------------------
   813 ;; (2) _comArr                                               8     5      3     222
   814 ;;                                              2 COMMON     8     5      3
   815 ;; ---------------------------------------------------------------------------------
   816 ;; (2) _eepromReadByte                                       2     2      0      45
   817 ;;                                              2 COMMON     2     2      0
   818 ;; ---------------------------------------------------------------------------------
   819 ;; (1) _int_init                                             0     0      0       0
   820 ;; ---------------------------------------------------------------------------------
   821 ;; (1) _timer_init                                           0     0      0       0
   822 ;; ---------------------------------------------------------------------------------
   823 ;; (1) _gpio_init                                            0     0      0       0
   824 ;; ---------------------------------------------------------------------------------
   825 ;; Estimated maximum stack depth 3
   826 ;; ---------------------------------------------------------------------------------
   827 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   828 ;; ---------------------------------------------------------------------------------
   829 ;; (5) _ISR                                                  2     2      0       0
   830 ;;                                              0 COMMON     2     2      0
   831 ;; ---------------------------------------------------------------------------------
   832 ;; Estimated maximum stack depth 5
   833 ;; ---------------------------------------------------------------------------------
   834 ;; Call Graph Graphs:
   835 ;; _main (ROOT)
   836 ;;   _sys_init
   837 ;;   _gpio_init
   838 ;;   _timer_init
   839 ;;   _int_init
   840 ;;   _eepromWriteByte
   841 ;;   _SET_EPWM_ON
   842 ;;   _eepromReadByte
   843 ;;   _eepromReadBlock
   844 ;;     _eepromReadByte
   845 ;;   _setState
   846 ;;   _get_RFID
   847 ;;     _timerOut
   848 ;;     ___lbdiv
   849 ;;   _id_search
   850 ;;     _comArr
   851 ;;     ___lbdiv
   852 ;;   _id_clear
   853 ;;     _id_replate
   854 ;;       ___bmul
   855 ;;       _eepromWriteBlock
   856 ;;         _eepromWriteByte
   857 ;;   _beep2
   858 ;;     _delay_x10ms
   859 ;;   _id_replate
   860 ;;     ___bmul
   861 ;;     _eepromWriteBlock
   862 ;;       _eepromWriteByte
   863 ;;
   864 ;; _ISR (ROOT)
   865 ;;
   866 ;; Address spaces:
   867 ;;Name               Size   Autos  Total    Cost      Usage
   868 ;;SFR1                 0      0       0       2        0.0%
   869 ;;BITSFR1              0      0       0       2        0.0%
   870 ;;BANK1               20      0       0       5        0.0%
   871 ;;BITBANK1            20      0       0       7        0.0%
   872 ;;CODE                 0      0       0       0        0.0%
   873 ;;DATA                 0      0      52       8        0.0%
   874 ;;ABS                  0      0      4E       6        0.0%
   875 ;;NULL                 0      0       0       0        0.0%
   876 ;;STACK                0      0       4       2        0.0%
   877 ;;BANK0               50     1A      42       4       82.5%
   878 ;;BITBANK0            50      0       0       3        0.0%
   879 ;;SFR0                 0      0       0       1        0.0%
   880 ;;BITSFR0              0      0       0       1        0.0%
   881 ;;COMMON               E      C       C       1       85.7%
   882 ;;BITCOMMON            E      0       0       0        0.0%
   883 ;;EEDATA             100      0       0       0        0.0%
   884                           
   885                           
   886 ;; *************** function _main *****************
   887 ;; Defined at:
   888 ;;		line 213 in file "MAIN.C"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  t               2    0        unsigned int 
   893 ;;  idop            1   25[BANK0 ] unsigned char 
   894 ;;  tmp             1   24[BANK0 ] unsigned char 
   895 ;;  idState         1   23[BANK0 ] unsigned char 
   896 ;;  t1              1    0        unsigned char 
   897 ;;  buzFre          1    0        unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;		None               void
   900 ;; Registers used:
   901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 17F/0
   904 ;;		On exit  : 20/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1
   907 ;;      Params:         0       0       0
   908 ;;      Locals:         0       3       0
   909 ;;      Temps:          0       3       0
   910 ;;      Totals:         0       6       0
   911 ;;Total ram usage:        6 bytes
   912 ;; Hardware stack levels required when called:    5
   913 ;; This function calls:
   914 ;;		_sys_init
   915 ;;		_gpio_init
   916 ;;		_timer_init
   917 ;;		_int_init
   918 ;;		_eepromWriteByte
   919 ;;		_SET_EPWM_ON
   920 ;;		_eepromReadByte
   921 ;;		_eepromReadBlock
   922 ;;		_setState
   923 ;;		_get_RFID
   924 ;;		_id_search
   925 ;;		_id_clear
   926 ;;		_beep2
   927 ;;		_id_replate
   928 ;; This function is called by:
   929 ;;		Startup code after reset
   930 ;; This function uses a non-reentrant model
   931 ;;
   932  0155                     _main:	
   933                           
   934                           ;MAIN.C: 216: unsigned int t;
   935                           ;MAIN.C: 217: unsigned char buzFre = 0;
   936                           
   937                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   938  0155  01D5               	clrf	main@idState
   939  0156  0064               	clrwdt	;#
   940                           
   941                           ;MAIN.C: 221: sys_init();
   942  0157  244D               	fcall	_sys_init
   943                           
   944                           ;MAIN.C: 222: gpio_init();
   945  0158  241A               	fcall	_gpio_init
   946                           
   947                           ;MAIN.C: 224: timer_init();
   948  0159  246B               	fcall	_timer_init
   949                           
   950                           ;MAIN.C: 225: int_init();
   951  015A  2437               	fcall	_int_init
   952                           
   953                           ;MAIN.C: 231: eepromWriteByte(0xFF, 0xAA);
   954  015B  30AA               	movlw	170
   955  015C  00F2               	movwf	?_eepromWriteByte
   956  015D  30FF               	movlw	255
   957  015E  22BD               	fcall	_eepromWriteByte
   958                           
   959                           ;MAIN.C: 232: eepromWriteByte(0xFF, 0xAA);
   960  015F  30AA               	movlw	170
   961  0160  00F2               	movwf	?_eepromWriteByte
   962  0161  30FF               	movlw	255
   963  0162  22BD               	fcall	_eepromWriteByte
   964                           
   965                           ;MAIN.C: 235: TRISC &= 0xfe;
   966  0163  1683               	bsf	3,5	;RP0=1, select bank1
   967  0164  1007               	bcf	7,0	;volatile
   968                           
   969                           ;MAIN.C: 237: SET_EPWM_ON();
   970  0165  22FD               	fcall	_SET_EPWM_ON
   971                           
   972                           ;MAIN.C: 241: _delay((unsigned long)((20)*(8000000/4000.0)));
   973  0166  3034               	movlw	52
   974  0167  1283               	bcf	3,5	;RP0=0, select bank0
   975  0168  00D3               	movwf	??_main+1
   976  0169  30F1               	movlw	241
   977  016A  00D2               	movwf	??_main
   978  016B                     u1757:	
   979  016B  0BD2               	decfsz	??_main,f
   980  016C  296B               	goto	u1757
   981  016D  0BD3               	decfsz	??_main+1,f
   982  016E  296B               	goto	u1757
   983  016F  2970               	nop2
   984                           
   985                           ;MAIN.C: 246: if (eepromReadByte(0x06) != 0) {
   986  0170  3006               	movlw	6
   987  0171  2455               	fcall	_eepromReadByte
   988  0172  3A00               	xorlw	0
   989  0173  1903               	skipnz
   990  0174  2987               	goto	l6462
   991  0175  3006               	movlw	6
   992                           
   993                           ;MAIN.C: 250: eepromWriteByte(0x06, 0);
   994  0176  01F2               	clrf	?_eepromWriteByte
   995  0177  22BD               	fcall	_eepromWriteByte
   996  0178  3007               	movlw	7
   997                           
   998                           ;MAIN.C: 251: eepromWriteByte(0x06 + 1, 0);
   999  0179  01F2               	clrf	?_eepromWriteByte
  1000  017A  22BD               	fcall	_eepromWriteByte
  1001                           
  1002                           ;MAIN.C: 252: eepromWriteByte(0x06 + 2, 0x87);
  1003  017B  3087               	movlw	135
  1004  017C  00F2               	movwf	?_eepromWriteByte
  1005  017D  3008               	movlw	8
  1006  017E  22BD               	fcall	_eepromWriteByte
  1007                           
  1008                           ;MAIN.C: 253: eepromWriteByte(0x06 + 3, 0x3a);
  1009  017F  303A               	movlw	58
  1010  0180  00F2               	movwf	?_eepromWriteByte
  1011  0181  3009               	movlw	9
  1012  0182  22BD               	fcall	_eepromWriteByte
  1013                           
  1014                           ;MAIN.C: 254: eepromWriteByte(0x06 + 4, 0xf8);
  1015  0183  30F8               	movlw	248
  1016  0184  00F2               	movwf	?_eepromWriteByte
  1017  0185  300A               	movlw	10
  1018  0186  22BD               	fcall	_eepromWriteByte
  1019  0187                     l6462:	
  1020                           
  1021                           ;MAIN.C: 256: }
  1022                           ;MAIN.C: 257: eepromReadBlock(0x06, buffTag, 5 * 5);
  1023  0187  3025               	movlw	_buffTag& (0+255)
  1024  0188  00F4               	movwf	?_eepromReadBlock
  1025  0189  3019               	movlw	25
  1026  018A  00F5               	movwf	?_eepromReadBlock+1
  1027  018B  3006               	movlw	6
  1028  018C  23EA               	fcall	_eepromReadBlock
  1029                           
  1030                           ;MAIN.C: 259: setState(1, 70);
  1031  018D  3046               	movlw	70
  1032  018E  00F2               	movwf	?_setState
  1033  018F  3001               	movlw	1
  1034  0190  01F3               	clrf	?_setState+1
  1035  0191  2443               	fcall	_setState
  1036                           
  1037                           ;MAIN.C: 263: tmp = 0;
  1038  0192  01D6               	clrf	main@tmp
  1039  0193                     l6468:	
  1040                           
  1041                           ;MAIN.C: 267: idop = get_RFID();
  1042  0193  200B               	fcall	_get_RFID
  1043  0194  00D7               	movwf	main@idop
  1044                           
  1045                           ;MAIN.C: 269: if (idop) {
  1046  0195  0857               	movf	main@idop,w
  1047  0196  1903               	btfsc	3,2
  1048  0197  2A3A               	goto	l6552
  1049                           
  1050                           ;MAIN.C: 270: idop = id_search(keyID, buffTag);
  1051  0198  3025               	movlw	_buffTag& (0+255)
  1052  0199  00FA               	movwf	?_id_search
  1053  019A  305D               	movlw	_keyID& (0+255)
  1054  019B  2393               	fcall	_id_search
  1055  019C  00D7               	movwf	main@idop
  1056                           
  1057                           ;MAIN.C: 271: switch (mtState) {
  1058  019D  2A22               	goto	l6548
  1059  019E                     l6474:	
  1060                           
  1061                           ;MAIN.C: 273: case 2:
  1062                           ;MAIN.C: 274: if ((idop > 1) && (idop < 6))
  1063  019E  3002               	movlw	2
  1064  019F  0257               	subwf	main@idop,w
  1065  01A0  1C03               	skipc
  1066  01A1  29AB               	goto	l6480
  1067  01A2  3006               	movlw	6
  1068  01A3  0257               	subwf	main@idop,w
  1069  01A4  1803               	skipnc
  1070  01A5  29AB               	goto	l6480
  1071  01A6  3000               	movlw	0
  1072                           
  1073                           ;MAIN.C: 275: {
  1074                           ;MAIN.C: 276: setState(0, 0);
  1075  01A7  01F2               	clrf	?_setState
  1076  01A8  01F3               	clrf	?_setState+1
  1077  01A9  2443               	fcall	_setState
  1078                           
  1079                           ;MAIN.C: 278: }
  1080  01AA  2A2D               	goto	l4178
  1081  01AB                     l6480:	
  1082                           
  1083                           ;MAIN.C: 279: else if (idop == 1)
  1084  01AB  0B57               	decfsz	main@idop,w
  1085  01AC  2A2D               	goto	l4178
  1086                           
  1087                           ;MAIN.C: 280: {
  1088                           ;MAIN.C: 282: id_clear(2, 5);
  1089  01AD  3005               	movlw	5
  1090  01AE  00C2               	movwf	?_id_clear
  1091  01AF  3002               	movlw	2
  1092  01B0  22DE               	fcall	_id_clear
  1093  01B1  3003               	movlw	3
  1094                           
  1095                           ;MAIN.C: 283: setState(3, 0);
  1096  01B2  01F2               	clrf	?_setState
  1097  01B3  01F3               	clrf	?_setState+1
  1098  01B4  2443               	fcall	_setState
  1099  01B5  3003               	movlw	3
  1100                           
  1101                           ;MAIN.C: 284: tmp = 1;
  1102  01B6  01D6               	clrf	main@tmp
  1103  01B7  0AD6               	incf	main@tmp,f
  1104                           
  1105                           ;MAIN.C: 289: beep2(0, 3);
  1106  01B8  00F5               	movwf	?_beep2
  1107  01B9  3000               	movlw	0
  1108  01BA  23C3               	fcall	_beep2
  1109  01BB  2A2D               	goto	l4178
  1110  01BC                     l6490:	
  1111                           
  1112                           ;MAIN.C: 300: if (idop == 1 && idState == 0) {
  1113  01BC  0B57               	decfsz	main@idop,w
  1114  01BD  29D0               	goto	l6502
  1115  01BE  08D5               	movf	main@idState,f
  1116  01BF  1D03               	skipz
  1117  01C0  29D0               	goto	l6502
  1118                           
  1119                           ;MAIN.C: 302: id_clear(2, 5);
  1120  01C1  3005               	movlw	5
  1121  01C2  00C2               	movwf	?_id_clear
  1122  01C3  3002               	movlw	2
  1123  01C4  22DE               	fcall	_id_clear
  1124  01C5  3003               	movlw	3
  1125                           
  1126                           ;MAIN.C: 303: setState(3, 0);
  1127  01C6  01F2               	clrf	?_setState
  1128  01C7  01F3               	clrf	?_setState+1
  1129  01C8  2443               	fcall	_setState
  1130  01C9  3003               	movlw	3
  1131                           
  1132                           ;MAIN.C: 304: tmp = 1;
  1133  01CA  01D6               	clrf	main@tmp
  1134  01CB  0AD6               	incf	main@tmp,f
  1135                           
  1136                           ;MAIN.C: 309: beep2(0, 3);
  1137  01CC  00F5               	movwf	?_beep2
  1138  01CD  3000               	movlw	0
  1139  01CE  23C3               	fcall	_beep2
  1140                           
  1141                           ;MAIN.C: 311: }
  1142  01CF  2A2D               	goto	l4178
  1143  01D0                     l6502:	
  1144                           
  1145                           ;MAIN.C: 312: else if (idop == 2 && idState == 0) {
  1146  01D0  0857               	movf	main@idop,w
  1147  01D1  3A02               	xorlw	2
  1148  01D2  1D03               	skipz
  1149  01D3  2A2D               	goto	l4178
  1150  01D4  08D5               	movf	main@idState,f
  1151  01D5  1D03               	skipz
  1152  01D6  2A2D               	goto	l4178
  1153                           
  1154                           ;MAIN.C: 314: id_clear(3, 5);
  1155  01D7  3005               	movlw	5
  1156  01D8  00C2               	movwf	?_id_clear
  1157  01D9  3003               	movlw	3
  1158  01DA  22DE               	fcall	_id_clear
  1159  01DB  3005               	movlw	5
  1160                           
  1161                           ;MAIN.C: 315: setState(5, 0);
  1162  01DC  01F2               	clrf	?_setState
  1163  01DD  01F3               	clrf	?_setState+1
  1164  01DE  2443               	fcall	_setState
  1165                           
  1166                           ;MAIN.C: 316: tmp = 2;
  1167  01DF  3002               	movlw	2
  1168  01E0  00D6               	movwf	main@tmp
  1169                           
  1170                           ;MAIN.C: 321: beep2(1, 2);
  1171  01E1  00F5               	movwf	?_beep2
  1172  01E2  3001               	movlw	1
  1173  01E3  23C3               	fcall	_beep2
  1174  01E4  2A2D               	goto	l4178
  1175  01E5                     l6514:	
  1176                           
  1177                           ;MAIN.C: 327: if (idState == 0) {
  1178  01E5  08D5               	movf	main@idState,f
  1179  01E6  1D03               	skipz
  1180  01E7  29FE               	goto	l6528
  1181                           
  1182                           ;MAIN.C: 334: if ( idop != 1) {
  1183  01E8  0357               	decf	main@idop,w
  1184  01E9  1903               	skipnz
  1185  01EA  2A2D               	goto	l4178
  1186  01EB  3006               	movlw	6
  1187                           
  1188                           ;MAIN.C: 335: tmp++;
  1189  01EC  0AD6               	incf	main@tmp,f
  1190                           
  1191                           ;MAIN.C: 337: if (tmp <= 5) {
  1192  01ED  0256               	subwf	main@tmp,w
  1193  01EE  1803               	skipnc
  1194  01EF  2A2D               	goto	l4178
  1195                           
  1196                           ;MAIN.C: 338: id_replate(tmp, keyID, buffTag);
  1197  01F0  305D               	movlw	_keyID& (0+255)
  1198  01F1  00BE               	movwf	?_id_replate
  1199  01F2  3025               	movlw	_buffTag& (0+255)
  1200  01F3  00BF               	movwf	?_id_replate+1
  1201  01F4  0856               	movf	main@tmp,w
  1202  01F5  2282               	fcall	_id_replate
  1203  01F6  3002               	movlw	2
  1204                           
  1205                           ;MAIN.C: 339: timeTick = 0;
  1206  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1207  01F8  01DA               	clrf	_timeTick
  1208  01F9  01DB               	clrf	_timeTick+1
  1209                           
  1210                           ;MAIN.C: 344: beep2(1, 2);
  1211  01FA  00F5               	movwf	?_beep2
  1212  01FB  3001               	movlw	1
  1213  01FC  23C3               	fcall	_beep2
  1214  01FD  2A2D               	goto	l4178
  1215  01FE                     l6528:	
  1216  01FE  3000               	movlw	0
  1217                           
  1218                           ;MAIN.C: 356: beep2(0, 1);
  1219  01FF  01F5               	clrf	?_beep2
  1220  0200  0AF5               	incf	?_beep2,f
  1221  0201  23C3               	fcall	_beep2
  1222  0202  2A2D               	goto	l4178
  1223  0203                     l6530:	
  1224                           
  1225                           ;MAIN.C: 362: if (idState == 0) {
  1226  0203  08D5               	movf	main@idState,f
  1227  0204  1D03               	skipz
  1228  0205  2A1D               	goto	l6544
  1229                           
  1230                           ;MAIN.C: 363: if ( idop > 2) {
  1231  0206  3003               	movlw	3
  1232  0207  0257               	subwf	main@idop,w
  1233  0208  1C03               	skipc
  1234  0209  2A2D               	goto	l4178
  1235  020A  3006               	movlw	6
  1236                           
  1237                           ;MAIN.C: 364: tmp++;
  1238  020B  0AD6               	incf	main@tmp,f
  1239                           
  1240                           ;MAIN.C: 366: if (tmp <= 5) {
  1241  020C  0256               	subwf	main@tmp,w
  1242  020D  1803               	skipnc
  1243  020E  2A2D               	goto	l4178
  1244                           
  1245                           ;MAIN.C: 367: id_replate(tmp, keyID, buffTag);
  1246  020F  305D               	movlw	_keyID& (0+255)
  1247  0210  00BE               	movwf	?_id_replate
  1248  0211  3025               	movlw	_buffTag& (0+255)
  1249  0212  00BF               	movwf	?_id_replate+1
  1250  0213  0856               	movf	main@tmp,w
  1251  0214  2282               	fcall	_id_replate
  1252  0215  3002               	movlw	2
  1253                           
  1254                           ;MAIN.C: 368: timeTick = 0;
  1255  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0217  01DA               	clrf	_timeTick
  1257  0218  01DB               	clrf	_timeTick+1
  1258                           
  1259                           ;MAIN.C: 374: beep2(1, 2);
  1260  0219  00F5               	movwf	?_beep2
  1261  021A  3001               	movlw	1
  1262  021B  23C3               	fcall	_beep2
  1263  021C  2A2D               	goto	l4178
  1264  021D                     l6544:	
  1265  021D  3000               	movlw	0
  1266                           
  1267                           ;MAIN.C: 385: beep2(0, 1);
  1268  021E  01F5               	clrf	?_beep2
  1269  021F  0AF5               	incf	?_beep2,f
  1270  0220  23C3               	fcall	_beep2
  1271  0221  2A2D               	goto	l4178
  1272  0222                     l6548:	
  1273  0222  085C               	movf	_mtState,w
  1274                           
  1275                           ; Switch size 1, requested type "space"
  1276                           ; Number of cases is 6, Range of values is 0 to 6
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; direct_byte           13     6 (fixed)
  1280                           ; simple_byte           19    10 (average)
  1281                           ; jumptable            260     6 (fixed)
  1282                           ; rangetable            11     6 (fixed)
  1283                           ; spacedrange           20     9 (fixed)
  1284                           ; locatedrange           7     3 (fixed)
  1285                           ;	Chosen strategy is direct_byte
  1286  0223  0084               	movwf	4
  1287  0224  3007               	movlw	7
  1288  0225  0204               	subwf	4,w
  1289  0226  1803               	skipnc
  1290  0227  2A2D               	goto	l4178
  1291  0228  3004               	movlw	high S6618
  1292  0229  008A               	movwf	10
  1293  022A  305D               	movlw	low S6618
  1294  022B  0704               	addwf	4,w
  1295  022C  0082               	movwf	2
  1296  022D                     l4178:	
  1297  022D  309F               	movlw	159
  1298                           
  1299                           ;MAIN.C: 392: idState = 1;
  1300  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1301  022F  01D5               	clrf	main@idState
  1302  0230  0AD5               	incf	main@idState,f
  1303                           
  1304                           ;MAIN.C: 393: _delay((unsigned long)((61)*(8000000/4000.0)));
  1305  0231  00D3               	movwf	??_main+1
  1306  0232  306F               	movlw	111
  1307  0233  00D2               	movwf	??_main
  1308  0234                     u1767:	
  1309  0234  0BD2               	decfsz	??_main,f
  1310  0235  2A34               	goto	u1767
  1311  0236  0BD3               	decfsz	??_main+1,f
  1312  0237  2A34               	goto	u1767
  1313  0238  2A39               	nop2
  1314                           
  1315                           ;MAIN.C: 394: }
  1316  0239  2A47               	goto	l6556
  1317  023A                     l6552:	
  1318  023A  3002               	movlw	2
  1319                           
  1320                           ;MAIN.C: 395: else {
  1321                           ;MAIN.C: 396: idState = 0;
  1322  023B  01D5               	clrf	main@idState
  1323                           
  1324                           ;MAIN.C: 397: _delay((unsigned long)((150)*(8000000/4000.0)));
  1325  023C  00D4               	movwf	??_main+2
  1326  023D  3086               	movlw	134
  1327  023E  00D3               	movwf	??_main+1
  1328  023F  3099               	movlw	153
  1329  0240  00D2               	movwf	??_main
  1330  0241                     u1777:	
  1331  0241  0BD2               	decfsz	??_main,f
  1332  0242  2A41               	goto	u1777
  1333  0243  0BD3               	decfsz	??_main+1,f
  1334  0244  2A41               	goto	u1777
  1335  0245  0BD4               	decfsz	??_main+2,f
  1336  0246  2A41               	goto	u1777
  1337  0247                     l6556:	
  1338                           
  1339                           ;MAIN.C: 398: }
  1340                           ;MAIN.C: 402: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1341  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0248  0859               	movf	_timeOut+1,w
  1343  0249  0458               	iorwf	_timeOut,w
  1344  024A  1903               	skipnz
  1345  024B  2A71               	goto	l6572
  1346  024C  085B               	movf	_timeTick+1,w
  1347  024D  0259               	subwf	_timeOut+1,w
  1348  024E  1D03               	skipz
  1349  024F  2A52               	goto	u1725
  1350  0250  085A               	movf	_timeTick,w
  1351  0251  0258               	subwf	_timeOut,w
  1352  0252                     u1725:	
  1353  0252  1C03               	btfss	3,0
  1354  0253  2A66               	goto	l6570
  1355  0254  2A71               	goto	l6572
  1356  0255                     l6562:	
  1357                           
  1358                           ;MAIN.C: 407: setState(2, 250);
  1359  0255  30FA               	movlw	250
  1360  0256  00F2               	movwf	?_setState
  1361  0257  3002               	movlw	2
  1362  0258  01F3               	clrf	?_setState+1
  1363  0259  2443               	fcall	_setState
  1364                           
  1365                           ;MAIN.C: 409: break;
  1366  025A  2A71               	goto	l6572
  1367  025B                     l6564:	
  1368                           
  1369                           ;MAIN.C: 411: setState(6, 40);
  1370  025B  3028               	movlw	40
  1371  025C  00F2               	movwf	?_setState
  1372  025D  3006               	movlw	6
  1373  025E  01F3               	clrf	?_setState+1
  1374  025F  2443               	fcall	_setState
  1375                           
  1376                           ;MAIN.C: 412: break;
  1377  0260  2A71               	goto	l6572
  1378  0261                     l6566:	
  1379  0261  3002               	movlw	2
  1380                           
  1381                           ;MAIN.C: 414: setState(2, 0);
  1382  0262  01F2               	clrf	?_setState
  1383  0263  01F3               	clrf	?_setState+1
  1384  0264  2443               	fcall	_setState
  1385                           
  1386                           ;MAIN.C: 417: break;
  1387  0265  2A71               	goto	l6572
  1388  0266                     l6570:	
  1389  0266  085C               	movf	_mtState,w
  1390                           
  1391                           ; Switch size 1, requested type "space"
  1392                           ; Number of cases is 3, Range of values is 1 to 6
  1393                           ; switch strategies available:
  1394                           ; Name         Instructions Cycles
  1395                           ; simple_byte           10     6 (average)
  1396                           ; direct_byte           15     9 (fixed)
  1397                           ; jumptable            263     9 (fixed)
  1398                           ;	Chosen strategy is simple_byte
  1399  0267  3A01               	xorlw	1	; case 1
  1400  0268  1903               	skipnz
  1401  0269  2A55               	goto	l6562
  1402  026A  3A03               	xorlw	3	; case 2
  1403  026B  1903               	skipnz
  1404  026C  2A5B               	goto	l6564
  1405  026D  3A04               	xorlw	4	; case 6
  1406  026E  1903               	skipnz
  1407  026F  2A61               	goto	l6566
  1408  0270  2A71               	goto	l6572
  1409  0271                     l6572:	
  1410                           
  1411                           ;MAIN.C: 420: }
  1412                           ;MAIN.C: 423: if (mtState == 0)
  1413  0271  08DC               	movf	_mtState,f
  1414  0272  1D03               	skipz
  1415  0273  2A76               	goto	l4203
  1416                           
  1417                           ;MAIN.C: 424: RA3 = 1;
  1418  0274  1585               	bsf	5,3
  1419  0275  2A77               	goto	l6576
  1420  0276                     l4203:	
  1421                           
  1422                           ;MAIN.C: 425: else
  1423                           ;MAIN.C: 426: RA3 = 0;
  1424  0276  1185               	bcf	5,3
  1425  0277                     l6576:	
  1426                           
  1427                           ;MAIN.C: 435: if (mtState == 2) {
  1428  0277  085C               	movf	_mtState,w
  1429  0278  3A02               	xorlw	2
  1430  0279  1D03               	skipz
  1431  027A  2A7D               	goto	l4205
  1432                           
  1433                           ;MAIN.C: 437: RC0 = 1;
  1434  027B  1407               	bsf	7,0
  1435                           
  1436                           ;MAIN.C: 438: } else {
  1437  027C  2A7E               	goto	l6580
  1438  027D                     l4205:	
  1439                           
  1440                           ;MAIN.C: 439: RC0 = 0;
  1441  027D  1007               	bcf	7,0
  1442  027E                     l6580:	
  1443                           
  1444                           ;MAIN.C: 440: };
  1445                           ;MAIN.C: 476: timeTick++;
  1446  027E  0ADA               	incf	_timeTick,f
  1447  027F  1903               	skipnz
  1448  0280  0ADB               	incf	_timeTick+1,f
  1449  0281  2993               	goto	l6468
  1450  0282                     __end_of_main:	
  1451                           
  1452                           	psect	swtext1
  1453  045D                     __pswtext1:	
  1454  045D                     S6618:	
  1455  045D  2A2D               	ljmp	l4178
  1456  045E  299E               	ljmp	l6474
  1457  045F  299E               	ljmp	l6474
  1458  0460  29E5               	ljmp	l6514
  1459  0461  2A2D               	ljmp	l4178
  1460  0462  2A03               	ljmp	l6530
  1461  0463  29BC               	ljmp	l6490
  1462                           
  1463                           	psect	text484
  1464  02DE                     __ptext484:	
  1465 ;; =============== function _main ends ============
  1466                           
  1467                           
  1468 ;; *************** function _id_clear *****************
  1469 ;; Defined at:
  1470 ;;		line 184 in file "MAIN.C"
  1471 ;; Parameters:    Size  Location     Type
  1472 ;;  idMin           1    wreg     unsigned char 
  1473 ;;  idMax           1    4[BANK0 ] unsigned char 
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;  idMin           1   10[BANK0 ] unsigned char 
  1476 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1477 ;; Return value:  Size  Location     Type
  1478 ;;		None               void
  1479 ;; Registers used:
  1480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1481 ;; Tracked objects:
  1482 ;;		On entry : 20/0
  1483 ;;		On exit  : 20/0
  1484 ;;		Unchanged: 0/0
  1485 ;; Data sizes:     COMMON   BANK0   BANK1
  1486 ;;      Params:         0       1       0
  1487 ;;      Locals:         0       6       0
  1488 ;;      Temps:          0       0       0
  1489 ;;      Totals:         0       7       0
  1490 ;;Total ram usage:        7 bytes
  1491 ;; Hardware stack levels used:    1
  1492 ;; Hardware stack levels required when called:    4
  1493 ;; This function calls:
  1494 ;;		_id_replate
  1495 ;; This function is called by:
  1496 ;;		_main
  1497 ;; This function uses a non-reentrant model
  1498 ;;
  1499  02DE                     _id_clear:	
  1500                           
  1501                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1502                           ;id_clear@idMin stored from wreg
  1503  02DE  00C8               	movwf	id_clear@idMin
  1504                           
  1505                           ;MAIN.C: 185: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  1506  02DF  3043               	movlw	id_clear@tmp& (0+255)
  1507  02E0  0084               	movwf	4
  1508  02E1  0820               	movf	id_clear@F1097,w
  1509  02E2  1383               	bcf	3,7	;select IRP bank0
  1510  02E3  0080               	movwf	0
  1511  02E4  0A84               	incf	4,f
  1512  02E5  0821               	movf	id_clear@F1097+1,w
  1513  02E6  0080               	movwf	0
  1514  02E7  0A84               	incf	4,f
  1515  02E8  0822               	movf	id_clear@F1097+2,w
  1516  02E9  0080               	movwf	0
  1517  02EA  0A84               	incf	4,f
  1518  02EB  0823               	movf	id_clear@F1097+3,w
  1519  02EC  0080               	movwf	0
  1520  02ED  0A84               	incf	4,f
  1521  02EE  0824               	movf	id_clear@F1097+4,w
  1522  02EF  0080               	movwf	0
  1523  02F0                     l6434:	
  1524  02F0  0848               	movf	id_clear@idMin,w
  1525  02F1  0242               	subwf	id_clear@idMax,w
  1526  02F2  1C03               	btfss	3,0
  1527  02F3  0008               	return
  1528                           
  1529                           ;MAIN.C: 187: id_replate(idMin, tmp, buffTag);
  1530  02F4  3043               	movlw	id_clear@tmp& (0+255)
  1531  02F5  00BE               	movwf	?_id_replate
  1532  02F6  3025               	movlw	_buffTag& (0+255)
  1533  02F7  00BF               	movwf	?_id_replate+1
  1534  02F8  0848               	movf	id_clear@idMin,w
  1535  02F9  2282               	fcall	_id_replate
  1536  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1537  02FB  0AC8               	incf	id_clear@idMin,f
  1538  02FC  2AF0               	goto	l6434
  1539  02FD                     __end_of_id_clear:	
  1540                           
  1541                           	psect	text485
  1542  0282                     __ptext485:	
  1543 ;; =============== function _id_clear ends ============
  1544                           
  1545                           
  1546 ;; *************** function _id_replate *****************
  1547 ;; Defined at:
  1548 ;;		line 170 in file "MAIN.C"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;  id              1    wreg     unsigned char 
  1551 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1552 ;;		 -> id_clear@tmp(5), keyID(5), 
  1553 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1554 ;;		 -> buffTag(25), 
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;  id              1   11[COMMON] unsigned char 
  1557 ;; Return value:  Size  Location     Type
  1558 ;;		None               void
  1559 ;; Registers used:
  1560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 20/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1
  1566 ;;      Params:         0       2       0
  1567 ;;      Locals:         1       0       0
  1568 ;;      Temps:          0       2       0
  1569 ;;      Totals:         1       4       0
  1570 ;;Total ram usage:        5 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    3
  1573 ;; This function calls:
  1574 ;;		___bmul
  1575 ;;		_eepromWriteBlock
  1576 ;; This function is called by:
  1577 ;;		_id_clear
  1578 ;;		_main
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581  0282                     _id_replate:	
  1582                           
  1583                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1584                           ;id_replate@id stored from wreg
  1585  0282  00FB               	movwf	id_replate@id
  1586                           
  1587                           ;MAIN.C: 171: id = (id - 1) * 5;
  1588  0283  3005               	movlw	5
  1589  0284  00F2               	movwf	?___bmul
  1590  0285  087B               	movf	id_replate@id,w
  1591  0286  3EFF               	addlw	255
  1592  0287  2429               	fcall	___bmul
  1593  0288  00FB               	movwf	id_replate@id
  1594                           
  1595                           ;MAIN.C: 172: {
  1596                           ;MAIN.C: 173: {
  1597                           ;MAIN.C: 174: *(buff + id) = *Cont;
  1598  0289  083E               	movf	id_replate@Cont,w
  1599  028A  0084               	movwf	4
  1600  028B  1383               	bcf	3,7	;select IRP bank0
  1601  028C  0800               	movf	0,w
  1602  028D  00C0               	movwf	??_id_replate
  1603  028E  087B               	movf	id_replate@id,w
  1604  028F  073F               	addwf	id_replate@buff,w
  1605  0290  00C1               	movwf	??_id_replate+1
  1606  0291  0084               	movwf	4
  1607  0292  0840               	movf	??_id_replate,w
  1608  0293  0080               	movwf	0
  1609                           
  1610                           ;MAIN.C: 175: *(buff + 1 + id) = *(Cont + 1);
  1611  0294  083E               	movf	id_replate@Cont,w
  1612  0295  3E01               	addlw	1
  1613  0296  22B6               	fcall	PL3	;call to abstracted procedure
  1614  0297  3E01               	addlw	1
  1615  0298  0084               	movwf	4
  1616  0299  0840               	movf	??_id_replate,w
  1617  029A  0080               	movwf	0
  1618                           
  1619                           ;MAIN.C: 176: *(buff + 2 + id) = *(Cont + 2);
  1620  029B  083E               	movf	id_replate@Cont,w
  1621  029C  3E02               	addlw	2
  1622  029D  22B6               	fcall	PL3	;call to abstracted procedure
  1623  029E  3E02               	addlw	2
  1624  029F  0084               	movwf	4
  1625  02A0  0840               	movf	??_id_replate,w
  1626  02A1  0080               	movwf	0
  1627                           
  1628                           ;MAIN.C: 177: *(buff + 3 + id) = *(Cont + 3);
  1629  02A2  083E               	movf	id_replate@Cont,w
  1630  02A3  3E03               	addlw	3
  1631  02A4  22B6               	fcall	PL3	;call to abstracted procedure
  1632  02A5  3E03               	addlw	3
  1633  02A6  0084               	movwf	4
  1634  02A7  0840               	movf	??_id_replate,w
  1635  02A8  0080               	movwf	0
  1636                           
  1637                           ;MAIN.C: 178: *(buff + 4 + id) = *(Cont + 4);
  1638  02A9  083E               	movf	id_replate@Cont,w
  1639  02AA  3E04               	addlw	4
  1640  02AB  22B6               	fcall	PL3	;call to abstracted procedure
  1641  02AC  3E04               	addlw	4
  1642  02AD  0084               	movwf	4
  1643  02AE  0840               	movf	??_id_replate,w
  1644  02AF  0080               	movwf	0
  1645                           
  1646                           ;MAIN.C: 179: }
  1647                           ;MAIN.C: 180: }
  1648                           ;MAIN.C: 182: eepromWriteBlock(0x06, buffTag, 25);
  1649  02B0  3025               	movlw	_buffTag& (0+255)
  1650  02B1  00F6               	movwf	?_eepromWriteBlock
  1651  02B2  3019               	movlw	25
  1652  02B3  00F7               	movwf	?_eepromWriteBlock+1
  1653  02B4  3006               	movlw	6
  1654  02B5  2BD8               	ljmp	_eepromWriteBlock
  1655  02B6                     __end_of_id_replate:	
  1656  02B6                     PL3:	
  1657  02B6  0084               	movwf	4
  1658  02B7  0800               	movf	0,w
  1659  02B8  00C0               	movwf	??_id_replate
  1660  02B9  087B               	movf	id_replate@id,w
  1661  02BA  073F               	addwf	id_replate@buff,w
  1662  02BB  00C1               	movwf	??_id_replate+1
  1663  02BC  0008               	return
  1664                           
  1665                           	psect	text486
  1666  03C3                     __ptext486:	
  1667 ;; =============== function _id_replate ends ============
  1668                           
  1669                           
  1670 ;; *************** function _beep2 *****************
  1671 ;; Defined at:
  1672 ;;		line 190 in file "MAIN.C"
  1673 ;; Parameters:    Size  Location     Type
  1674 ;;  sel             1    wreg     unsigned char 
  1675 ;;  rep             1    5[COMMON] unsigned char 
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;  sel             1    6[COMMON] unsigned char 
  1678 ;; Return value:  Size  Location     Type
  1679 ;;		None               void
  1680 ;; Registers used:
  1681 ;;		wreg, status,2, status,0, pclath, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 20/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMMON   BANK0   BANK1
  1687 ;;      Params:         1       0       0
  1688 ;;      Locals:         1       0       0
  1689 ;;      Temps:          0       0       0
  1690 ;;      Totals:         2       0       0
  1691 ;;Total ram usage:        2 bytes
  1692 ;; Hardware stack levels used:    1
  1693 ;; Hardware stack levels required when called:    2
  1694 ;; This function calls:
  1695 ;;		_delay_x10ms
  1696 ;; This function is called by:
  1697 ;;		_main
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700  03C3                     _beep2:	
  1701                           
  1702                           ; Regs used in _beep2: [wreg+status,2+status,0+pclath+cstack]
  1703                           ;beep2@sel stored from wreg
  1704  03C3  00F6               	movwf	beep2@sel
  1705  03C4                     l6412:	
  1706                           ;MAIN.C: 191: while (rep--) {
  1707                           
  1708  03C4  03F5               	decf	beep2@rep,f
  1709  03C5  0875               	movf	beep2@rep,w
  1710  03C6  3AFF               	xorlw	255
  1711  03C7  1903               	btfsc	3,2
  1712  03C8  0008               	return
  1713                           
  1714                           ;MAIN.C: 192: RC0 = 1; if (sel)RA3 = 1;
  1715  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1716  03CA  1407               	bsf	7,0
  1717  03CB  0876               	movf	beep2@sel,w
  1718  03CC  1D03               	skipz
  1719  03CD  1585               	bsf	5,3
  1720                           
  1721                           ;MAIN.C: 193: delay_x10ms(20);
  1722  03CE  3014               	movlw	20
  1723  03CF  23FB               	fcall	_delay_x10ms
  1724                           
  1725                           ;MAIN.C: 194: RC0 = 0; if (sel)RA3 = 0;
  1726  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1727  03D1  1007               	bcf	7,0
  1728  03D2  0876               	movf	beep2@sel,w
  1729  03D3  1D03               	skipz
  1730  03D4  1185               	bcf	5,3
  1731                           
  1732                           ;MAIN.C: 195: delay_x10ms(20);
  1733  03D5  3014               	movlw	20
  1734  03D6  23FB               	fcall	_delay_x10ms
  1735  03D7  2BC4               	goto	l6412
  1736  03D8                     __end_of_beep2:	
  1737                           
  1738                           	psect	text487
  1739  03D8                     __ptext487:	
  1740 ;; =============== function _beep2 ends ============
  1741                           
  1742                           
  1743 ;; *************** function _eepromWriteBlock *****************
  1744 ;; Defined at:
  1745 ;;		line 43 in file "ms82_eeprom.c"
  1746 ;; Parameters:    Size  Location     Type
  1747 ;;  addStart        1    wreg     unsigned char 
  1748 ;;  buff            1    6[COMMON] PTR unsigned char 
  1749 ;;		 -> buffTag(25), 
  1750 ;;  len             1    7[COMMON] unsigned char 
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  addStart        1    9[COMMON] unsigned char 
  1753 ;;  i               1   10[COMMON] unsigned char 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;		None               void
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 120/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1
  1763 ;;      Params:         2       0       0
  1764 ;;      Locals:         2       0       0
  1765 ;;      Temps:          1       0       0
  1766 ;;      Totals:         5       0       0
  1767 ;;Total ram usage:        5 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    2
  1770 ;; This function calls:
  1771 ;;		_eepromWriteByte
  1772 ;; This function is called by:
  1773 ;;		_id_replate
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776  03D8                     _eepromWriteBlock:	
  1777                           
  1778                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1779                           ;eepromWriteBlock@addStart stored from wreg
  1780  03D8  00F9               	movwf	eepromWriteBlock@addStart
  1781                           
  1782                           ;ms82_eeprom.c: 44: unsigned char i;
  1783                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  1784  03D9  01FA               	clrf	eepromWriteBlock@i
  1785  03DA                     l6394:	
  1786  03DA  0877               	movf	eepromWriteBlock@len,w
  1787  03DB  027A               	subwf	eepromWriteBlock@i,w
  1788  03DC  1803               	btfsc	3,0
  1789  03DD  0008               	return
  1790                           
  1791                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  1792  03DE  087A               	movf	eepromWriteBlock@i,w
  1793  03DF  0776               	addwf	eepromWriteBlock@buff,w
  1794  03E0  00F8               	movwf	??_eepromWriteBlock
  1795  03E1  0084               	movwf	4
  1796  03E2  1383               	bcf	3,7	;select IRP bank0
  1797  03E3  0800               	movf	0,w
  1798  03E4  00F2               	movwf	?_eepromWriteByte
  1799  03E5  087A               	movf	eepromWriteBlock@i,w
  1800  03E6  0779               	addwf	eepromWriteBlock@addStart,w
  1801  03E7  22BD               	fcall	_eepromWriteByte
  1802  03E8  0AFA               	incf	eepromWriteBlock@i,f
  1803  03E9  2BDA               	goto	l6394
  1804  03EA                     __end_of_eepromWriteBlock:	
  1805                           
  1806                           	psect	text488
  1807  0393                     __ptext488:	
  1808 ;; =============== function _eepromWriteBlock ends ============
  1809                           
  1810                           
  1811 ;; *************** function _id_search *****************
  1812 ;; Defined at:
  1813 ;;		line 162 in file "MAIN.C"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;  id_input        1    wreg     PTR unsigned char 
  1816 ;;		 -> keyID(5), 
  1817 ;;  buff            1   10[COMMON] PTR unsigned char 
  1818 ;;		 -> buffTag(25), 
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  1821 ;;		 -> keyID(5), 
  1822 ;;  i               1    1[BANK0 ] unsigned char 
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      unsigned char 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 20/0
  1829 ;;		On exit  : 20/0
  1830 ;;		Unchanged: FFEDF/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1
  1832 ;;      Params:         1       0       0
  1833 ;;      Locals:         0       2       0
  1834 ;;      Temps:          1       0       0
  1835 ;;      Totals:         2       2       0
  1836 ;;Total ram usage:        4 bytes
  1837 ;; Hardware stack levels used:    1
  1838 ;; Hardware stack levels required when called:    2
  1839 ;; This function calls:
  1840 ;;		_comArr
  1841 ;;		___lbdiv
  1842 ;; This function is called by:
  1843 ;;		_main
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846  0393                     _id_search:	
  1847                           
  1848                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1849                           ;id_search@id_input stored from wreg
  1850  0393  00BE               	movwf	id_search@id_input
  1851                           
  1852                           ;MAIN.C: 163: unsigned char i;
  1853                           ;MAIN.C: 164: for (i = 0; i < 21; i += 5) {
  1854  0394  01BF               	clrf	id_search@i
  1855  0395                     l6374:	
  1856                           
  1857                           ;MAIN.C: 165: if (comArr(id_input, buff + i, 5, 5))
  1858  0395  083F               	movf	id_search@i,w
  1859  0396  077A               	addwf	id_search@buff,w
  1860  0397  00F2               	movwf	?_comArr
  1861  0398  3005               	movlw	5
  1862  0399  00F3               	movwf	?_comArr+1
  1863  039A  00F4               	movwf	?_comArr+2
  1864  039B  083E               	movf	id_search@id_input,w
  1865  039C  233B               	fcall	_comArr
  1866  039D  3A00               	xorlw	0
  1867                           
  1868                           ;MAIN.C: 166: return i / 5 + 1;
  1869  039E  3005               	movlw	5
  1870  039F  1903               	skipnz
  1871  03A0  2BA7               	goto	L1
  1872  03A1  00F2               	movwf	?___lbdiv
  1873  03A2  083F               	movf	id_search@i,w
  1874  03A3  2378               	fcall	___lbdiv
  1875  03A4  00FB               	movwf	??_id_search
  1876  03A5  0A7B               	incf	??_id_search,w
  1877  03A6  0008               	return
  1878  03A7                     L1:	
  1879  03A7  07BF               	addwf	id_search@i,f
  1880  03A8  3015               	movlw	21
  1881  03A9  023F               	subwf	id_search@i,w
  1882  03AA  1803               	btfsc	3,0
  1883                           
  1884                           ;MAIN.C: 167: }
  1885                           ;MAIN.C: 168: return 255;
  1886  03AB  34FF               	retlw	255
  1887  03AC  2B95               	goto	l6374
  1888  03AD                     __end_of_id_search:	
  1889                           
  1890                           	psect	text489
  1891  03FB                     __ptext489:	
  1892 ;; =============== function _id_search ends ============
  1893                           
  1894                           
  1895 ;; *************** function _delay_x10ms *****************
  1896 ;; Defined at:
  1897 ;;		line 62 in file "MAIN.C"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  t               1    wreg     unsigned char 
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;  t               1    4[COMMON] unsigned char 
  1902 ;; Return value:  Size  Location     Type
  1903 ;;		None               void
  1904 ;; Registers used:
  1905 ;;		wreg, status,2, status,0
  1906 ;; Tracked objects:
  1907 ;;		On entry : 20/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: 0/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1
  1911 ;;      Params:         0       0       0
  1912 ;;      Locals:         1       0       0
  1913 ;;      Temps:          2       0       0
  1914 ;;      Totals:         3       0       0
  1915 ;;Total ram usage:        3 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    1
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_beep2
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924  03FB                     _delay_x10ms:	
  1925                           
  1926                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  1927                           ;delay_x10ms@t stored from wreg
  1928  03FB  00F4               	movwf	delay_x10ms@t
  1929  03FC                     l6366:	
  1930                           ;MAIN.C: 63: while (t--)
  1931                           
  1932  03FC  03F4               	decf	delay_x10ms@t,f
  1933  03FD  0874               	movf	delay_x10ms@t,w
  1934  03FE  3AFF               	xorlw	255
  1935  03FF  1903               	btfsc	3,2
  1936  0400  0008               	return
  1937                           
  1938                           ;MAIN.C: 64: _delay((unsigned long)((10)*(8000000/4000.0)));
  1939  0401  301A               	movlw	26
  1940  0402  00F3               	movwf	??_delay_x10ms+1
  1941  0403  30F8               	movlw	248
  1942  0404  00F2               	movwf	??_delay_x10ms
  1943  0405                     u1787:	
  1944  0405  0BF2               	decfsz	??_delay_x10ms,f
  1945  0406  2C05               	goto	u1787
  1946  0407  0BF3               	decfsz	??_delay_x10ms+1,f
  1947  0408  2C05               	goto	u1787
  1948  0409  0064               	clrwdt
  1949  040A  2BFC               	goto	l6366
  1950  040B                     __end_of_delay_x10ms:	
  1951                           
  1952                           	psect	text490
  1953  000B                     __ptext490:	
  1954 ;; =============== function _delay_x10ms ends ============
  1955                           
  1956                           
  1957 ;; *************** function _get_RFID *****************
  1958 ;; Defined at:
  1959 ;;		line 20 in file "rfid125.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  1964 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  1965 ;;  ii              1   19[BANK0 ] unsigned char 
  1966 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  1967 ;;  i               1   15[BANK0 ] unsigned char 
  1968 ;;  j               1   14[BANK0 ] unsigned char 
  1969 ;;  even_row        1   13[BANK0 ] unsigned char 
  1970 ;;  even_col        1   12[BANK0 ] unsigned char 
  1971 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      unsigned char 
  1974 ;; Registers used:
  1975 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1976 ;; Tracked objects:
  1977 ;;		On entry : 20/0
  1978 ;;		On exit  : 20/0
  1979 ;;		Unchanged: FFEDF/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1
  1981 ;;      Params:         0       0       0
  1982 ;;      Locals:         0      20       0
  1983 ;;      Temps:          1       0       0
  1984 ;;      Totals:         1      20       0
  1985 ;;Total ram usage:       21 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    2
  1988 ;; This function calls:
  1989 ;;		_timerOut
  1990 ;;		___lbdiv
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995  000B                     _get_RFID:	
  1996  000B  3010               	movlw	16
  1997                           
  1998                           ;rfid125.c: 22: unsigned char RF_serial_55bits[11];
  1999                           ;rfid125.c: 23: unsigned int timeOutVal;
  2000                           ;rfid125.c: 24: unsigned char i,ii,j;
  2001                           ;rfid125.c: 25: unsigned char flag_RFID_syn, flag_RFID_last;
  2002                           ;rfid125.c: 26: unsigned char even_row, even_col;
  2003                           ;rfid125.c: 29: flag_RFID_syn = 0;
  2004                           
  2005                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2006  000C  01C9               	clrf	get_RFID@flag_RFID_syn
  2007                           
  2008                           ;rfid125.c: 32: i=16;
  2009  000D  00CD               	movwf	get_RFID@i
  2010  000E                     l6144:	
  2011                           
  2012                           ;rfid125.c: 34: {
  2013                           ;rfid125.c: 35: timeOutVal=timerOut(1,150);
  2014  000E  3096               	movlw	150
  2015  000F  00F2               	movwf	?_timerOut
  2016  0010  3001               	movlw	1
  2017  0011  01F3               	clrf	?_timerOut+1
  2018  0012  231C               	fcall	_timerOut
  2019                           
  2020                           ;rfid125.c: 36: if(timeOutVal==0) return 0;
  2021  0013  2143               	fcall	PL2	;call to abstracted procedure
  2022  0014  1903               	btfsc	3,2
  2023  0015  3400               	retlw	0
  2024                           
  2025                           ;rfid125.c: 38: timeOutVal=timerOut(0,150);
  2026  0016  3096               	movlw	150
  2027  0017  00F2               	movwf	?_timerOut
  2028  0018  3000               	movlw	0
  2029  0019  01F3               	clrf	?_timerOut+1
  2030  001A  231C               	fcall	_timerOut
  2031                           
  2032                           ;rfid125.c: 39: if(timeOutVal==0) return 0;
  2033  001B  2143               	fcall	PL2	;call to abstracted procedure
  2034  001C  1903               	btfsc	3,2
  2035  001D  3400               	retlw	0
  2036  001E  3000               	movlw	0
  2037                           
  2038                           ;rfid125.c: 41: i--;
  2039  001F  03CD               	decf	get_RFID@i,f
  2040                           
  2041                           ;rfid125.c: 42: }
  2042                           ;rfid125.c: 43: while(timeOutVal<80 && i>0);
  2043  0020  0250               	subwf	get_RFID@timeOutVal+1,w
  2044  0021  3050               	movlw	80
  2045  0022  1903               	skipnz
  2046  0023  024F               	subwf	get_RFID@timeOutVal,w
  2047  0024  1803               	skipnc
  2048  0025  2829               	goto	l2459
  2049  0026  08CD               	movf	get_RFID@i,f
  2050  0027  1D03               	skipz
  2051  0028  280E               	goto	l6144
  2052  0029                     l2459:	
  2053                           
  2054                           ;rfid125.c: 44: flag_RFID_last = 1;
  2055  0029  01CE               	clrf	get_RFID@flag_RFID_last
  2056  002A  0ACE               	incf	get_RFID@flag_RFID_last,f
  2057                           
  2058                           ;rfid125.c: 45: i = 0;
  2059  002B  01CD               	clrf	get_RFID@i
  2060  002C                     l6232:	
  2061                           ;rfid125.c: 46: while(i<64)
  2062                           
  2063  002C  3040               	movlw	64
  2064  002D  024D               	subwf	get_RFID@i,w
  2065  002E  1803               	btfsc	3,0
  2066  002F  2884               	goto	l6234
  2067                           
  2068                           ;rfid125.c: 47: {
  2069                           ;rfid125.c: 48: for(ii=0;ii<9;ii++)
  2070  0030  01D1               	clrf	get_RFID@ii
  2071  0031                     l6174:	
  2072                           
  2073                           ;rfid125.c: 49: {
  2074                           ;rfid125.c: 50: timeOutVal=timerOut(flag_RFID_last,150);
  2075  0031  2150               	fcall	PL5	;call to abstracted procedure
  2076  0032  231C               	fcall	_timerOut
  2077                           
  2078                           ;rfid125.c: 51: if(timeOutVal==0) return 0;
  2079  0033  2143               	fcall	PL2	;call to abstracted procedure
  2080  0034  1903               	btfsc	3,2
  2081  0035  3400               	retlw	0
  2082                           
  2083                           ;rfid125.c: 53: if(0==flag_RFID_last && timeOutVal<=80 ||
  2084                           ;rfid125.c: 54: 1==flag_RFID_last && timeOutVal>80)
  2085  0036  08CE               	movf	get_RFID@flag_RFID_last,f
  2086  0037  1D03               	skipz
  2087  0038  2840               	goto	l6186
  2088  0039  3000               	movlw	0
  2089  003A  0250               	subwf	get_RFID@timeOutVal+1,w
  2090  003B  3051               	movlw	81
  2091  003C  1903               	skipnz
  2092  003D  024F               	subwf	get_RFID@timeOutVal,w
  2093  003E  1C03               	skipc
  2094  003F  2849               	goto	l6190
  2095  0040                     l6186:	
  2096  0040  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2097  0041  2857               	goto	l6204
  2098  0042  3000               	movlw	0
  2099  0043  0250               	subwf	get_RFID@timeOutVal+1,w
  2100  0044  3051               	movlw	81
  2101  0045  1903               	skipnz
  2102  0046  024F               	subwf	get_RFID@timeOutVal,w
  2103  0047  1C03               	skipc
  2104  0048  2857               	goto	l6204
  2105  0049                     l6190:	
  2106                           
  2107                           ;rfid125.c: 55: {
  2108                           ;rfid125.c: 56: if(!flag_RFID_last)
  2109  0049  08CE               	movf	get_RFID@flag_RFID_last,f
  2110  004A  1D03               	skipz
  2111  004B  2854               	goto	l6200
  2112                           
  2113                           ;rfid125.c: 57: {
  2114                           ;rfid125.c: 58: timeOutVal=timerOut(1,80);
  2115  004C  3050               	movlw	80
  2116  004D  00F2               	movwf	?_timerOut
  2117  004E  3001               	movlw	1
  2118  004F  01F3               	clrf	?_timerOut+1
  2119  0050  231C               	fcall	_timerOut
  2120                           
  2121                           ;rfid125.c: 59: if(timeOutVal==0) return 0;
  2122  0051  2143               	fcall	PL2	;call to abstracted procedure
  2123  0052  1903               	btfsc	3,2
  2124  0053  3400               	retlw	0
  2125  0054                     l6200:	
  2126                           
  2127                           ;rfid125.c: 60: }
  2128                           ;rfid125.c: 61: flag_RFID_last = 0;
  2129  0054  01CE               	clrf	get_RFID@flag_RFID_last
  2130                           
  2131                           ;rfid125.c: 62: i++;
  2132  0055  0ACD               	incf	get_RFID@i,f
  2133                           
  2134                           ;rfid125.c: 63: }
  2135  0056  2879               	goto	l6224
  2136  0057                     l6204:	
  2137                           
  2138                           ;rfid125.c: 64: else
  2139                           ;rfid125.c: 65: if(0==flag_RFID_last && timeOutVal>80 ||
  2140                           ;rfid125.c: 66: 1==flag_RFID_last && timeOutVal<=80)
  2141  0057  08CE               	movf	get_RFID@flag_RFID_last,f
  2142  0058  1D03               	skipz
  2143  0059  2861               	goto	l6208
  2144  005A  3000               	movlw	0
  2145  005B  0250               	subwf	get_RFID@timeOutVal+1,w
  2146  005C  3051               	movlw	81
  2147  005D  1903               	skipnz
  2148  005E  024F               	subwf	get_RFID@timeOutVal,w
  2149  005F  1803               	skipnc
  2150  0060  286A               	goto	l6212
  2151  0061                     l6208:	
  2152  0061  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2153  0062  2879               	goto	l6224
  2154  0063  3000               	movlw	0
  2155  0064  0250               	subwf	get_RFID@timeOutVal+1,w
  2156  0065  3051               	movlw	81
  2157  0066  1903               	skipnz
  2158  0067  024F               	subwf	get_RFID@timeOutVal,w
  2159  0068  1803               	skipnc
  2160  0069  2879               	goto	l6224
  2161  006A                     l6212:	
  2162                           
  2163                           ;rfid125.c: 67: {
  2164                           ;rfid125.c: 68: if(flag_RFID_last)
  2165  006A  084E               	movf	get_RFID@flag_RFID_last,w
  2166  006B  1903               	btfsc	3,2
  2167  006C  2875               	goto	l2478
  2168                           
  2169                           ;rfid125.c: 69: {
  2170                           ;rfid125.c: 70: timeOutVal=timerOut(0,80);
  2171  006D  3050               	movlw	80
  2172  006E  00F2               	movwf	?_timerOut
  2173  006F  3000               	movlw	0
  2174  0070  01F3               	clrf	?_timerOut+1
  2175  0071  231C               	fcall	_timerOut
  2176                           
  2177                           ;rfid125.c: 71: if(timeOutVal==0) return 0;
  2178  0072  2143               	fcall	PL2	;call to abstracted procedure
  2179  0073  1903               	btfsc	3,2
  2180  0074  3400               	retlw	0
  2181  0075                     l2478:	
  2182                           
  2183                           ;rfid125.c: 72: }
  2184                           ;rfid125.c: 73: flag_RFID_last = 1;
  2185  0075  01CE               	clrf	get_RFID@flag_RFID_last
  2186  0076  0ACE               	incf	get_RFID@flag_RFID_last,f
  2187                           
  2188                           ;rfid125.c: 74: i++;
  2189  0077  0ACD               	incf	get_RFID@i,f
  2190                           
  2191                           ;rfid125.c: 76: break;
  2192  0078  287E               	goto	l6228
  2193  0079                     l6224:	
  2194  0079  3009               	movlw	9
  2195  007A  0AD1               	incf	get_RFID@ii,f
  2196  007B  0251               	subwf	get_RFID@ii,w
  2197  007C  1C03               	skipc
  2198  007D  2831               	goto	l6174
  2199  007E                     l6228:	
  2200                           
  2201                           ;rfid125.c: 77: }
  2202                           ;rfid125.c: 79: }
  2203                           ;rfid125.c: 80: if(9==ii)
  2204  007E  0851               	movf	get_RFID@ii,w
  2205  007F  3A09               	xorlw	9
  2206  0080  1D03               	skipz
  2207  0081  282C               	goto	l6232
  2208                           
  2209                           ;rfid125.c: 81: {
  2210                           ;rfid125.c: 82: flag_RFID_syn = 1;
  2211  0082  01C9               	clrf	get_RFID@flag_RFID_syn
  2212  0083  0AC9               	incf	get_RFID@flag_RFID_syn,f
  2213  0084                     l6234:	
  2214                           ;rfid125.c: 83: break;
  2215                           
  2216                           
  2217                           ;rfid125.c: 84: }
  2218                           ;rfid125.c: 85: }
  2219                           ;rfid125.c: 87: if(!flag_RFID_syn)
  2220  0084  08C9               	movf	get_RFID@flag_RFID_syn,f
  2221  0085  1903               	btfsc	3,2
  2222  0086  3400               	retlw	0
  2223                           
  2224                           ;rfid125.c: 90: }
  2225                           ;rfid125.c: 91: for(ii=0;ii<55;ii++)
  2226  0087  01D1               	clrf	get_RFID@ii
  2227  0088                     l6246:	
  2228                           
  2229                           ;rfid125.c: 92: {
  2230                           ;rfid125.c: 93: i = ii/5;
  2231  0088  3005               	movlw	5
  2232  0089  00F2               	movwf	?___lbdiv
  2233  008A  0851               	movf	get_RFID@ii,w
  2234  008B  2378               	fcall	___lbdiv
  2235  008C  00CD               	movwf	get_RFID@i
  2236                           
  2237                           ;rfid125.c: 94: timeOutVal=timerOut(flag_RFID_last,150);
  2238  008D  2150               	fcall	PL5	;call to abstracted procedure
  2239  008E  231C               	fcall	_timerOut
  2240                           
  2241                           ;rfid125.c: 95: if(timeOutVal==0) return 0;
  2242  008F  2143               	fcall	PL2	;call to abstracted procedure
  2243  0090  1903               	btfsc	3,2
  2244  0091  3400               	retlw	0
  2245                           
  2246                           ;rfid125.c: 97: if(0==flag_RFID_last && timeOutVal<=80 ||
  2247                           ;rfid125.c: 98: 1==flag_RFID_last && timeOutVal>80)
  2248  0092  08CE               	movf	get_RFID@flag_RFID_last,f
  2249  0093  1D03               	skipz
  2250  0094  289C               	goto	l6260
  2251  0095  3000               	movlw	0
  2252  0096  0250               	subwf	get_RFID@timeOutVal+1,w
  2253  0097  3051               	movlw	81
  2254  0098  1903               	skipnz
  2255  0099  024F               	subwf	get_RFID@timeOutVal,w
  2256  009A  1C03               	skipc
  2257  009B  28A5               	goto	l6264
  2258  009C                     l6260:	
  2259  009C  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2260  009D  28B7               	goto	l6280
  2261  009E  3000               	movlw	0
  2262  009F  0250               	subwf	get_RFID@timeOutVal+1,w
  2263  00A0  3051               	movlw	81
  2264  00A1  1903               	skipnz
  2265  00A2  024F               	subwf	get_RFID@timeOutVal,w
  2266  00A3  1C03               	skipc
  2267  00A4  28B7               	goto	l6280
  2268  00A5                     l6264:	
  2269                           
  2270                           ;rfid125.c: 99: {
  2271                           ;rfid125.c: 100: if(!flag_RFID_last)
  2272  00A5  08CE               	movf	get_RFID@flag_RFID_last,f
  2273  00A6  1D03               	skipz
  2274  00A7  28B0               	goto	l6274
  2275                           
  2276                           ;rfid125.c: 101: {
  2277                           ;rfid125.c: 102: timeOutVal=timerOut(1,80);
  2278  00A8  3050               	movlw	80
  2279  00A9  00F2               	movwf	?_timerOut
  2280  00AA  3001               	movlw	1
  2281  00AB  01F3               	clrf	?_timerOut+1
  2282  00AC  231C               	fcall	_timerOut
  2283                           
  2284                           ;rfid125.c: 103: if(timeOutVal==0) return 0;
  2285  00AD  2143               	fcall	PL2	;call to abstracted procedure
  2286  00AE  1903               	btfsc	3,2
  2287  00AF  3400               	retlw	0
  2288  00B0                     l6274:	
  2289                           
  2290                           ;rfid125.c: 104: }
  2291                           ;rfid125.c: 105: flag_RFID_last = 0;
  2292  00B0  01CE               	clrf	get_RFID@flag_RFID_last
  2293                           
  2294                           ;rfid125.c: 106: RF_serial_55bits[i] <<= 1;
  2295  00B1  2149               	fcall	PL4	;call to abstracted procedure
  2296                           
  2297                           ;rfid125.c: 107: RF_serial_55bits[i] |= 0x01;
  2298  00B2  084D               	movf	get_RFID@i,w
  2299  00B3  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2300  00B4  0084               	movwf	4
  2301  00B5  1400               	bsf	0,0
  2302                           
  2303                           ;rfid125.c: 108: }
  2304  00B6  28D8               	goto	l6300
  2305  00B7                     l6280:	
  2306                           
  2307                           ;rfid125.c: 109: else
  2308                           ;rfid125.c: 110: if(0==flag_RFID_last && timeOutVal>80 ||
  2309                           ;rfid125.c: 111: 1==flag_RFID_last && timeOutVal<=80)
  2310  00B7  08CE               	movf	get_RFID@flag_RFID_last,f
  2311  00B8  1D03               	skipz
  2312  00B9  28C1               	goto	l6284
  2313  00BA  3000               	movlw	0
  2314  00BB  0250               	subwf	get_RFID@timeOutVal+1,w
  2315  00BC  3051               	movlw	81
  2316  00BD  1903               	skipnz
  2317  00BE  024F               	subwf	get_RFID@timeOutVal,w
  2318  00BF  1803               	skipnc
  2319  00C0  28CA               	goto	l6288
  2320  00C1                     l6284:	
  2321  00C1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2322  00C2  28D8               	goto	l6300
  2323  00C3  3000               	movlw	0
  2324  00C4  0250               	subwf	get_RFID@timeOutVal+1,w
  2325  00C5  3051               	movlw	81
  2326  00C6  1903               	skipnz
  2327  00C7  024F               	subwf	get_RFID@timeOutVal,w
  2328  00C8  1803               	skipnc
  2329  00C9  28D8               	goto	l6300
  2330  00CA                     l6288:	
  2331                           
  2332                           ;rfid125.c: 112: {
  2333                           ;rfid125.c: 113: if(flag_RFID_last)
  2334  00CA  084E               	movf	get_RFID@flag_RFID_last,w
  2335  00CB  1903               	btfsc	3,2
  2336  00CC  28D5               	goto	l2499
  2337                           
  2338                           ;rfid125.c: 114: {
  2339                           ;rfid125.c: 115: timeOutVal=timerOut(0,150);
  2340  00CD  3096               	movlw	150
  2341  00CE  00F2               	movwf	?_timerOut
  2342  00CF  3000               	movlw	0
  2343  00D0  01F3               	clrf	?_timerOut+1
  2344  00D1  231C               	fcall	_timerOut
  2345                           
  2346                           ;rfid125.c: 116: if(timeOutVal==0) return 0;
  2347  00D2  2143               	fcall	PL2	;call to abstracted procedure
  2348  00D3  1903               	btfsc	3,2
  2349  00D4  3400               	retlw	0
  2350  00D5                     l2499:	
  2351                           
  2352                           ;rfid125.c: 117: }
  2353                           ;rfid125.c: 118: flag_RFID_last = 1;
  2354  00D5  01CE               	clrf	get_RFID@flag_RFID_last
  2355  00D6  0ACE               	incf	get_RFID@flag_RFID_last,f
  2356                           
  2357                           ;rfid125.c: 119: RF_serial_55bits[i] <<= 1;
  2358  00D7  2149               	fcall	PL4	;call to abstracted procedure
  2359  00D8                     l6300:	
  2360  00D8  3037               	movlw	55
  2361  00D9  0AD1               	incf	get_RFID@ii,f
  2362  00DA  0251               	subwf	get_RFID@ii,w
  2363  00DB  1C03               	skipc
  2364  00DC  2888               	goto	l6246
  2365                           
  2366                           ;rfid125.c: 120: }
  2367                           ;rfid125.c: 121: }
  2368                           ;rfid125.c: 122: if(55==ii)
  2369  00DD  0851               	movf	get_RFID@ii,w
  2370  00DE  3A37               	xorlw	55
  2371  00DF  1D03               	skipz
  2372  00E0  3400               	retlw	0
  2373                           
  2374                           ;rfid125.c: 123: {
  2375                           ;rfid125.c: 124: even_col = 0;
  2376  00E1  01CA               	clrf	get_RFID@even_col
  2377                           
  2378                           ;rfid125.c: 125: for(ii=0;ii<10;ii++)
  2379  00E2  01D1               	clrf	get_RFID@ii
  2380  00E3                     l6312:	
  2381                           
  2382                           ;rfid125.c: 126: {
  2383                           ;rfid125.c: 127: even_row = (RF_serial_55bits[ii] & 0x01);
  2384  00E3  0851               	movf	get_RFID@ii,w
  2385  00E4  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2386  00E5  0084               	movwf	4
  2387  00E6  1383               	bcf	3,7	;select IRP bank0
  2388  00E7  0800               	movf	0,w
  2389  00E8  00CB               	movwf	get_RFID@even_row
  2390  00E9  3001               	movlw	1
  2391  00EA  05CB               	andwf	get_RFID@even_row,f
  2392                           
  2393                           ;rfid125.c: 128: for(j=1;j<5;j++)
  2394  00EB  01CC               	clrf	get_RFID@j
  2395  00EC  0ACC               	incf	get_RFID@j,f
  2396  00ED                     l6322:	
  2397                           
  2398                           ;rfid125.c: 129: {
  2399                           ;rfid125.c: 130: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  2400  00ED  0851               	movf	get_RFID@ii,w
  2401  00EE  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2402  00EF  0084               	movwf	4
  2403  00F0  0800               	movf	0,w
  2404  00F1  00F7               	movwf	??_get_RFID
  2405  00F2  0A4C               	incf	get_RFID@j,w
  2406  00F3  28F6               	goto	u1414
  2407  00F4                     u1415:	
  2408  00F4  1003               	clrc
  2409  00F5  0CF7               	rrf	??_get_RFID,f
  2410  00F6                     u1414:	
  2411  00F6  3EFF               	addlw	-1
  2412  00F7  1D03               	skipz
  2413  00F8  28F4               	goto	u1415
  2414  00F9  0877               	movf	??_get_RFID,w
  2415  00FA  3901               	andlw	1
  2416  00FB  06CB               	xorwf	get_RFID@even_row,f
  2417  00FC  3005               	movlw	5
  2418  00FD  0ACC               	incf	get_RFID@j,f
  2419  00FE  024C               	subwf	get_RFID@j,w
  2420  00FF  1C03               	skipc
  2421  0100  28ED               	goto	l6322
  2422                           
  2423                           ;rfid125.c: 131: }
  2424                           ;rfid125.c: 132: if(even_row & 0x01)
  2425  0101  184B               	btfsc	get_RFID@even_row,0
  2426  0102  3400               	retlw	0
  2427                           
  2428                           ;rfid125.c: 135: }
  2429                           ;rfid125.c: 137: RF_serial_55bits[ii] <<= 3;
  2430  0103  0851               	movf	get_RFID@ii,w
  2431  0104  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2432  0105  0084               	movwf	4
  2433  0106  0D80               	rlf	0,f
  2434  0107  0D80               	rlf	0,f
  2435  0108  0D00               	rlf	0,w
  2436  0109  39F8               	andlw	248
  2437  010A  0080               	movwf	0
  2438                           
  2439                           ;rfid125.c: 139: i = RF_serial_55bits[ii];
  2440  010B  0851               	movf	get_RFID@ii,w
  2441  010C  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2442  010D  0084               	movwf	4
  2443  010E  0800               	movf	0,w
  2444  010F  00CD               	movwf	get_RFID@i
  2445                           
  2446                           ;rfid125.c: 140: if( 0==ii%2 )
  2447  0110  1851               	btfsc	get_RFID@ii,0
  2448  0111  291F               	goto	l6338
  2449                           
  2450                           ;rfid125.c: 141: {
  2451                           ;rfid125.c: 142: keyID[ii/2] = (i & 0xF0);
  2452  0112  1003               	clrc
  2453  0113  0C51               	rrf	get_RFID@ii,w
  2454  0114  3E5D               	addlw	_keyID& (0+255)
  2455  0115  0084               	movwf	4
  2456  0116  084D               	movf	get_RFID@i,w
  2457  0117  0080               	movwf	0
  2458  0118  1003               	clrc
  2459  0119  0C51               	rrf	get_RFID@ii,w
  2460  011A  3E5D               	addlw	_keyID& (0+255)
  2461  011B  0084               	movwf	4
  2462  011C  30F0               	movlw	240
  2463  011D  0580               	andwf	0,f
  2464                           
  2465                           ;rfid125.c: 143: }
  2466  011E  2929               	goto	l6342
  2467  011F                     l6338:	
  2468  011F  300F               	movlw	15
  2469                           
  2470                           ;rfid125.c: 144: else
  2471                           ;rfid125.c: 145: {
  2472                           ;rfid125.c: 146: i >>=4;
  2473  0120  0ECD               	swapf	get_RFID@i,f
  2474  0121  05CD               	andwf	get_RFID@i,f
  2475                           
  2476                           ;rfid125.c: 147: keyID[ii/2] |= (i & 0x0F);
  2477  0122  1003               	clrc
  2478  0123  0C51               	rrf	get_RFID@ii,w
  2479  0124  3E5D               	addlw	_keyID& (0+255)
  2480  0125  0084               	movwf	4
  2481  0126  084D               	movf	get_RFID@i,w
  2482  0127  390F               	andlw	15
  2483  0128  0480               	iorwf	0,f
  2484  0129                     l6342:	
  2485                           
  2486                           ;rfid125.c: 148: }
  2487                           ;rfid125.c: 149: even_col ^= RF_serial_55bits[ii];
  2488  0129  0851               	movf	get_RFID@ii,w
  2489  012A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2490  012B  0084               	movwf	4
  2491  012C  0800               	movf	0,w
  2492  012D  06CA               	xorwf	get_RFID@even_col,f
  2493  012E  300A               	movlw	10
  2494  012F  0AD1               	incf	get_RFID@ii,f
  2495  0130  0251               	subwf	get_RFID@ii,w
  2496  0131  1C03               	skipc
  2497  0132  28E3               	goto	l6312
  2498                           
  2499                           ;rfid125.c: 150: }
  2500                           ;rfid125.c: 151: RF_serial_55bits[10] <<= 3;
  2501  0133  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2502  0134  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2503  0135  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  2504  0136  39F8               	andlw	248
  2505  0137  00C8               	movwf	get_RFID@RF_serial_55bits+10
  2506  0138  30F0               	movlw	240
  2507                           
  2508                           ;rfid125.c: 152: keyID[0] =0x00;
  2509  0139  01DD               	clrf	_keyID
  2510                           
  2511                           ;rfid125.c: 153: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  2512  013A  054A               	andwf	get_RFID@even_col,w
  2513  013B  00F7               	movwf	??_get_RFID
  2514  013C  0848               	movf	get_RFID@RF_serial_55bits+10,w
  2515  013D  39F0               	andlw	240
  2516  013E  0677               	xorwf	??_get_RFID,w
  2517  013F  1903               	btfsc	3,2
  2518  0140  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  2519  0141  3400               	retlw	0
  2520                           
  2521                           ;rfid125.c: 154: {
  2522                           ;rfid125.c: 156: return 1;
  2523  0142  3401               	retlw	1
  2524  0143                     __end_of_get_RFID:	
  2525  0143                     PL2:	
  2526  0143  0873               	movf	?_timerOut+1,w
  2527  0144  00D0               	movwf	get_RFID@timeOutVal+1
  2528  0145  0872               	movf	?_timerOut,w
  2529  0146  00CF               	movwf	get_RFID@timeOutVal
  2530  0147  0450               	iorwf	get_RFID@timeOutVal+1,w
  2531  0148  0008               	return
  2532  0149                     PL4:	
  2533  0149  084D               	movf	get_RFID@i,w
  2534  014A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2535  014B  0084               	movwf	4
  2536  014C  1383               	bcf	3,7	;select IRP bank0
  2537  014D  1003               	clrc
  2538  014E  0D80               	rlf	0,f
  2539  014F  0008               	return
  2540  0150                     PL5:	
  2541  0150  3096               	movlw	150
  2542  0151  00F2               	movwf	?_timerOut
  2543  0152  01F3               	clrf	?_timerOut+1
  2544  0153  084E               	movf	get_RFID@flag_RFID_last,w
  2545  0154  0008               	return
  2546                           
  2547                           	psect	text491
  2548  02BD                     __ptext491:	
  2549 ;; =============== function _get_RFID ends ============
  2550                           
  2551                           
  2552 ;; *************** function _eepromWriteByte *****************
  2553 ;; Defined at:
  2554 ;;		line 26 in file "ms82_eeprom.c"
  2555 ;; Parameters:    Size  Location     Type
  2556 ;;  EEAddr          1    wreg     unsigned char 
  2557 ;;  EEData          1    2[COMMON] unsigned char 
  2558 ;; Auto vars:     Size  Location     Type
  2559 ;;  EEAddr          1    5[COMMON] unsigned char 
  2560 ;; Return value:  Size  Location     Type
  2561 ;;		None               void
  2562 ;; Registers used:
  2563 ;;		wreg
  2564 ;; Tracked objects:
  2565 ;;		On entry : 0/20
  2566 ;;		On exit  : 0/0
  2567 ;;		Unchanged: 0/0
  2568 ;; Data sizes:     COMMON   BANK0   BANK1
  2569 ;;      Params:         1       0       0
  2570 ;;      Locals:         1       0       0
  2571 ;;      Temps:          2       0       0
  2572 ;;      Totals:         4       0       0
  2573 ;;Total ram usage:        4 bytes
  2574 ;; Hardware stack levels used:    1
  2575 ;; Hardware stack levels required when called:    1
  2576 ;; This function calls:
  2577 ;;		Nothing
  2578 ;; This function is called by:
  2579 ;;		_eepromWriteBlock
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583  02BD                     _eepromWriteByte:	
  2584                           
  2585                           ; Regs used in _eepromWriteByte: [wreg]
  2586                           ;eepromWriteByte@EEAddr stored from wreg
  2587  02BD  00F5               	movwf	eepromWriteByte@EEAddr
  2588                           
  2589                           ;ms82_eeprom.c: 27: GIE = 0;
  2590  02BE  138B               	bcf	11,7
  2591  02BF                     l1597:	
  2592                           ;ms82_eeprom.c: 29: {
  2593                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  2594                           
  2595  02BF  1F8B               	btfss	11,7
  2596  02C0  2AC3               	goto	l6130
  2597  02C1  0064               	clrwdt	;#
  2598  02C2  2ABF               	goto	l1597
  2599  02C3                     l6130:	
  2600                           
  2601                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  2602  02C3  0875               	movf	eepromWriteByte@EEAddr,w
  2603  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2604  02C5  009B               	movwf	27	;volatile
  2605                           
  2606                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  2607  02C6  0872               	movf	eepromWriteByte@EEData,w
  2608  02C7  009A               	movwf	26	;volatile
  2609  02C8  3034               	movlw	52
  2610                           
  2611                           ;ms82_eeprom.c: 33: EEIF = 0;
  2612  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2613  02CA  138C               	bcf	12,7
  2614                           
  2615                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  2616  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2617  02CC  009C               	movwf	28	;volatile
  2618                           
  2619                           ;ms82_eeprom.c: 35: WR = 1;
  2620  02CD  141D               	bsf	29,0
  2621  02CE                     l1600:	
  2622                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  2623                           
  2624  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2625  02CF  1C1D               	btfss	29,0
  2626  02D0  2AD3               	goto	l6136
  2627  02D1  0064               	clrwdt	;#
  2628  02D2  2ACE               	goto	l1600
  2629  02D3                     l6136:	
  2630                           
  2631                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  2632  02D3  3006               	movlw	6
  2633  02D4  00F4               	movwf	??_eepromWriteByte+1
  2634  02D5  3030               	movlw	48
  2635  02D6  00F3               	movwf	??_eepromWriteByte
  2636  02D7                     u1797:	
  2637  02D7  0BF3               	decfsz	??_eepromWriteByte,f
  2638  02D8  2AD7               	goto	u1797
  2639  02D9  0BF4               	decfsz	??_eepromWriteByte+1,f
  2640  02DA  2AD7               	goto	u1797
  2641  02DB  0064               	clrwdt
  2642                           
  2643                           ;ms82_eeprom.c: 38: }
  2644                           ;ms82_eeprom.c: 39: GIE = 1;
  2645  02DC  178B               	bsf	11,7
  2646  02DD  0008               	return
  2647  02DE                     __end_of_eepromWriteByte:	
  2648                           
  2649                           	psect	text492
  2650  03EA                     __ptext492:	
  2651 ;; =============== function _eepromWriteByte ends ============
  2652                           
  2653                           
  2654 ;; *************** function _eepromReadBlock *****************
  2655 ;; Defined at:
  2656 ;;		line 18 in file "ms82_eeprom.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;  addStart        1    wreg     unsigned char 
  2659 ;;  buff            1    4[COMMON] PTR unsigned char 
  2660 ;;		 -> buffTag(25), 
  2661 ;;  len             1    5[COMMON] unsigned char 
  2662 ;; Auto vars:     Size  Location     Type
  2663 ;;  addStart        1    7[COMMON] unsigned char 
  2664 ;;  i               1    8[COMMON] unsigned char 
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/20
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: FFEDF/0
  2673 ;; Data sizes:     COMMON   BANK0   BANK1
  2674 ;;      Params:         2       0       0
  2675 ;;      Locals:         2       0       0
  2676 ;;      Temps:          1       0       0
  2677 ;;      Totals:         5       0       0
  2678 ;;Total ram usage:        5 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    2
  2681 ;; This function calls:
  2682 ;;		_eepromReadByte
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687  03EA                     _eepromReadBlock:	
  2688                           
  2689                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2690                           ;eepromReadBlock@addStart stored from wreg
  2691  03EA  00F7               	movwf	eepromReadBlock@addStart
  2692                           
  2693                           ;ms82_eeprom.c: 19: unsigned char i;
  2694                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  2695  03EB  01F8               	clrf	eepromReadBlock@i
  2696  03EC                     l6126:	
  2697  03EC  0875               	movf	eepromReadBlock@len,w
  2698  03ED  0278               	subwf	eepromReadBlock@i,w
  2699  03EE  1803               	btfsc	3,0
  2700  03EF  0008               	return
  2701                           
  2702                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  2703  03F0  0878               	movf	eepromReadBlock@i,w
  2704  03F1  0774               	addwf	eepromReadBlock@buff,w
  2705  03F2  00F6               	movwf	??_eepromReadBlock
  2706  03F3  0084               	movwf	4
  2707  03F4  0878               	movf	eepromReadBlock@i,w
  2708  03F5  0777               	addwf	eepromReadBlock@addStart,w
  2709  03F6  2455               	fcall	_eepromReadByte
  2710  03F7  1383               	bcf	3,7	;select IRP bank0
  2711  03F8  0080               	movwf	0
  2712  03F9  0AF8               	incf	eepromReadBlock@i,f
  2713  03FA  2BEC               	goto	l6126
  2714  03FB                     __end_of_eepromReadBlock:	
  2715                           
  2716                           	psect	text493
  2717  044D                     __ptext493:	
  2718 ;; =============== function _eepromReadBlock ends ============
  2719                           
  2720                           
  2721 ;; *************** function _sys_init *****************
  2722 ;; Defined at:
  2723 ;;		line 3 in file "sysinit.c"
  2724 ;; Parameters:    Size  Location     Type
  2725 ;;		None
  2726 ;; Auto vars:     Size  Location     Type
  2727 ;;		None
  2728 ;; Return value:  Size  Location     Type
  2729 ;;		None               void
  2730 ;; Registers used:
  2731 ;;		wreg
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 20/20
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMMON   BANK0   BANK1
  2737 ;;      Params:         0       0       0
  2738 ;;      Locals:         0       0       0
  2739 ;;      Temps:          0       0       0
  2740 ;;      Totals:         0       0       0
  2741 ;;Total ram usage:        0 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    1
  2744 ;; This function calls:
  2745 ;;		Nothing
  2746 ;; This function is called by:
  2747 ;;		_main
  2748 ;; This function uses a non-reentrant model
  2749 ;;
  2750  044D                     _sys_init:	
  2751                           
  2752                           ;sysinit.c: 21: OSCCON = 0B01100001;
  2753                           
  2754                           ; Regs used in _sys_init: [wreg]
  2755  044D  3061               	movlw	97
  2756  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2757  044F  008F               	movwf	15	;volatile
  2758                           
  2759                           ;sysinit.c: 22: _nop();
  2760  0450  0000               	nop
  2761  0451                     l787:	
  2762                           ;sysinit.c: 28: while(HTS==0);
  2763                           
  2764  0451  1683               	bsf	3,5	;RP0=1, select bank1
  2765  0452  190F               	btfsc	15,2
  2766  0453  0008               	return
  2767  0454  2C51               	goto	l787
  2768  0455                     __end_of_sys_init:	
  2769                           
  2770                           	psect	text494
  2771  0378                     __ptext494:	
  2772 ;; =============== function _sys_init ends ============
  2773                           
  2774                           
  2775 ;; *************** function ___lbdiv *****************
  2776 ;; Defined at:
  2777 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  2778 ;; Parameters:    Size  Location     Type
  2779 ;;  dividend        1    wreg     unsigned char 
  2780 ;;  divisor         1    2[COMMON] unsigned char 
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  dividend        1    3[COMMON] unsigned char 
  2783 ;;  quotient        1    5[COMMON] unsigned char 
  2784 ;;  counter         1    4[COMMON] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      unsigned char 
  2787 ;; Registers used:
  2788 ;;		wreg, status,2, status,0
  2789 ;; Tracked objects:
  2790 ;;		On entry : 20/0
  2791 ;;		On exit  : 20/0
  2792 ;;		Unchanged: FFFDF/0
  2793 ;; Data sizes:     COMMON   BANK0   BANK1
  2794 ;;      Params:         1       0       0
  2795 ;;      Locals:         3       0       0
  2796 ;;      Temps:          0       0       0
  2797 ;;      Totals:         4       0       0
  2798 ;;Total ram usage:        4 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    1
  2801 ;; This function calls:
  2802 ;;		Nothing
  2803 ;; This function is called by:
  2804 ;;		_get_RFID
  2805 ;;		_id_search
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808  0378                     ___lbdiv:	
  2809                           
  2810                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2811                           ;___lbdiv@dividend stored from wreg
  2812  0378  00F3               	movwf	___lbdiv@dividend
  2813  0379  01F5               	clrf	___lbdiv@quotient
  2814  037A  0872               	movf	___lbdiv@divisor,w
  2815  037B  1903               	btfsc	3,2
  2816  037C  2B91               	goto	l6112
  2817  037D  01F4               	clrf	___lbdiv@counter
  2818  037E                     l6098:	
  2819  037E  0AF4               	incf	___lbdiv@counter,f
  2820  037F  1BF2               	btfsc	___lbdiv@divisor,7
  2821  0380  2B84               	goto	l4908
  2822  0381  1003               	clrc
  2823  0382  0DF2               	rlf	___lbdiv@divisor,f
  2824  0383  2B7E               	goto	l6098
  2825  0384                     l4908:	
  2826  0384  1003               	clrc
  2827  0385  0DF5               	rlf	___lbdiv@quotient,f
  2828  0386  0872               	movf	___lbdiv@divisor,w
  2829  0387  0273               	subwf	___lbdiv@dividend,w
  2830  0388  1C03               	skipc
  2831  0389  2B8E               	goto	L2
  2832  038A  0872               	movf	___lbdiv@divisor,w
  2833  038B  02F3               	subwf	___lbdiv@dividend,f
  2834  038C  1475               	bsf	___lbdiv@quotient,0
  2835  038D  1003               	clrc
  2836  038E                     L2:	
  2837  038E  0CF2               	rrf	___lbdiv@divisor,f
  2838  038F  0BF4               	decfsz	___lbdiv@counter,f
  2839  0390  2B84               	goto	l4908
  2840  0391                     l6112:	
  2841  0391  0875               	movf	___lbdiv@quotient,w
  2842  0392  0008               	return
  2843  0393                     __end_of___lbdiv:	
  2844                           
  2845                           	psect	text495
  2846  0429                     __ptext495:	
  2847 ;; =============== function ___lbdiv ends ============
  2848                           
  2849                           
  2850 ;; *************** function ___bmul *****************
  2851 ;; Defined at:
  2852 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  2853 ;; Parameters:    Size  Location     Type
  2854 ;;  multiplier      1    wreg     unsigned char 
  2855 ;;  multiplicand    1    2[COMMON] unsigned char 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  multiplier      1    4[COMMON] unsigned char 
  2858 ;;  product         1    3[COMMON] unsigned char 
  2859 ;; Return value:  Size  Location     Type
  2860 ;;                  1    wreg      unsigned char 
  2861 ;; Registers used:
  2862 ;;		wreg, status,2, status,0
  2863 ;; Tracked objects:
  2864 ;;		On entry : 20/0
  2865 ;;		On exit  : 20/0
  2866 ;;		Unchanged: FFFDF/0
  2867 ;; Data sizes:     COMMON   BANK0   BANK1
  2868 ;;      Params:         1       0       0
  2869 ;;      Locals:         2       0       0
  2870 ;;      Temps:          0       0       0
  2871 ;;      Totals:         3       0       0
  2872 ;;Total ram usage:        3 bytes
  2873 ;; Hardware stack levels used:    1
  2874 ;; Hardware stack levels required when called:    1
  2875 ;; This function calls:
  2876 ;;		Nothing
  2877 ;; This function is called by:
  2878 ;;		_id_replate
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881  0429                     ___bmul:	
  2882                           
  2883                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2884                           ;___bmul@multiplier stored from wreg
  2885  0429  00F4               	movwf	___bmul@multiplier
  2886  042A  01F3               	clrf	___bmul@product
  2887  042B                     l6078:	
  2888  042B  0872               	movf	___bmul@multiplicand,w
  2889  042C  1874               	btfsc	___bmul@multiplier,0
  2890  042D  07F3               	addwf	___bmul@product,f
  2891  042E  1003               	clrc
  2892  042F  0DF2               	rlf	___bmul@multiplicand,f
  2893  0430  1003               	clrc
  2894  0431  0CF4               	rrf	___bmul@multiplier,f
  2895  0432  08F4               	movf	___bmul@multiplier,f
  2896  0433  1D03               	skipz
  2897  0434  2C2B               	goto	l6078
  2898  0435  0873               	movf	___bmul@product,w
  2899  0436  0008               	return
  2900  0437                     __end_of___bmul:	
  2901                           
  2902                           	psect	text496
  2903  0443                     __ptext496:	
  2904 ;; =============== function ___bmul ends ============
  2905                           
  2906                           
  2907 ;; *************** function _setState *****************
  2908 ;; Defined at:
  2909 ;;		line 155 in file "MAIN.C"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;  stt             1    wreg     unsigned char 
  2912 ;;  _tOut           2    2[COMMON] unsigned int 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  stt             1    4[COMMON] unsigned char 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;		None               void
  2917 ;; Registers used:
  2918 ;;		wreg, status,2
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/20
  2921 ;;		On exit  : 20/0
  2922 ;;		Unchanged: FFFDF/0
  2923 ;; Data sizes:     COMMON   BANK0   BANK1
  2924 ;;      Params:         2       0       0
  2925 ;;      Locals:         1       0       0
  2926 ;;      Temps:          0       0       0
  2927 ;;      Totals:         3       0       0
  2928 ;;Total ram usage:        3 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    1
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_main
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937  0443                     _setState:	
  2938                           
  2939                           ; Regs used in _setState: [wreg+status,2]
  2940                           ;setState@stt stored from wreg
  2941  0443  00F4               	movwf	setState@stt
  2942                           
  2943                           ;MAIN.C: 157: mtState = stt;
  2944  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2945  0445  00DC               	movwf	_mtState
  2946                           
  2947                           ;MAIN.C: 158: timeTick = 0;
  2948  0446  01DA               	clrf	_timeTick
  2949  0447  01DB               	clrf	_timeTick+1
  2950                           
  2951                           ;MAIN.C: 159: timeOut = _tOut;
  2952  0448  0873               	movf	setState@_tOut+1,w
  2953  0449  00D9               	movwf	_timeOut+1
  2954  044A  0872               	movf	setState@_tOut,w
  2955  044B  00D8               	movwf	_timeOut
  2956  044C  0008               	return
  2957  044D                     __end_of_setState:	
  2958                           
  2959                           	psect	text497
  2960  02FD                     __ptext497:	
  2961 ;; =============== function _setState ends ============
  2962                           
  2963                           
  2964 ;; *************** function _SET_EPWM_ON *****************
  2965 ;; Defined at:
  2966 ;;		line 11 in file "ms82_pwm.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;		None
  2969 ;; Auto vars:     Size  Location     Type
  2970 ;;		None
  2971 ;; Return value:  Size  Location     Type
  2972 ;;		None               void
  2973 ;; Registers used:
  2974 ;;		wreg, status,2
  2975 ;; Tracked objects:
  2976 ;;		On entry : 20/20
  2977 ;;		On exit  : 20/20
  2978 ;;		Unchanged: FFE00/0
  2979 ;; Data sizes:     COMMON   BANK0   BANK1
  2980 ;;      Params:         0       0       0
  2981 ;;      Locals:         0       0       0
  2982 ;;      Temps:          0       0       0
  2983 ;;      Totals:         0       0       0
  2984 ;;Total ram usage:        0 bytes
  2985 ;; Hardware stack levels used:    1
  2986 ;; Hardware stack levels required when called:    1
  2987 ;; This function calls:
  2988 ;;		Nothing
  2989 ;; This function is called by:
  2990 ;;		_main
  2991 ;; This function uses a non-reentrant model
  2992 ;;
  2993  02FD                     _SET_EPWM_ON:	
  2994                           
  2995                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  2996                           
  2997                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  2998  02FD  1687               	bsf	7,5	;volatile
  2999                           
  3000                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  3001  02FE  3001               	movlw	1
  3002  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  3003  0300  0092               	movwf	18	;volatile
  3004                           
  3005                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  3006  0301  1683               	bsf	3,5	;RP0=1, select bank1
  3007  0302  019E               	clrf	30	;volatile
  3008                           
  3009                           ;ms82_pwm.c: 15: PR2H = 0;
  3010  0303  0192               	clrf	18	;volatile
  3011                           
  3012                           ;ms82_pwm.c: 16: PR2L = 7;
  3013  0304  3007               	movlw	7
  3014  0305  0091               	movwf	17	;volatile
  3015                           
  3016                           ;ms82_pwm.c: 17: P1ADTH = 0;
  3017  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3018  0307  0194               	clrf	20	;volatile
  3019                           
  3020                           ;ms82_pwm.c: 18: P1ADTL = 4;
  3021  0308  3004               	movlw	4
  3022  0309  008E               	movwf	14	;volatile
  3023                           
  3024                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  3025  030A  3001               	movlw	1
  3026  030B  1683               	bsf	3,5	;RP0=1, select bank1
  3027  030C  0090               	movwf	16	;volatile
  3028                           
  3029                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  3030  030D  0199               	clrf	25	;volatile
  3031                           
  3032                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  3033  030E  1283               	bcf	3,5	;RP0=0, select bank0
  3034  030F  0196               	clrf	22	;volatile
  3035                           
  3036                           ;ms82_pwm.c: 24: TMR2H = 0;
  3037  0310  0193               	clrf	19	;volatile
  3038                           
  3039                           ;ms82_pwm.c: 25: TMR2L = 0;
  3040  0311  0191               	clrf	17	;volatile
  3041                           
  3042                           ;ms82_pwm.c: 26: TMR2IF = 0;
  3043  0312  108C               	bcf	12,1
  3044                           
  3045                           ;ms82_pwm.c: 27: TMR2ON = 1;
  3046  0313  1512               	bsf	18,2
  3047  0314                     l3294:	
  3048                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  3049                           
  3050  0314  1283               	bcf	3,5	;RP0=0, select bank0
  3051  0315  188C               	btfsc	12,1
  3052  0316  2B19               	goto	l3296
  3053  0317  0064               	clrwdt	;#
  3054  0318  2B14               	goto	l3294
  3055  0319                     l3296:	
  3056                           
  3057                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  3058  0319  1683               	bsf	3,5	;RP0=1, select bank1
  3059  031A  1287               	bcf	7,5	;volatile
  3060  031B  0008               	return
  3061  031C                     __end_of_SET_EPWM_ON:	
  3062                           
  3063                           	psect	text498
  3064  031C                     __ptext498:	
  3065 ;; =============== function _SET_EPWM_ON ends ============
  3066                           
  3067                           
  3068 ;; *************** function _timerOut *****************
  3069 ;; Defined at:
  3070 ;;		line 6 in file "rfid125.c"
  3071 ;; Parameters:    Size  Location     Type
  3072 ;;  Logic           1    wreg     unsigned char 
  3073 ;;  time            2    2[COMMON] unsigned int 
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;  Logic           1    4[COMMON] unsigned char 
  3076 ;;  CurTimer        2    5[COMMON] unsigned int 
  3077 ;; Return value:  Size  Location     Type
  3078 ;;                  2    2[COMMON] unsigned int 
  3079 ;; Registers used:
  3080 ;;		wreg, status,2
  3081 ;; Tracked objects:
  3082 ;;		On entry : 20/0
  3083 ;;		On exit  : 20/0
  3084 ;;		Unchanged: FFFDF/0
  3085 ;; Data sizes:     COMMON   BANK0   BANK1
  3086 ;;      Params:         2       0       0
  3087 ;;      Locals:         3       0       0
  3088 ;;      Temps:          0       0       0
  3089 ;;      Totals:         5       0       0
  3090 ;;Total ram usage:        5 bytes
  3091 ;; Hardware stack levels used:    1
  3092 ;; Hardware stack levels required when called:    1
  3093 ;; This function calls:
  3094 ;;		Nothing
  3095 ;; This function is called by:
  3096 ;;		_get_RFID
  3097 ;; This function uses a non-reentrant model
  3098 ;;
  3099  031C                     _timerOut:	
  3100                           
  3101                           ; Regs used in _timerOut: [wreg+status,2]
  3102                           ;timerOut@Logic stored from wreg
  3103  031C  00F4               	movwf	timerOut@Logic
  3104                           
  3105                           ;rfid125.c: 7: unsigned int CurTimer;
  3106                           ;rfid125.c: 8: T0ON = 0;
  3107  031D  119F               	bcf	31,3
  3108                           
  3109                           ;rfid125.c: 9: TMR0 = 0;
  3110  031E  0181               	clrf	1	;volatile
  3111                           
  3112                           ;rfid125.c: 10: T0IF = 0;
  3113  031F  110B               	bcf	11,2
  3114                           
  3115                           ;rfid125.c: 11: T0ON = 1;
  3116  0320  159F               	bsf	31,3
  3117  0321                     l6038:	
  3118                           ;rfid125.c: 12: while(RA5==Logic){
  3119                           
  3120  0321  3000               	movlw	0
  3121  0322  1A85               	btfsc	5,5
  3122  0323  3001               	movlw	1
  3123  0324  0674               	xorwf	timerOut@Logic,w
  3124  0325  1D03               	btfss	3,2
  3125  0326  2B36               	goto	l6040
  3126                           
  3127                           ;rfid125.c: 13: CurTimer= (0 <<8 )| TMR0;
  3128  0327  01F5               	clrf	timerOut@CurTimer
  3129  0328  01F6               	clrf	timerOut@CurTimer+1
  3130  0329  0801               	movf	1,w	;volatile
  3131  032A  04F5               	iorwf	timerOut@CurTimer,f
  3132                           
  3133                           ;rfid125.c: 14: if(CurTimer>time)
  3134  032B  0876               	movf	timerOut@CurTimer+1,w
  3135  032C  0273               	subwf	timerOut@time+1,w
  3136  032D  1D03               	skipz
  3137  032E  2B31               	goto	u925
  3138  032F  0875               	movf	timerOut@CurTimer,w
  3139  0330  0272               	subwf	timerOut@time,w
  3140  0331                     u925:	
  3141  0331  1803               	skipnc
  3142  0332  2B21               	goto	l6038
  3143                           
  3144                           ;rfid125.c: 15: return 0;
  3145  0333  01F2               	clrf	?_timerOut
  3146  0334  01F3               	clrf	?_timerOut+1
  3147  0335  0008               	return
  3148  0336                     l6040:	
  3149                           
  3150                           ;rfid125.c: 16: }
  3151                           ;rfid125.c: 17: return CurTimer;
  3152  0336  0876               	movf	timerOut@CurTimer+1,w
  3153  0337  00F3               	movwf	?_timerOut+1
  3154  0338  0875               	movf	timerOut@CurTimer,w
  3155  0339  00F2               	movwf	?_timerOut
  3156  033A  0008               	return
  3157  033B                     __end_of_timerOut:	
  3158                           
  3159                           	psect	text499
  3160  033B                     __ptext499:	
  3161 ;; =============== function _timerOut ends ============
  3162                           
  3163                           
  3164 ;; *************** function _comArr *****************
  3165 ;; Defined at:
  3166 ;;		line 52 in file "ms82_eeprom.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;  arr1            1    wreg     PTR unsigned char 
  3169 ;;		 -> keyID(5), 
  3170 ;;  arr2            1    2[COMMON] PTR unsigned char 
  3171 ;;		 -> buffTag(25), 
  3172 ;;  len1            1    3[COMMON] unsigned char 
  3173 ;;  len2            1    4[COMMON] unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  arr1            1    8[COMMON] PTR unsigned char 
  3176 ;;		 -> keyID(5), 
  3177 ;;  i               1    9[COMMON] unsigned char 
  3178 ;; Return value:  Size  Location     Type
  3179 ;;                  1    wreg      unsigned char 
  3180 ;; Registers used:
  3181 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3182 ;; Tracked objects:
  3183 ;;		On entry : 20/0
  3184 ;;		On exit  : 20/0
  3185 ;;		Unchanged: FFEDF/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1
  3187 ;;      Params:         3       0       0
  3188 ;;      Locals:         2       0       0
  3189 ;;      Temps:          3       0       0
  3190 ;;      Totals:         8       0       0
  3191 ;;Total ram usage:        8 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    1
  3194 ;; This function calls:
  3195 ;;		Nothing
  3196 ;; This function is called by:
  3197 ;;		_id_search
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200  033B                     _comArr:	
  3201                           
  3202                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  3203                           ;comArr@arr1 stored from wreg
  3204  033B  00F8               	movwf	comArr@arr1
  3205                           
  3206                           ;ms82_eeprom.c: 53: unsigned char i;
  3207                           ;ms82_eeprom.c: 55: if(len1!=len2)
  3208  033C  0873               	movf	comArr@len1,w
  3209  033D  0674               	xorwf	comArr@len2,w
  3210  033E  1D03               	btfss	3,2
  3211                           
  3212                           ;ms82_eeprom.c: 56: return 0;
  3213  033F  3400               	retlw	0
  3214                           
  3215                           ;ms82_eeprom.c: 57: else{
  3216                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  3217  0340  01F9               	clrf	comArr@i
  3218  0341                     l6006:	
  3219  0341  0873               	movf	comArr@len1,w
  3220  0342  0279               	subwf	comArr@i,w
  3221                           
  3222                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  3223  0343  0879               	movf	comArr@i,w
  3224  0344  1803               	btfsc	3,0
  3225  0345  2B56               	goto	L3
  3226  0346  0772               	addwf	comArr@arr2,w
  3227  0347  00F5               	movwf	??_comArr
  3228  0348  0084               	movwf	4
  3229  0349  1383               	bcf	3,7	;select IRP bank0
  3230  034A  0800               	movf	0,w
  3231  034B  00F6               	movwf	??_comArr+1
  3232  034C  0879               	movf	comArr@i,w
  3233  034D  0778               	addwf	comArr@arr1,w
  3234  034E  00F7               	movwf	??_comArr+2
  3235  034F  0084               	movwf	4
  3236  0350  0800               	movf	0,w
  3237  0351  0676               	xorwf	??_comArr+1,w
  3238  0352  1D03               	btfss	3,2
  3239  0353  3400               	retlw	0
  3240  0354  0AF9               	incf	comArr@i,f
  3241  0355  2B41               	goto	l6006
  3242  0356                     L3:	
  3243                           ;ms82_eeprom.c: 61: }
  3244                           ;ms82_eeprom.c: 62: }
  3245                           ;ms82_eeprom.c: 63: if(i==len1)
  3246                           
  3247  0356  0673               	xorwf	comArr@len1,w
  3248  0357  1903               	btfsc	3,2
  3249                           
  3250                           ;ms82_eeprom.c: 64: return 1;
  3251  0358  3401               	retlw	1
  3252  0359  3400               	retlw	0
  3253  035A                     __end_of_comArr:	
  3254                           
  3255                           	psect	text500
  3256  0455                     __ptext500:	
  3257 ;; =============== function _comArr ends ============
  3258                           
  3259                           
  3260 ;; *************** function _eepromReadByte *****************
  3261 ;; Defined at:
  3262 ;;		line 7 in file "ms82_eeprom.c"
  3263 ;; Parameters:    Size  Location     Type
  3264 ;;  EEAddr          1    wreg     unsigned char 
  3265 ;; Auto vars:     Size  Location     Type
  3266 ;;  EEAddr          1    2[COMMON] unsigned char 
  3267 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      unsigned char 
  3270 ;; Registers used:
  3271 ;;		wreg
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/20
  3274 ;;		On exit  : 20/20
  3275 ;;		Unchanged: FFFDF/0
  3276 ;; Data sizes:     COMMON   BANK0   BANK1
  3277 ;;      Params:         0       0       0
  3278 ;;      Locals:         2       0       0
  3279 ;;      Temps:          0       0       0
  3280 ;;      Totals:         2       0       0
  3281 ;;Total ram usage:        2 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:    1
  3284 ;; This function calls:
  3285 ;;		Nothing
  3286 ;; This function is called by:
  3287 ;;		_eepromReadBlock
  3288 ;;		_main
  3289 ;; This function uses a non-reentrant model
  3290 ;;
  3291  0455                     _eepromReadByte:	
  3292                           
  3293                           ; Regs used in _eepromReadByte: [wreg]
  3294                           ;eepromReadByte@EEAddr stored from wreg
  3295  0455  00F2               	movwf	eepromReadByte@EEAddr
  3296                           
  3297                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3298                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3299  0456  1683               	bsf	3,5	;RP0=1, select bank1
  3300  0457  009B               	movwf	27	;volatile
  3301                           
  3302                           ;ms82_eeprom.c: 11: RD = 1;
  3303  0458  141C               	bsf	28,0
  3304                           
  3305                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3306  0459  081A               	movf	26,w	;volatile
  3307  045A  00F3               	movwf	eepromReadByte@ReEepromData
  3308                           
  3309                           ;ms82_eeprom.c: 13: RD = 0;
  3310  045B  101C               	bcf	28,0
  3311                           
  3312                           ;ms82_eeprom.c: 14: return ReEepromData;
  3313  045C  0008               	return
  3314  045D                     __end_of_eepromReadByte:	
  3315                           
  3316                           	psect	text501
  3317  0437                     __ptext501:	
  3318 ;; =============== function _eepromReadByte ends ============
  3319                           
  3320                           
  3321 ;; *************** function _int_init *****************
  3322 ;; Defined at:
  3323 ;;		line 66 in file "sysinit.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		status,2
  3332 ;; Tracked objects:
  3333 ;;		On entry : 20/20
  3334 ;;		On exit  : 20/20
  3335 ;;		Unchanged: FFFDF/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1
  3337 ;;      Params:         0       0       0
  3338 ;;      Locals:         0       0       0
  3339 ;;      Temps:          0       0       0
  3340 ;;      Totals:         0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    1
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350  0437                     _int_init:	
  3351                           
  3352                           ;sysinit.c: 72: INTCON = 0B00000000;
  3353                           
  3354                           ; Regs used in _int_init: [status,2]
  3355  0437  018B               	clrf	11	;volatile
  3356                           
  3357                           ;sysinit.c: 73: PIE1 = 0B00000000;
  3358  0438  018C               	clrf	12	;volatile
  3359                           
  3360                           ;sysinit.c: 74: PIR1 = 0B00000000;
  3361  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3362  043A  018C               	clrf	12	;volatile
  3363                           
  3364                           ;sysinit.c: 87: T0IF = 0;
  3365  043B  110B               	bcf	11,2
  3366                           
  3367                           ;sysinit.c: 88: T0IE = 0;
  3368  043C  128B               	bcf	11,5
  3369                           
  3370                           ;sysinit.c: 92: TMR2IF = 0;
  3371  043D  108C               	bcf	12,1
  3372                           
  3373                           ;sysinit.c: 93: TMR2IE = 1;
  3374  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3375  043F  148C               	bsf	12,1
  3376                           
  3377                           ;sysinit.c: 99: PEIE = 0;
  3378  0440  130B               	bcf	11,6
  3379                           
  3380                           ;sysinit.c: 101: GIE = 1;
  3381  0441  178B               	bsf	11,7
  3382  0442  0008               	return
  3383  0443                     __end_of_int_init:	
  3384                           
  3385                           	psect	text502
  3386  046B                     __ptext502:	
  3387 ;; =============== function _int_init ends ============
  3388                           
  3389                           
  3390 ;; *************** function _timer_init *****************
  3391 ;; Defined at:
  3392 ;;		line 44 in file "sysinit.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;		None               void
  3399 ;; Registers used:
  3400 ;;		wreg
  3401 ;; Tracked objects:
  3402 ;;		On entry : 20/20
  3403 ;;		On exit  : 20/20
  3404 ;;		Unchanged: FFFDF/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1
  3406 ;;      Params:         0       0       0
  3407 ;;      Locals:         0       0       0
  3408 ;;      Temps:          0       0       0
  3409 ;;      Totals:         0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    1
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_main
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419  046B                     _timer_init:	
  3420                           
  3421                           ;sysinit.c: 46: OPTION = 0B00000011;
  3422                           
  3423                           ; Regs used in _timer_init: [wreg]
  3424  046B  3003               	movlw	3
  3425  046C  0081               	movwf	1	;volatile
  3426  046D  0008               	return
  3427  046E                     __end_of_timer_init:	
  3428                           
  3429                           	psect	text503
  3430  041A                     __ptext503:	
  3431 ;; =============== function _timer_init ends ============
  3432                           
  3433                           
  3434 ;; *************** function _gpio_init *****************
  3435 ;; Defined at:
  3436 ;;		line 32 in file "sysinit.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;		None
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;		None
  3441 ;; Return value:  Size  Location     Type
  3442 ;;		None               void
  3443 ;; Registers used:
  3444 ;;		wreg, status,2
  3445 ;; Tracked objects:
  3446 ;;		On entry : 20/20
  3447 ;;		On exit  : 20/20
  3448 ;;		Unchanged: FFFDF/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1
  3450 ;;      Params:         0       0       0
  3451 ;;      Locals:         0       0       0
  3452 ;;      Temps:          0       0       0
  3453 ;;      Totals:         0       0       0
  3454 ;;Total ram usage:        0 bytes
  3455 ;; Hardware stack levels used:    1
  3456 ;; Hardware stack levels required when called:    1
  3457 ;; This function calls:
  3458 ;;		Nothing
  3459 ;; This function is called by:
  3460 ;;		_main
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463  041A                     _gpio_init:	
  3464                           
  3465                           ;sysinit.c: 34: PORTA = 0B00000000;
  3466                           
  3467                           ; Regs used in _gpio_init: [wreg+status,2]
  3468  041A  1283               	bcf	3,5	;RP0=0, select bank0
  3469  041B  0185               	clrf	5	;volatile
  3470                           
  3471                           ;sysinit.c: 35: TRISA = 0B01110011;
  3472  041C  3073               	movlw	115
  3473  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3474  041E  0085               	movwf	5	;volatile
  3475                           
  3476                           ;sysinit.c: 36: WPUA = 0B10000000;
  3477  041F  3080               	movlw	128
  3478  0420  0095               	movwf	21	;volatile
  3479                           
  3480                           ;sysinit.c: 37: PORTC = 0B00000010;
  3481  0421  3002               	movlw	2
  3482  0422  1283               	bcf	3,5	;RP0=0, select bank0
  3483  0423  0087               	movwf	7	;volatile
  3484                           
  3485                           ;sysinit.c: 38: TRISC = 0B11111110;
  3486  0424  30FE               	movlw	254
  3487  0425  1683               	bsf	3,5	;RP0=1, select bank1
  3488  0426  0087               	movwf	7	;volatile
  3489                           
  3490                           ;sysinit.c: 39: WPUC = 0B00000000;
  3491  0427  0193               	clrf	19	;volatile
  3492  0428  0008               	return
  3493  0429                     __end_of_gpio_init:	
  3494                           
  3495                           	psect	text504
  3496  0464                     __ptext504:	
  3497 ;; =============== function _gpio_init ends ============
  3498                           
  3499                           
  3500 ;; *************** function _ISR *****************
  3501 ;; Defined at:
  3502 ;;		line 92 in file "MAIN.C"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;		None
  3505 ;; Auto vars:     Size  Location     Type
  3506 ;;		None
  3507 ;; Return value:  Size  Location     Type
  3508 ;;		None               void
  3509 ;; Registers used:
  3510 ;;		None
  3511 ;; Tracked objects:
  3512 ;;		On entry : 0/0
  3513 ;;		On exit  : 0/0
  3514 ;;		Unchanged: FFFFF/0
  3515 ;; Data sizes:     COMMON   BANK0   BANK1
  3516 ;;      Params:         0       0       0
  3517 ;;      Locals:         0       0       0
  3518 ;;      Temps:          2       0       0
  3519 ;;      Totals:         2       0       0
  3520 ;;Total ram usage:        2 bytes
  3521 ;; Hardware stack levels used:    1
  3522 ;; This function calls:
  3523 ;;		Nothing
  3524 ;; This function is called by:
  3525 ;;		Interrupt level 1
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528  0464                     _ISR:	
  3529  0464  0871               	movf	??_ISR+1,w
  3530  0465  008A               	movwf	10
  3531  0466  0E70               	swapf	??_ISR^(0+-128),w
  3532  0467  0083               	movwf	3
  3533  0468  0EFE               	swapf	126,f
  3534  0469  0E7E               	swapf	126,w
  3535  046A  0009               	retfie
  3536  046B                     __end_of_ISR:	
  3537                           
  3538                           	psect	intentry
  3539  0004                     __pintentry:	
  3540                           ; Regs used in _ISR: []
  3541                           
  3542  0004                     interrupt_function:	
  3543  007E                     saved_w	set	btemp
  3544  0004  00FE               	movwf	btemp
  3545  0005  0E03               	swapf	3,w
  3546  0006  00F0               	movwf	??_ISR
  3547  0007  080A               	movf	10,w
  3548  0008  00F1               	movwf	??_ISR+1
  3549  0009  2C64               	ljmp	_ISR
  3550                           
  3551                           	psect	text505
  3552  0000                     __ptext505:	
  3553 ;; =============== function _ISR ends ============
  3554                           
  3555  007E                     btemp	set	126	;btemp
  3556  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Wed Mar 25 08:22:52 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         _C1R 08CA  
                       _C2R 08D2                         l790 0000                         l793 0000  
                       l787 0451                         l796 0000                         l799 0000  
                       _GIE 005F                         _RA3 002B                         _RC0 0038  
                       _RA5 002D                         _HTS 047A                         _ISR 0464  
                       _SR0 0CF6                         _SR1 0CF7                         _VR0 08C0  
                       u925 0331                         _VR1 08C1                         _VR2 08C2  
                       _VR3 08C3                         _VRR 08C5                         fsr0 0004  
                       indf 0000            get_RFID@even_col 004A            get_RFID@even_row 004B  
               main@idState 0055                        S6618 045D                        ?_ISR 0070  
                      _C1OE 08CD                        l1600 02CE                        l1603 0000  
                      _C2OE 08D5                        _C1ON 08CF                        l1609 0000  
                      l4131 0000                        l4203 0276                        l4140 0000  
                      _C2ON 08D7                        l4205 027D                        l4119 0000  
                      l1594 0000                        l2459 0029                        l1588 0000  
                      l6020 0000                        l4156 0000                        l4148 0000  
                      l1597 02BF                        l6006 0341                        l6030 0000  
                      l6022 0000                        l3294 0314                        l6110 0000  
                      l6102 0000                        l2478 0075                        l6040 0336  
                      l6032 0000                        l6024 0000                        l3296 0319  
                      l6112 0391                        l6120 0000                        l6200 0054  
                      l3297 0000                        l6026 0000                        l6050 0000  
                      l6106 0000                        l6130 02C3                        l6210 0000  
                      l6202 0000                        l4178 022D                        l2499 00D5  
                      l6060 0000                        l6052 0000                        l6044 0000  
                      l6116 0000                        l6124 0000                        l6132 0000  
                      l6300 00D8                        l6212 006A                        l6204 0057  
                      l6140 0000                        l6038 0321                        l6062 0000  
                      l6054 0000                        l6046 0000                        l6070 0000  
                      l6118 0000                        l6126 03EC                        l6134 0000  
                      l6302 0000                        l6222 0000                        l6214 0000  
                      l6142 0000                        l6064 0000                        l6056 0000  
                      l6048 0000                        l6072 0000                        l6136 02D3  
                      l6128 0000                        l6312 00E3                        l6216 0000  
                      l6208 0061                        l6224 0079                        l6232 002C  
                      l6144 000E                        l6400 0000                        l6066 0000  
                      l6058 0000                        l6074 0000                        l6138 0000  
                      l6322 00ED                        l6314 0000                        l6250 0000  
                      l6234 0084                        l6226 0000                        l6162 0000  
                      l6154 0000                        l6146 0000                        l6068 0000  
                      l6084 0000                        l6076 0000                        l6092 0000  
                      l6340 0000                        l6324 0000                        l6316 0000  
                      l6260 009C                        l6228 007E                        l6404 0000  
                      l6412 03C4                        l6420 0000                        l6500 0000  
                      l6086 0000                        l6078 042B                        l6094 0000  
                      l6350 0000                        l6342 0129                        l6334 0000  
                      l6326 0000                        l6262 0000                        l6246 0088  
                      l6190 0049                        l6174 0031                        l6166 0000  
                      l6406 0000                        l6422 0000                        l6414 0000  
                      l6510 0000                        l6502 01D0                        l4911 0000  
                      l6096 0000                        l6344 0000                        l6280 00B7  
                      l6264 00A5                        l6248 0000                        l6176 0000  
                      l6408 0000                        l6424 0000                        l6416 0000  
                      l6432 0000                        l6520 0000                        l6512 0000  
                      l6440 0000                        l6098 037E                        l6346 0000  
                      l6338 011F                        l6290 0000                        l6274 00B0  
                      l6194 0000                        l6186 0040                        l6362 0000  
                      l6426 0000                        l6418 0000                        l6434 02F0  
                      l6530 0203                        l6514 01E5                        l6450 0000  
                      l6442 0000                        l4908 0384                        l6348 0000  
                      l6292 0000                        l6284 00C1                        l6276 0000  
                      l6268 0000                        l6188 0000                        l6428 0000  
                      l6540 0000                        l6524 0000                        l6508 0000  
                      l6452 0000                        l6444 0000                        l6436 0000  
                      l6286 0000                        l6278 0000                        l6366 03FC  
                      l6382 0000                        l6374 0395                        l6550 0000  
                      l6542 0000                        l6526 0000                        l6470 0000  
                      l6462 0187                        l6454 0000                        l6446 0000  
                      l6438 0000                        l6288 00CA                        l6368 0000  
                      l6392 0000                        l6536 0000                        l6544 021D  
                      l6528 01FE                        l6480 01AB                        l6472 0000  
                      l6552 023A                        l6464 0000                        l6456 0000  
                      l6448 0000                        l6298 0000                        l6394 03DA  
                      l6562 0255                        l6570 0266                        l6554 0000  
                      l6490 01BC                        l6482 0000                        l6474 019E  
                      l6466 0000                        l6458 0000                        l4875 0000  
                      l6388 0000                        l6396 0000                        l6580 027E  
                      l6564 025B                        l6572 0271                        l6556 0247  
                      l6492 0000                        l6484 0000                        l6548 0222  
                      l6468 0193                        l6398 0000                        l6566 0261  
                      l6486 0000                        l5960 0000                        l6576 0277  
                      l6496 0000                        l6488 0000                        l5962 0000  
                      l5954 0000                        l5970 0000                        l6498 0000  
                      l5956 0000                        l5964 0000                        l5972 0000  
                      l5980 0000                        l5958 0000                        l5974 0000  
                      l5966 0000                        l5982 0000                        l5976 0000  
                      l5968 0000                        l5984 0000                        l5978 0000  
                      l5988 0000                        _EEIF 0067                        _ANS0 08F0  
                      _ANS1 08F1                        _ANS2 08F2                        _ANS3 08F3  
                      _ANS4 08F4                        _ANS5 08F5                        _ANS6 08F6  
                      _ANS7 08F7                        _ANS8 08F8                        _ANS9 08F9  
                      _P1OE 0090                        _T0IE 005D                        _T0IF 005A  
                      _T0ON 00FB                        _IOCB 0116                        u1414 00F6  
                      u1415 00F4                        u1725 0252                        _PIE1 008C  
                      u1757 016B                        u1767 0234                        u1777 0241  
                      u1787 0405                        _PEIE 005E                        u1797 02D7  
                      _PR2H 0092                        _PR2L 0091                        _PIR1 000C  
                      _TMR0 0001                        _STRA 0CE8                        _STRB 0CE9  
                      _STRC 0CEA                        _STRD 0CEB                        _WREN 0C62  
                      _WPUA 0095                        _WPUB 0115                        _WPUC 0093  
                      _main 0155                        btemp 007E                        start 000A  
         ___bmul@multiplier 0074                       ??_ISR 0070                       _C1CH0 08C8  
                     _C1CH1 08C9                       _C2CH0 08D0                       _C2CH1 08D1  
                     _C1SEN 0CF5                       _C2REN 0CF4                       _C1POL 08CC  
                     _C2POL 08D4                       _C1OUT 08CE                       _C2OUT 08D6  
                     ?_main 0070             __end_of___lbdiv 0393                       _EEADR 009B  
                     _EEDAT 009A                       _ANS10 08FA                       _ANS11 08FB  
                     _P1CON 0016                       _EEPGD 0C67                       _ANSEL 011E  
                     _P1POL 0099                       _IOCB4 08B4                       _IOCB5 08B5  
                     _IOCB6 08B6                       _IOCB7 08B7                       _T1GSS 08D9  
                     _VP6EN 08C4                       _TMR2H 0013                       _TMR2L 0011  
                     _PORTA 0005                       _PORTC 0007                       _SRCON 019E  
                     _PULSR 0CF2                       _PULSS 0CF3                       _TRISA 0085  
                     _TRISC 0087                       _VRCON 0118                       _WPUB4 08AC  
                     _WPUB5 08AD                       _WPUB6 08AE                       _WPUB7 08AF  
                     _beep2 03C3    __size_of_eepromReadBlock 0011                       _keyID 005D  
                     pclath 000A                       status 0003                       wtemp0 007E  
           ___lbdiv@divisor 0072             ___lbdiv@counter 0074        __size_of_delay_x10ms 0010  
          ??_eepromReadByte 0072            _eepromWriteBlock 03D8                __end_of_main 0282  
                    ??_main 0052            eepromReadBlock@i 0078                      ?_beep2 0075  
                    _C1VREN 08C7                      _C2VREN 08C6                      _C2SYNC 08D8  
                    _EEADRH 010F                      _EEDATH 010E                      _EECON1 009C  
                    _P1ADTH 0014    __size_of_eepromWriteByte 0021                      _P1ADTL 000E  
                    _ANSELH 011F                      _MC1OUT 08DF                      _MC2OUT 08DE  
                    _T2CON0 0012                      _T2CON1 009E                      i1l4128 0000  
                    _INTCON 000B                      _OSCCON 008F                      _TMR2IE 0461  
                    _TMR2IF 0061                      _OPTION 0081                      _TMR2ON 0092  
              ?_SET_EPWM_ON 0070            __end_of_get_RFID 0143            __end_of_id_clear 02FD  
        get_RFID@timeOutVal 004F                      ___bmul 0429                   ??___lbdiv 0073  
                    _comArr 033B            __end_of_int_init 0443            __end_of_setState 044D  
                    saved_w 007E            __end_of_timerOut 033B         eepromReadBlock@buff 0074  
          ___lbdiv@dividend 0073            __end_of_sys_init 0455           ??_eepromReadBlock 0076  
       ___bmul@multiplicand 0072              __pcstackCOMMON 0070                __pidataBANK0 035A  
             __end_of_beep2 03D8            ___lbdiv@quotient 0075          __size_of_id_search 001A  
                   ??_beep2 0076                  __pbssBANK0 0058          __size_of_gpio_init 000F  
         ??_eepromWriteByte 0073                  __pmaintext 0155                     ?___bmul 0072  
                   ?_comArr 0072                  __pintentry 0004                     _CM1CON0 0119  
                   _CM2CON0 011A                     _CM2CON1 011B                  _id_replate 0282  
                 ?_get_RFID 0070                   ?_id_clear 0042    __end_of_eepromWriteBlock 03EA  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003E           __end_of_id_search 03AD                 setState@stt 0074  
      __size_of_SET_EPWM_ON 001F                   ?_setState 0072                   ?_timerOut 0072  
           __size_of___bmul 000E                     ___lbdiv 0378             __size_of_comArr 001F  
                   _buffTag 0025           __end_of_gpio_init 0429                   ?_sys_init 0070  
              __size_of_ISR 0007                     _mtState 005C                     comArr@i 0079  
                ??_get_RFID 0077                  ??_id_clear 007C                     _timeOut 0058  
                comArr@arr1 0078                  comArr@arr2 0072                  comArr@len1 0073  
                comArr@len2 0074                     main@tmp 0056        end_of_initialization 03C1  
             ??_delay_x10ms 0072                     init_ram 040F                  get_RFID@ii 0051  
                ??_int_init 0072                  ??_setState 0074         eepromWriteBlock@len 0077  
                ??_timerOut 0074       get_RFID@flag_RFID_syn 0049                  id_search@i 003F  
                _timer_init 046B                 ?_id_replate 003E                  ??_sys_init 0072  
           _eepromReadBlock 03EA         __end_of_delay_x10ms 040B              __end_of___bmul 0437  
            __end_of_comArr 035A     __size_of_eepromReadByte 0008        eepromReadByte@EEAddr 0072  
       start_initialization 03AD                 __end_of_ISR 046B             _eepromWriteByte 02BD  
             setState@_tOut 0072  eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034  
                  ??___bmul 0073                    ??_comArr 0075                 __pdataBANK0 0020  
   __end_of_eepromReadBlock 03FB               id_clear@F1097 0020                 ?_timer_init 0070  
        eepromReadBlock@len 0075               __pcstackBANK0 003E               id_clear@idMax 0042  
             id_clear@idMin 0048           ?_eepromWriteBlock 0076           __size_of_get_RFID 0138  
         __size_of_id_clear 001F          ??_eepromWriteBlock 0078                 _delay_x10ms 03FB  
         __size_of_int_init 000C                    ?___lbdiv 0072                   __ptext500 0455  
                 __ptext501 0437           __size_of_setState 000A                   __ptext502 046B  
                 __ptext503 041A                   __ptext504 0464                   __ptext505 0000  
                 __ptext490 000B                   __ptext491 02BD                   __ptext492 03EA  
                 __ptext484 02DE                   __ptext493 044D                   __ptext485 0282  
                 __ptext494 0378                   __ptext486 03C3                   __ptext495 0429  
                 __ptext487 03D8                   __ptext496 0443                   __ptext488 0393  
                 __ptext497 02FD                   __ptext489 03FB                   __ptext498 031C  
                 __ptext499 033B                   _id_search 0393           __size_of_timerOut 001F  
                 __pswtext1 045D     __end_of_eepromWriteByte 02DE           __size_of_sys_init 0008  
                 _gpio_init 041A              __size_of_beep2 0015           interrupt_function 0004  
             ??_SET_EPWM_ON 0072         __size_of_timer_init 0003                   get_RFID@i 004D  
                 get_RFID@j 004C                  ?_id_search 007A                delay_x10ms@t 0074  
          timerOut@CurTimer 0075              _eepromReadByte 0455            ?_eepromReadBlock 0074  
              ??_id_replate 0040                  ?_gpio_init 0070          __end_of_id_replate 02B6  
                 init_fetch 040B         __end_of_SET_EPWM_ON 031C              id_replate@Cont 003E  
    __end_of_eepromReadByte 045D            __size_of___lbdiv 001B              id_replate@buff 003F  
         id_search@id_input 003E            ?_eepromWriteByte 0072     eepromReadBlock@addStart 0077  
                  beep2@sel 0076                    beep2@rep 0075                    _get_RFID 000B  
                  _id_clear 02DE               __size_of_main 012D                    _int_init 0437  
             id_search@buff 007A                    _setState 0443           eepromWriteBlock@i 007A  
                  _timeTick 005A                    _timerOut 031C                 ??_id_search 007B  
           ?_eepromReadByte 0070                    main@idop 0057                ??_timer_init 0072  
                  _sys_init 044D    eepromWriteBlock@addStart 0079                 ??_gpio_init 0072  
               id_clear@tmp 0043                    intlevel1 0000                ?_delay_x10ms 0070  
               _SET_EPWM_ON 02FD          __end_of_timer_init 046E        eepromWriteBlock@buff 0076  
 __size_of_eepromWriteBlock 0012       eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072  
    get_RFID@flag_RFID_last 004E                id_replate@id 007B               timerOut@Logic 0074  
              timerOut@time 0072  
