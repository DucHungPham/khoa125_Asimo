

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sat Feb 22 11:47:49 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text484,local,class=CODE,delta=2
    14                           	psect	text485,local,class=CODE,delta=2
    15                           	psect	text486,local,class=CODE,delta=2
    16                           	psect	text487,local,class=CODE,delta=2
    17                           	psect	text488,local,class=CODE,delta=2
    18                           	psect	text489,local,class=CODE,delta=2
    19                           	psect	text490,local,class=CODE,delta=2
    20                           	psect	text491,local,class=CODE,delta=2
    21                           	psect	text492,local,class=CODE,delta=2
    22                           	psect	text493,local,class=CODE,delta=2
    23                           	psect	text494,local,class=CODE,delta=2
    24                           	psect	text495,local,class=CODE,delta=2
    25                           	psect	text496,local,class=CODE,delta=2
    26                           	psect	text497,local,class=CODE,delta=2
    27                           	psect	text498,local,class=CODE,delta=2
    28                           	psect	text499,local,class=CODE,delta=2
    29                           	psect	text500,local,class=CODE,delta=2
    30                           	psect	text501,local,class=CODE,delta=2
    31                           	psect	text502,local,class=CODE,delta=2
    32                           	psect	text503,local,class=CODE,delta=2
    33                           	psect	text504,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text505,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x11E,1
    38                           	dabs	1,0x11F,1
    39                           	dabs	1,0x119,1
    40                           	dabs	1,0x11A,1
    41                           	dabs	1,0x11B,1
    42                           	dabs	1,0x10F,1
    43                           	dabs	1,0x10E,1
    44                           	dabs	1,0x116,1
    45                           	dabs	1,0x19D,1
    46                           	dabs	1,0x19E,1
    47                           	dabs	1,0x118,1
    48                           	dabs	1,0x115,1
    49                           	dabs	1,0x11E,1
    50                           	dabs	1,0x11E,1
    51                           	dabs	1,0x11F,1
    52                           	dabs	1,0x11F,1
    53                           	dabs	1,0x11E,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11E,1
    57                           	dabs	1,0x11E,1
    58                           	dabs	1,0x11E,1
    59                           	dabs	1,0x11F,1
    60                           	dabs	1,0x11F,1
    61                           	dabs	1,0x119,1
    62                           	dabs	1,0x119,1
    63                           	dabs	1,0x119,1
    64                           	dabs	1,0x119,1
    65                           	dabs	1,0x119,1
    66                           	dabs	1,0x119,1
    67                           	dabs	1,0x119,1
    68                           	dabs	1,0x19E,1
    69                           	dabs	1,0x118,1
    70                           	dabs	1,0x11A,1
    71                           	dabs	1,0x11A,1
    72                           	dabs	1,0x11A,1
    73                           	dabs	1,0x11A,1
    74                           	dabs	1,0x11A,1
    75                           	dabs	1,0x11A,1
    76                           	dabs	1,0x11A,1
    77                           	dabs	1,0x19E,1
    78                           	dabs	1,0x11B,1
    79                           	dabs	1,0x118,1
    80                           	dabs	1,0x18C,1
    81                           	dabs	1,0x116,1
    82                           	dabs	1,0x116,1
    83                           	dabs	1,0x116,1
    84                           	dabs	1,0x116,1
    85                           	dabs	1,0x11B,1
    86                           	dabs	1,0x11B,1
    87                           	dabs	1,0x19E,1
    88                           	dabs	1,0x19E,1
    89                           	dabs	1,0x19E,1
    90                           	dabs	1,0x19E,1
    91                           	dabs	1,0x19D,1
    92                           	dabs	1,0x19D,1
    93                           	dabs	1,0x19D,1
    94                           	dabs	1,0x19D,1
    95                           	dabs	1,0x19D,1
    96                           	dabs	1,0x11B,1
    97                           	dabs	1,0x118,1
    98                           	dabs	1,0x118,1
    99                           	dabs	1,0x118,1
   100                           	dabs	1,0x118,1
   101                           	dabs	1,0x118,1
   102                           	dabs	1,0x118,1
   103                           	dabs	1,0x115,1
   104                           	dabs	1,0x115,1
   105                           	dabs	1,0x115,1
   106                           	dabs	1,0x115,1
   107                           	dabs	1,0x18C,1
   108                           	dabs	1,0x7E,2
   109  000A                     
   110                           	psect	idataBANK0
   111  035A                     __pidataBANK0:	
   112                           
   113                           ;initializer for id_clear@F1097
   114  035A  34FF               	retlw	255
   115  035B  34FF               	retlw	255
   116  035C  34FF               	retlw	255
   117  035D  34FF               	retlw	255
   118  035E  34FF               	retlw	255
   119                           
   120                           ;initializer for _buffTag
   121  035F  3400               	retlw	0
   122  0360  3400               	retlw	0
   123  0361  3411               	retlw	17
   124  0362  340B               	retlw	11
   125  0363  344F               	retlw	79
   126  0364  3400               	retlw	0
   127  0365  3400               	retlw	0
   128  0366  3481               	retlw	129
   129  0367  342F               	retlw	47
   130  0368  3422               	retlw	34
   131  0369  3400               	retlw	0
   132  036A  3400               	retlw	0
   133  036B  347D               	retlw	125
   134  036C  3467               	retlw	103
   135  036D  3405               	retlw	5
   136  036E  3400               	retlw	0
   137  036F  3400               	retlw	0
   138  0370  347E               	retlw	126
   139  0371  3431               	retlw	49
   140  0372  34E7               	retlw	231
   141  0373  3400               	retlw	0
   142  0374  3400               	retlw	0
   143  0375  347E               	retlw	126
   144  0376  3451               	retlw	81
   145  0377  34E6               	retlw	230
   146  011E                     _ANSEL	set	286	;_ANSEL
   147  011F                     _ANSELH	set	287	;_ANSELH
   148  0119                     _CM1CON0	set	281	;_CM1CON0
   149  011A                     _CM2CON0	set	282	;_CM2CON0
   150  011B                     _CM2CON1	set	283	;_CM2CON1
   151  010F                     _EEADRH	set	271	;_EEADRH
   152  010E                     _EEDATH	set	270	;_EEDATH
   153  0116                     _IOCB	set	278	;_IOCB
   154  019D                     _PSTRCON	set	413	;_PSTRCON
   155  019E                     _SRCON	set	414	;_SRCON
   156  0118                     _VRCON	set	280	;_VRCON
   157  0115                     _WPUB	set	277	;_WPUB
   158  08F0                     _ANS0	set	2288	;_ANS0
   159  08F1                     _ANS1	set	2289	;_ANS1
   160  08FA                     _ANS10	set	2298	;_ANS10
   161  08FB                     _ANS11	set	2299	;_ANS11
   162  08F2                     _ANS2	set	2290	;_ANS2
   163  08F3                     _ANS3	set	2291	;_ANS3
   164  08F4                     _ANS4	set	2292	;_ANS4
   165  08F5                     _ANS5	set	2293	;_ANS5
   166  08F6                     _ANS6	set	2294	;_ANS6
   167  08F7                     _ANS7	set	2295	;_ANS7
   168  08F8                     _ANS8	set	2296	;_ANS8
   169  08F9                     _ANS9	set	2297	;_ANS9
   170  08C8                     _C1CH0	set	2248	;_C1CH0
   171  08C9                     _C1CH1	set	2249	;_C1CH1
   172  08CD                     _C1OE	set	2253	;_C1OE
   173  08CF                     _C1ON	set	2255	;_C1ON
   174  08CE                     _C1OUT	set	2254	;_C1OUT
   175  08CC                     _C1POL	set	2252	;_C1POL
   176  08CA                     _C1R	set	2250	;_C1R
   177  0CF5                     _C1SEN	set	3317	;_C1SEN
   178  08C7                     _C1VREN	set	2247	;_C1VREN
   179  08D0                     _C2CH0	set	2256	;_C2CH0
   180  08D1                     _C2CH1	set	2257	;_C2CH1
   181  08D5                     _C2OE	set	2261	;_C2OE
   182  08D7                     _C2ON	set	2263	;_C2ON
   183  08D6                     _C2OUT	set	2262	;_C2OUT
   184  08D4                     _C2POL	set	2260	;_C2POL
   185  08D2                     _C2R	set	2258	;_C2R
   186  0CF4                     _C2REN	set	3316	;_C2REN
   187  08D8                     _C2SYNC	set	2264	;_C2SYNC
   188  08C6                     _C2VREN	set	2246	;_C2VREN
   189  0C67                     _EEPGD	set	3175	;_EEPGD
   190  08B4                     _IOCB4	set	2228	;_IOCB4
   191  08B5                     _IOCB5	set	2229	;_IOCB5
   192  08B6                     _IOCB6	set	2230	;_IOCB6
   193  08B7                     _IOCB7	set	2231	;_IOCB7
   194  08DF                     _MC1OUT	set	2271	;_MC1OUT
   195  08DE                     _MC2OUT	set	2270	;_MC2OUT
   196  0CF2                     _PULSR	set	3314	;_PULSR
   197  0CF3                     _PULSS	set	3315	;_PULSS
   198  0CF6                     _SR0	set	3318	;_SR0
   199  0CF7                     _SR1	set	3319	;_SR1
   200  0CE8                     _STRA	set	3304	;_STRA
   201  0CE9                     _STRB	set	3305	;_STRB
   202  0CEA                     _STRC	set	3306	;_STRC
   203  0CEB                     _STRD	set	3307	;_STRD
   204  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   205  08D9                     _T1GSS	set	2265	;_T1GSS
   206  08C4                     _VP6EN	set	2244	;_VP6EN
   207  08C0                     _VR0	set	2240	;_VR0
   208  08C1                     _VR1	set	2241	;_VR1
   209  08C2                     _VR2	set	2242	;_VR2
   210  08C3                     _VR3	set	2243	;_VR3
   211  08C5                     _VRR	set	2245	;_VRR
   212  08AC                     _WPUB4	set	2220	;_WPUB4
   213  08AD                     _WPUB5	set	2221	;_WPUB5
   214  08AE                     _WPUB6	set	2222	;_WPUB6
   215  08AF                     _WPUB7	set	2223	;_WPUB7
   216  0C62                     _WREN	set	3170	;_WREN
   217  000B                     _INTCON	set	11
   218  0014                     _P1ADTH	set	20
   219  000E                     _P1ADTL	set	14
   220  0016                     _P1CON	set	22
   221  000C                     _PIR1	set	12
   222  0005                     _PORTA	set	5
   223  0007                     _PORTC	set	7
   224  0012                     _T2CON0	set	18
   225  0013                     _TMR2H	set	19
   226  0011                     _TMR2L	set	17
   227  0067                     _EEIF	set	103
   228  005F                     _GIE	set	95
   229  005E                     _PEIE	set	94
   230  002B                     _RA3	set	43
   231  002D                     _RA5	set	45
   232  0038                     _RC0	set	56
   233  005D                     _T0IE	set	93
   234  005A                     _T0IF	set	90
   235  00FB                     _T0ON	set	251
   236  0061                     _TMR2IF	set	97
   237  0092                     _TMR2ON	set	146
   238  009B                     _EEADR	set	155
   239  009C                     _EECON1	set	156
   240  009A                     _EEDAT	set	154
   241  0081                     _OPTION	set	129
   242  008F                     _OSCCON	set	143
   243  0090                     _P1OE	set	144
   244  0099                     _P1POL	set	153
   245  008C                     _PIE1	set	140
   246  0092                     _PR2H	set	146
   247  0091                     _PR2L	set	145
   248  009E                     _T2CON1	set	158
   249  0085                     _TRISA	set	133
   250  0087                     _TRISC	set	135
   251  0095                     _WPUA	set	149
   252  0093                     _WPUC	set	147
   253  047A                     _HTS	set	1146
   254  04E0                     _RD	set	1248
   255  0461                     _TMR2IE	set	1121
   256  04E8                     _WR	set	1256
   257  0001                     _TMR0	set	1
   258                           
   259                           	psect	cinit
   260  03AD                     start_initialization:	
   261  03AD  303E               	movlw	low (__pdataBANK0+30)
   262                           
   263                           ; Clear objects allocated to BANK0
   264  03AE  01D8               	clrf	__pbssBANK0& (0+127)
   265  03AF  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   266  03B0  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   267  03B1  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   268  03B2  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   269  03B3  01DD               	clrf	(__pbssBANK0+5)& (0+127)
   270  03B4  01DE               	clrf	(__pbssBANK0+6)& (0+127)
   271  03B5  01DF               	clrf	(__pbssBANK0+7)& (0+127)
   272  03B6  01E0               	clrf	(__pbssBANK0+8)& (0+127)
   273  03B7  01E1               	clrf	(__pbssBANK0+9)& (0+127)
   274                           
   275                           ; Initialize objects allocated to BANK0
   276  03B8  1383               	bcf	3,7	;select IRP bank0
   277  03B9  00FD               	movwf	125
   278  03BA  3003               	movlw	high __pidataBANK0
   279  03BB  00FE               	movwf	126
   280  03BC  305A               	movlw	low __pidataBANK0
   281  03BD  00FF               	movwf	127
   282  03BE  3020               	movlw	low __pdataBANK0
   283  03BF  0084               	movwf	4
   284  03C0  240F               	fcall	init_ram
   285  03C1                     end_of_initialization:	
   286                           ;End of C runtime variable initialization code
   287                           
   288  03C1  0183               	clrf	3
   289  03C2  2955               	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssBANK0
   292  0058                     __pbssBANK0:	
   293  0058                     _timeOut:	
   294  0058                     	ds	2
   295  005A                     _timeTick:	
   296  005A                     	ds	2
   297  005C                     _mtState:	
   298  005C                     	ds	1
   299  005D                     _keyID:	
   300  005D                     	ds	5
   301                           
   302                           	psect	dataBANK0
   303  0020                     __pdataBANK0:	
   304  0020                     id_clear@F1097:	
   305  0020                     	ds	5
   306  0025                     _buffTag:	
   307  0025                     	ds	25
   308                           
   309                           	psect	inittext
   310  040B                     init_fetch:	
   311                           ;	Called with low address in FSR and high address in W
   312                           
   313  040B  087E               	movf	126,w
   314  040C  008A               	movwf	10
   315  040D  087F               	movf	127,w
   316  040E  0082               	movwf	2
   317  040F                     init_ram:	
   318                           ;Called with:
   319                           ;	high address of idata address in btemp 
   320                           ;	low address of idata address in btemp+1 
   321                           ;	low address of data in FSR
   322                           ;	high address + 1 of data in btemp-1
   323                           
   324  040F  240B               	fcall	init_fetch
   325  0410  0080               	movwf	0
   326  0411  0A84               	incf	4,f
   327  0412  0804               	movf	4,w
   328  0413  067D               	xorwf	125,w
   329  0414  1903               	btfsc	3,2
   330  0415  3400               	retlw	0
   331  0416  0AFF               	incf	127,f
   332  0417  1903               	btfsc	3,2
   333  0418  0AFE               	incf	126,f
   334  0419  2C0F               	goto	init_ram
   335                           
   336                           	psect	cstackCOMMON
   337  0070                     __pcstackCOMMON:	
   338  0070                     ?_sys_init:	
   339  0070                     ?_gpio_init:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0070                     ?_timer_init:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0070                     ?_int_init:	
   346                           ; 0 bytes @ 0x0
   347                           
   348  0070                     ?_SET_EPWM_ON:	
   349                           ; 0 bytes @ 0x0
   350                           
   351  0070                     ?_delay_x10ms:	
   352                           ; 0 bytes @ 0x0
   353                           
   354  0070                     ?_ISR:	
   355                           ; 0 bytes @ 0x0
   356                           
   357  0070                     ??_ISR:	
   358                           ; 0 bytes @ 0x0
   359                           
   360  0070                     ?_main:	
   361                           ; 0 bytes @ 0x0
   362                           
   363  0070                     ?_eepromReadByte:	
   364                           ; 0 bytes @ 0x0
   365                           
   366  0070                     ?_get_RFID:	
   367                           ; 1 bytes @ 0x0
   368                           
   369                           
   370                           ; 1 bytes @ 0x0
   371  0070                     	ds	2
   372  0072                     ??_sys_init:	
   373  0072                     ??_gpio_init:	
   374                           ; 0 bytes @ 0x2
   375                           
   376  0072                     ??_timer_init:	
   377                           ; 0 bytes @ 0x2
   378                           
   379  0072                     ??_int_init:	
   380                           ; 0 bytes @ 0x2
   381                           
   382  0072                     ??_eepromReadByte:	
   383                           ; 0 bytes @ 0x2
   384                           
   385  0072                     ?_eepromWriteByte:	
   386                           ; 0 bytes @ 0x2
   387                           
   388  0072                     ??_SET_EPWM_ON:	
   389                           ; 0 bytes @ 0x2
   390                           
   391  0072                     ??_delay_x10ms:	
   392                           ; 0 bytes @ 0x2
   393                           
   394  0072                     ?_setState:	
   395                           ; 0 bytes @ 0x2
   396                           
   397  0072                     ?_comArr:	
   398                           ; 0 bytes @ 0x2
   399                           
   400  0072                     ?___bmul:	
   401                           ; 1 bytes @ 0x2
   402                           
   403  0072                     ?___lbdiv:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     ?_timerOut:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     eepromReadByte@EEAddr:	
   410                           ; 2 bytes @ 0x2
   411                           
   412  0072                     eepromWriteByte@EEData:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     comArr@arr2:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     ___bmul@multiplicand:	
   419                           ; 1 bytes @ 0x2
   420                           
   421  0072                     ___lbdiv@divisor:	
   422                           ; 1 bytes @ 0x2
   423                           
   424  0072                     timerOut@time:	
   425                           ; 1 bytes @ 0x2
   426                           
   427  0072                     setState@_tOut:	
   428                           ; 2 bytes @ 0x2
   429                           
   430                           
   431                           ; 2 bytes @ 0x2
   432  0072                     	ds	1
   433  0073                     ??_eepromWriteByte:	
   434  0073                     ??___bmul:	
   435                           ; 0 bytes @ 0x3
   436                           
   437  0073                     ??___lbdiv:	
   438                           ; 0 bytes @ 0x3
   439                           
   440  0073                     eepromReadByte@ReEepromData:	
   441                           ; 0 bytes @ 0x3
   442                           
   443  0073                     comArr@len1:	
   444                           ; 1 bytes @ 0x3
   445                           
   446  0073                     ___bmul@product:	
   447                           ; 1 bytes @ 0x3
   448                           
   449  0073                     ___lbdiv@dividend:	
   450                           ; 1 bytes @ 0x3
   451                           
   452                           
   453                           ; 1 bytes @ 0x3
   454  0073                     	ds	1
   455  0074                     ?_eepromReadBlock:	
   456  0074                     ??_timerOut:	
   457                           ; 0 bytes @ 0x4
   458                           
   459  0074                     ??_setState:	
   460                           ; 0 bytes @ 0x4
   461                           
   462  0074                     eepromReadBlock@buff:	
   463                           ; 0 bytes @ 0x4
   464                           
   465  0074                     comArr@len2:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0074                     timerOut@Logic:	
   469                           ; 1 bytes @ 0x4
   470                           
   471  0074                     delay_x10ms@t:	
   472                           ; 1 bytes @ 0x4
   473                           
   474  0074                     setState@stt:	
   475                           ; 1 bytes @ 0x4
   476                           
   477  0074                     ___bmul@multiplier:	
   478                           ; 1 bytes @ 0x4
   479                           
   480  0074                     ___lbdiv@counter:	
   481                           ; 1 bytes @ 0x4
   482                           
   483                           
   484                           ; 1 bytes @ 0x4
   485  0074                     	ds	1
   486  0075                     ??_comArr:	
   487  0075                     ?_beep2:	
   488                           ; 0 bytes @ 0x5
   489                           
   490  0075                     eepromReadBlock@len:	
   491                           ; 0 bytes @ 0x5
   492                           
   493  0075                     eepromWriteByte@EEAddr:	
   494                           ; 1 bytes @ 0x5
   495                           
   496  0075                     beep2@rep:	
   497                           ; 1 bytes @ 0x5
   498                           
   499  0075                     ___lbdiv@quotient:	
   500                           ; 1 bytes @ 0x5
   501                           
   502  0075                     timerOut@CurTimer:	
   503                           ; 1 bytes @ 0x5
   504                           
   505                           
   506                           ; 2 bytes @ 0x5
   507  0075                     	ds	1
   508  0076                     ??_eepromReadBlock:	
   509  0076                     ?_eepromWriteBlock:	
   510                           ; 0 bytes @ 0x6
   511                           
   512  0076                     ??_beep2:	
   513                           ; 0 bytes @ 0x6
   514                           
   515  0076                     eepromWriteBlock@buff:	
   516                           ; 0 bytes @ 0x6
   517                           
   518  0076                     beep2@sel:	
   519                           ; 1 bytes @ 0x6
   520                           
   521                           
   522                           ; 1 bytes @ 0x6
   523  0076                     	ds	1
   524  0077                     ??_get_RFID:	
   525  0077                     eepromReadBlock@addStart:	
   526                           ; 0 bytes @ 0x7
   527                           
   528  0077                     eepromWriteBlock@len:	
   529                           ; 1 bytes @ 0x7
   530                           
   531                           
   532                           ; 1 bytes @ 0x7
   533  0077                     	ds	1
   534  0078                     ??_eepromWriteBlock:	
   535  0078                     eepromReadBlock@i:	
   536                           ; 0 bytes @ 0x8
   537                           
   538  0078                     comArr@arr1:	
   539                           ; 1 bytes @ 0x8
   540                           
   541                           
   542                           ; 1 bytes @ 0x8
   543  0078                     	ds	1
   544  0079                     eepromWriteBlock@addStart:	
   545  0079                     comArr@i:	
   546                           ; 1 bytes @ 0x9
   547                           
   548                           
   549                           ; 1 bytes @ 0x9
   550  0079                     	ds	1
   551  007A                     ?_id_search:	
   552  007A                     eepromWriteBlock@i:	
   553                           ; 1 bytes @ 0xA
   554                           
   555  007A                     id_search@buff:	
   556                           ; 1 bytes @ 0xA
   557                           
   558                           
   559                           ; 1 bytes @ 0xA
   560  007A                     	ds	1
   561  007B                     ??_id_search:	
   562  007B                     id_replate@id:	
   563                           ; 0 bytes @ 0xB
   564                           
   565                           
   566                           ; 1 bytes @ 0xB
   567  007B                     	ds	1
   568  007C                     ??_id_clear:	
   569                           
   570                           	psect	cstackBANK0
   571  003E                     __pcstackBANK0:	
   572                           ; 0 bytes @ 0xC
   573                           
   574  003E                     ?_id_replate:	
   575  003E                     id_search@id_input:	
   576                           ; 0 bytes @ 0x0
   577                           
   578  003E                     id_replate@Cont:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  003E                     get_RFID@RF_serial_55bits:	
   582                           ; 1 bytes @ 0x0
   583                           
   584                           
   585                           ; 11 bytes @ 0x0
   586  003E                     	ds	1
   587  003F                     id_search@i:	
   588  003F                     id_replate@buff:	
   589                           ; 1 bytes @ 0x1
   590                           
   591                           
   592                           ; 1 bytes @ 0x1
   593  003F                     	ds	1
   594  0040                     ??_id_replate:	
   595                           
   596                           ; 0 bytes @ 0x2
   597  0040                     	ds	2
   598  0042                     ?_id_clear:	
   599  0042                     id_clear@idMax:	
   600                           ; 0 bytes @ 0x4
   601                           
   602                           
   603                           ; 1 bytes @ 0x4
   604  0042                     	ds	1
   605  0043                     id_clear@tmp:	
   606                           
   607                           ; 5 bytes @ 0x5
   608  0043                     	ds	5
   609  0048                     id_clear@idMin:	
   610                           
   611                           ; 1 bytes @ 0xA
   612  0048                     	ds	1
   613  0049                     get_RFID@flag_RFID_syn:	
   614                           
   615                           ; 1 bytes @ 0xB
   616  0049                     	ds	1
   617  004A                     get_RFID@even_col:	
   618                           
   619                           ; 1 bytes @ 0xC
   620  004A                     	ds	1
   621  004B                     get_RFID@even_row:	
   622                           
   623                           ; 1 bytes @ 0xD
   624  004B                     	ds	1
   625  004C                     get_RFID@j:	
   626                           
   627                           ; 1 bytes @ 0xE
   628  004C                     	ds	1
   629  004D                     get_RFID@i:	
   630                           
   631                           ; 1 bytes @ 0xF
   632  004D                     	ds	1
   633  004E                     get_RFID@flag_RFID_last:	
   634                           
   635                           ; 1 bytes @ 0x10
   636  004E                     	ds	1
   637  004F                     get_RFID@timeOutVal:	
   638                           
   639                           ; 2 bytes @ 0x11
   640  004F                     	ds	2
   641  0051                     get_RFID@ii:	
   642                           
   643                           ; 1 bytes @ 0x13
   644  0051                     	ds	1
   645  0052                     ??_main:	
   646                           
   647                           ; 0 bytes @ 0x14
   648  0052                     	ds	3
   649  0055                     main@idState:	
   650                           
   651                           ; 1 bytes @ 0x17
   652  0055                     	ds	1
   653  0056                     main@tmp:	
   654                           
   655                           ; 1 bytes @ 0x18
   656  0056                     	ds	1
   657  0057                     main@idop:	
   658                           
   659                           ; 1 bytes @ 0x19
   660  0057                     	ds	1
   661                           
   662                           	psect	maintext
   663  0155                     __pmaintext:	
   664 ;;Data sizes: Strings 0, constant 0, data 30, bss 10, persistent 0 stack 0
   665 ;;Auto spaces:   Size  Autos    Used
   666 ;; COMMON          14     12      12
   667 ;; BANK0           80     26      66
   668 ;; BANK1           32      0       0
   669 ;;
   670 ;; Pointer list with targets:
   671 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   672 ;;		 -> TMR0(BITSFR0[1]), 
   673 ;;
   674 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   675 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   676 ;;
   677 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   678 ;;		 -> buffTag(BANK0[25]), 
   679 ;;
   680 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   681 ;;		 -> buffTag(BANK0[25]), 
   682 ;;
   683 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   684 ;;		 -> keyID(BANK0[5]), 
   685 ;;
   686 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   687 ;;		 -> buffTag(BANK0[25]), 
   688 ;;
   689 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   690 ;;		 -> keyID(BANK0[5]), 
   691 ;;
   692 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   693 ;;		 -> buffTag(BANK0[25]), 
   694 ;;
   695 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   696 ;;		 -> buffTag(BANK0[25]), 
   697 ;;
   698 ;;
   699 ;; Critical Paths under _main in COMMON
   700 ;;
   701 ;;   _main->_id_search
   702 ;;   _main->_id_replate
   703 ;;   _id_clear->_id_replate
   704 ;;   _id_replate->_eepromWriteBlock
   705 ;;   _beep2->_delay_x10ms
   706 ;;   _eepromWriteBlock->_eepromWriteByte
   707 ;;   _id_search->_comArr
   708 ;;   _get_RFID->_timerOut
   709 ;;   _eepromReadBlock->_eepromReadByte
   710 ;;
   711 ;; Critical Paths under _ISR in COMMON
   712 ;;
   713 ;;   None.
   714 ;;
   715 ;; Critical Paths under _main in BANK0
   716 ;;
   717 ;;   _main->_get_RFID
   718 ;;   _id_clear->_id_replate
   719 ;;
   720 ;; Critical Paths under _ISR in BANK0
   721 ;;
   722 ;;   None.
   723 ;;
   724 ;; Critical Paths under _main in BANK1
   725 ;;
   726 ;;   None.
   727 ;;
   728 ;; Critical Paths under _ISR in BANK1
   729 ;;
   730 ;;   None.
   731 ;;
   732 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   733 ;;
   734 ;;
   735 ;;Call Graph Tables:
   736 ;;
   737 ;; ---------------------------------------------------------------------------------
   738 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   739 ;; ---------------------------------------------------------------------------------
   740 ;; (0) _main                                                10    10      0    4539
   741 ;;                                             20 BANK0      6     6      0
   742 ;;                           _sys_init
   743 ;;                          _gpio_init
   744 ;;                         _timer_init
   745 ;;                           _int_init
   746 ;;                    _eepromWriteByte
   747 ;;                        _SET_EPWM_ON
   748 ;;                     _eepromReadByte
   749 ;;                    _eepromReadBlock
   750 ;;                           _setState
   751 ;;                           _get_RFID
   752 ;;                          _id_search
   753 ;;                           _id_clear
   754 ;;                              _beep2
   755 ;;                         _id_replate
   756 ;; ---------------------------------------------------------------------------------
   757 ;; (1) _id_clear                                             7     6      1     718
   758 ;;                                              4 BANK0      7     6      1
   759 ;;                         _id_replate
   760 ;; ---------------------------------------------------------------------------------
   761 ;; (1) _id_replate                                           5     3      2     623
   762 ;;                                             11 COMMON     1     1      0
   763 ;;                                              0 BANK0      4     2      2
   764 ;;                             ___bmul
   765 ;;                   _eepromWriteBlock
   766 ;; ---------------------------------------------------------------------------------
   767 ;; (1) _beep2                                                2     1      1      88
   768 ;;                                              5 COMMON     2     1      1
   769 ;;                        _delay_x10ms
   770 ;; ---------------------------------------------------------------------------------
   771 ;; (2) _eepromWriteBlock                                     5     3      2     178
   772 ;;                                              6 COMMON     5     3      2
   773 ;;                    _eepromWriteByte
   774 ;; ---------------------------------------------------------------------------------
   775 ;; (1) _id_search                                            4     3      1     518
   776 ;;                                             10 COMMON     2     1      1
   777 ;;                                              0 BANK0      2     2      0
   778 ;;                             _comArr
   779 ;;                            ___lbdiv
   780 ;; ---------------------------------------------------------------------------------
   781 ;; (2) _delay_x10ms                                          3     3      0      22
   782 ;;                                              2 COMMON     3     3      0
   783 ;; ---------------------------------------------------------------------------------
   784 ;; (1) _get_RFID                                            21    21      0    1917
   785 ;;                                              7 COMMON     1     1      0
   786 ;;                                              0 BANK0     20    20      0
   787 ;;                           _timerOut
   788 ;;                            ___lbdiv
   789 ;; ---------------------------------------------------------------------------------
   790 ;; (3) _eepromWriteByte                                      4     3      1      44
   791 ;;                                              2 COMMON     4     3      1
   792 ;; ---------------------------------------------------------------------------------
   793 ;; (1) _eepromReadBlock                                      5     3      2     179
   794 ;;                                              4 COMMON     5     3      2
   795 ;;                     _eepromReadByte
   796 ;; ---------------------------------------------------------------------------------
   797 ;; (1) _sys_init                                             0     0      0       0
   798 ;; ---------------------------------------------------------------------------------
   799 ;; (2) ___lbdiv                                              4     3      1     162
   800 ;;                                              2 COMMON     4     3      1
   801 ;; ---------------------------------------------------------------------------------
   802 ;; (2) ___bmul                                               3     2      1      92
   803 ;;                                              2 COMMON     3     2      1
   804 ;; ---------------------------------------------------------------------------------
   805 ;; (1) _setState                                             3     1      2      44
   806 ;;                                              2 COMMON     3     1      2
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   809 ;; ---------------------------------------------------------------------------------
   810 ;; (2) _timerOut                                             5     3      2      90
   811 ;;                                              2 COMMON     5     3      2
   812 ;; ---------------------------------------------------------------------------------
   813 ;; (2) _comArr                                               8     5      3     222
   814 ;;                                              2 COMMON     8     5      3
   815 ;; ---------------------------------------------------------------------------------
   816 ;; (2) _eepromReadByte                                       2     2      0      45
   817 ;;                                              2 COMMON     2     2      0
   818 ;; ---------------------------------------------------------------------------------
   819 ;; (1) _int_init                                             0     0      0       0
   820 ;; ---------------------------------------------------------------------------------
   821 ;; (1) _timer_init                                           0     0      0       0
   822 ;; ---------------------------------------------------------------------------------
   823 ;; (1) _gpio_init                                            0     0      0       0
   824 ;; ---------------------------------------------------------------------------------
   825 ;; Estimated maximum stack depth 3
   826 ;; ---------------------------------------------------------------------------------
   827 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   828 ;; ---------------------------------------------------------------------------------
   829 ;; (5) _ISR                                                  2     2      0       0
   830 ;;                                              0 COMMON     2     2      0
   831 ;; ---------------------------------------------------------------------------------
   832 ;; Estimated maximum stack depth 5
   833 ;; ---------------------------------------------------------------------------------
   834 ;; Call Graph Graphs:
   835 ;; _main (ROOT)
   836 ;;   _sys_init
   837 ;;   _gpio_init
   838 ;;   _timer_init
   839 ;;   _int_init
   840 ;;   _eepromWriteByte
   841 ;;   _SET_EPWM_ON
   842 ;;   _eepromReadByte
   843 ;;   _eepromReadBlock
   844 ;;     _eepromReadByte
   845 ;;   _setState
   846 ;;   _get_RFID
   847 ;;     _timerOut
   848 ;;     ___lbdiv
   849 ;;   _id_search
   850 ;;     _comArr
   851 ;;     ___lbdiv
   852 ;;   _id_clear
   853 ;;     _id_replate
   854 ;;       ___bmul
   855 ;;       _eepromWriteBlock
   856 ;;         _eepromWriteByte
   857 ;;   _beep2
   858 ;;     _delay_x10ms
   859 ;;   _id_replate
   860 ;;     ___bmul
   861 ;;     _eepromWriteBlock
   862 ;;       _eepromWriteByte
   863 ;;
   864 ;; _ISR (ROOT)
   865 ;;
   866 ;; Address spaces:
   867 ;;Name               Size   Autos  Total    Cost      Usage
   868 ;;SFR1                 0      0       0       2        0.0%
   869 ;;BITSFR1              0      0       0       2        0.0%
   870 ;;BANK1               20      0       0       5        0.0%
   871 ;;BITBANK1            20      0       0       7        0.0%
   872 ;;CODE                 0      0       0       0        0.0%
   873 ;;DATA                 0      0      52       8        0.0%
   874 ;;ABS                  0      0      4E       6        0.0%
   875 ;;NULL                 0      0       0       0        0.0%
   876 ;;STACK                0      0       4       2        0.0%
   877 ;;BANK0               50     1A      42       4       82.5%
   878 ;;BITBANK0            50      0       0       3        0.0%
   879 ;;SFR0                 0      0       0       1        0.0%
   880 ;;BITSFR0              0      0       0       1        0.0%
   881 ;;COMMON               E      C       C       1       85.7%
   882 ;;BITCOMMON            E      0       0       0        0.0%
   883 ;;EEDATA             100      0       0       0        0.0%
   884                           
   885                           
   886 ;; *************** function _main *****************
   887 ;; Defined at:
   888 ;;		line 210 in file "MAIN.C"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  t               2    0        unsigned int 
   893 ;;  idop            1   25[BANK0 ] unsigned char 
   894 ;;  tmp             1   24[BANK0 ] unsigned char 
   895 ;;  idState         1   23[BANK0 ] unsigned char 
   896 ;;  t1              1    0        unsigned char 
   897 ;;  buzFre          1    0        unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;		None               void
   900 ;; Registers used:
   901 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   902 ;; Tracked objects:
   903 ;;		On entry : 17F/0
   904 ;;		On exit  : 20/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1
   907 ;;      Params:         0       0       0
   908 ;;      Locals:         0       3       0
   909 ;;      Temps:          0       3       0
   910 ;;      Totals:         0       6       0
   911 ;;Total ram usage:        6 bytes
   912 ;; Hardware stack levels required when called:    5
   913 ;; This function calls:
   914 ;;		_sys_init
   915 ;;		_gpio_init
   916 ;;		_timer_init
   917 ;;		_int_init
   918 ;;		_eepromWriteByte
   919 ;;		_SET_EPWM_ON
   920 ;;		_eepromReadByte
   921 ;;		_eepromReadBlock
   922 ;;		_setState
   923 ;;		_get_RFID
   924 ;;		_id_search
   925 ;;		_id_clear
   926 ;;		_beep2
   927 ;;		_id_replate
   928 ;; This function is called by:
   929 ;;		Startup code after reset
   930 ;; This function uses a non-reentrant model
   931 ;;
   932  0155                     _main:	
   933                           
   934                           ;MAIN.C: 213: unsigned int t;
   935                           ;MAIN.C: 214: unsigned char buzFre = 0;
   936                           
   937                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   938  0155  01D5               	clrf	main@idState
   939  0156  0064               	clrwdt	;#
   940                           
   941                           ;MAIN.C: 218: sys_init();
   942  0157  244D               	fcall	_sys_init
   943                           
   944                           ;MAIN.C: 219: gpio_init();
   945  0158  241A               	fcall	_gpio_init
   946                           
   947                           ;MAIN.C: 221: timer_init();
   948  0159  246B               	fcall	_timer_init
   949                           
   950                           ;MAIN.C: 222: int_init();
   951  015A  2437               	fcall	_int_init
   952                           
   953                           ;MAIN.C: 228: eepromWriteByte(0xFF, 0xAA);
   954  015B  30AA               	movlw	170
   955  015C  00F2               	movwf	?_eepromWriteByte
   956  015D  30FF               	movlw	255
   957  015E  22BD               	fcall	_eepromWriteByte
   958                           
   959                           ;MAIN.C: 229: eepromWriteByte(0xFF, 0xAA);
   960  015F  30AA               	movlw	170
   961  0160  00F2               	movwf	?_eepromWriteByte
   962  0161  30FF               	movlw	255
   963  0162  22BD               	fcall	_eepromWriteByte
   964                           
   965                           ;MAIN.C: 232: TRISC &= 0xfe;
   966  0163  1683               	bsf	3,5	;RP0=1, select bank1
   967  0164  1007               	bcf	7,0	;volatile
   968                           
   969                           ;MAIN.C: 234: SET_EPWM_ON();
   970  0165  22FD               	fcall	_SET_EPWM_ON
   971                           
   972                           ;MAIN.C: 238: _delay((unsigned long)((20)*(8000000/4000.0)));
   973  0166  3034               	movlw	52
   974  0167  1283               	bcf	3,5	;RP0=0, select bank0
   975  0168  00D3               	movwf	??_main+1
   976  0169  30F1               	movlw	241
   977  016A  00D2               	movwf	??_main
   978  016B                     u1757:	
   979  016B  0BD2               	decfsz	??_main,f
   980  016C  296B               	goto	u1757
   981  016D  0BD3               	decfsz	??_main+1,f
   982  016E  296B               	goto	u1757
   983  016F  2970               	nop2
   984                           
   985                           ;MAIN.C: 243: if (eepromReadByte(0x06) != 0) {
   986  0170  3006               	movlw	6
   987  0171  2455               	fcall	_eepromReadByte
   988  0172  3A00               	xorlw	0
   989  0173  1903               	skipnz
   990  0174  2987               	goto	l6462
   991  0175  3006               	movlw	6
   992                           
   993                           ;MAIN.C: 247: eepromWriteByte(0x06, 0);
   994  0176  01F2               	clrf	?_eepromWriteByte
   995  0177  22BD               	fcall	_eepromWriteByte
   996  0178  3007               	movlw	7
   997                           
   998                           ;MAIN.C: 248: eepromWriteByte(0x06 + 1, 0);
   999  0179  01F2               	clrf	?_eepromWriteByte
  1000  017A  22BD               	fcall	_eepromWriteByte
  1001                           
  1002                           ;MAIN.C: 249: eepromWriteByte(0x06 + 2, 0x87);
  1003  017B  3087               	movlw	135
  1004  017C  00F2               	movwf	?_eepromWriteByte
  1005  017D  3008               	movlw	8
  1006  017E  22BD               	fcall	_eepromWriteByte
  1007                           
  1008                           ;MAIN.C: 250: eepromWriteByte(0x06 + 3, 0x3e);
  1009  017F  303E               	movlw	62
  1010  0180  00F2               	movwf	?_eepromWriteByte
  1011  0181  3009               	movlw	9
  1012  0182  22BD               	fcall	_eepromWriteByte
  1013                           
  1014                           ;MAIN.C: 251: eepromWriteByte(0x06 + 4, 0xf8);
  1015  0183  30F8               	movlw	248
  1016  0184  00F2               	movwf	?_eepromWriteByte
  1017  0185  300A               	movlw	10
  1018  0186  22BD               	fcall	_eepromWriteByte
  1019  0187                     l6462:	
  1020                           
  1021                           ;MAIN.C: 253: }
  1022                           ;MAIN.C: 254: eepromReadBlock(0x06, buffTag, 5 * 5);
  1023  0187  3025               	movlw	_buffTag& (0+255)
  1024  0188  00F4               	movwf	?_eepromReadBlock
  1025  0189  3019               	movlw	25
  1026  018A  00F5               	movwf	?_eepromReadBlock+1
  1027  018B  3006               	movlw	6
  1028  018C  23EA               	fcall	_eepromReadBlock
  1029                           
  1030                           ;MAIN.C: 256: setState(1, 12);
  1031  018D  300C               	movlw	12
  1032  018E  00F2               	movwf	?_setState
  1033  018F  3001               	movlw	1
  1034  0190  01F3               	clrf	?_setState+1
  1035  0191  2443               	fcall	_setState
  1036                           
  1037                           ;MAIN.C: 260: tmp = 0;
  1038  0192  01D6               	clrf	main@tmp
  1039  0193                     l6468:	
  1040                           
  1041                           ;MAIN.C: 264: idop = get_RFID();
  1042  0193  200B               	fcall	_get_RFID
  1043  0194  00D7               	movwf	main@idop
  1044                           
  1045                           ;MAIN.C: 266: if (idop) {
  1046  0195  0857               	movf	main@idop,w
  1047  0196  1903               	btfsc	3,2
  1048  0197  2A3A               	goto	l6552
  1049                           
  1050                           ;MAIN.C: 267: idop = id_search(keyID, buffTag);
  1051  0198  3025               	movlw	_buffTag& (0+255)
  1052  0199  00FA               	movwf	?_id_search
  1053  019A  305D               	movlw	_keyID& (0+255)
  1054  019B  2393               	fcall	_id_search
  1055  019C  00D7               	movwf	main@idop
  1056                           
  1057                           ;MAIN.C: 268: switch (mtState) {
  1058  019D  2A22               	goto	l6548
  1059  019E                     l6474:	
  1060                           
  1061                           ;MAIN.C: 270: case 2:
  1062                           ;MAIN.C: 271: if ((idop > 1) && (idop < 6))
  1063  019E  3002               	movlw	2
  1064  019F  0257               	subwf	main@idop,w
  1065  01A0  1C03               	skipc
  1066  01A1  29AB               	goto	l6480
  1067  01A2  3006               	movlw	6
  1068  01A3  0257               	subwf	main@idop,w
  1069  01A4  1803               	skipnc
  1070  01A5  29AB               	goto	l6480
  1071  01A6  3000               	movlw	0
  1072                           
  1073                           ;MAIN.C: 272: {
  1074                           ;MAIN.C: 273: setState(0, 0);
  1075  01A7  01F2               	clrf	?_setState
  1076  01A8  01F3               	clrf	?_setState+1
  1077  01A9  2443               	fcall	_setState
  1078                           
  1079                           ;MAIN.C: 275: }
  1080  01AA  2A2D               	goto	l4178
  1081  01AB                     l6480:	
  1082                           
  1083                           ;MAIN.C: 276: else if (idop == 1)
  1084  01AB  0B57               	decfsz	main@idop,w
  1085  01AC  2A2D               	goto	l4178
  1086                           
  1087                           ;MAIN.C: 277: {
  1088                           ;MAIN.C: 279: id_clear(2, 5);
  1089  01AD  3005               	movlw	5
  1090  01AE  00C2               	movwf	?_id_clear
  1091  01AF  3002               	movlw	2
  1092  01B0  22DE               	fcall	_id_clear
  1093  01B1  3003               	movlw	3
  1094                           
  1095                           ;MAIN.C: 280: setState(3, 0);
  1096  01B2  01F2               	clrf	?_setState
  1097  01B3  01F3               	clrf	?_setState+1
  1098  01B4  2443               	fcall	_setState
  1099  01B5  3003               	movlw	3
  1100                           
  1101                           ;MAIN.C: 281: tmp = 1;
  1102  01B6  01D6               	clrf	main@tmp
  1103  01B7  0AD6               	incf	main@tmp,f
  1104                           
  1105                           ;MAIN.C: 286: beep2(0, 3);
  1106  01B8  00F5               	movwf	?_beep2
  1107  01B9  3000               	movlw	0
  1108  01BA  23C3               	fcall	_beep2
  1109  01BB  2A2D               	goto	l4178
  1110  01BC                     l6490:	
  1111                           
  1112                           ;MAIN.C: 297: if (idop == 1 && idState == 0) {
  1113  01BC  0B57               	decfsz	main@idop,w
  1114  01BD  29D0               	goto	l6502
  1115  01BE  08D5               	movf	main@idState,f
  1116  01BF  1D03               	skipz
  1117  01C0  29D0               	goto	l6502
  1118                           
  1119                           ;MAIN.C: 299: id_clear(2, 5);
  1120  01C1  3005               	movlw	5
  1121  01C2  00C2               	movwf	?_id_clear
  1122  01C3  3002               	movlw	2
  1123  01C4  22DE               	fcall	_id_clear
  1124  01C5  3003               	movlw	3
  1125                           
  1126                           ;MAIN.C: 300: setState(3, 0);
  1127  01C6  01F2               	clrf	?_setState
  1128  01C7  01F3               	clrf	?_setState+1
  1129  01C8  2443               	fcall	_setState
  1130  01C9  3003               	movlw	3
  1131                           
  1132                           ;MAIN.C: 301: tmp = 1;
  1133  01CA  01D6               	clrf	main@tmp
  1134  01CB  0AD6               	incf	main@tmp,f
  1135                           
  1136                           ;MAIN.C: 306: beep2(0, 3);
  1137  01CC  00F5               	movwf	?_beep2
  1138  01CD  3000               	movlw	0
  1139  01CE  23C3               	fcall	_beep2
  1140                           
  1141                           ;MAIN.C: 308: }
  1142  01CF  2A2D               	goto	l4178
  1143  01D0                     l6502:	
  1144                           
  1145                           ;MAIN.C: 309: else if (idop == 2 && idState == 0) {
  1146  01D0  0857               	movf	main@idop,w
  1147  01D1  3A02               	xorlw	2
  1148  01D2  1D03               	skipz
  1149  01D3  2A2D               	goto	l4178
  1150  01D4  08D5               	movf	main@idState,f
  1151  01D5  1D03               	skipz
  1152  01D6  2A2D               	goto	l4178
  1153                           
  1154                           ;MAIN.C: 311: id_clear(3, 5);
  1155  01D7  3005               	movlw	5
  1156  01D8  00C2               	movwf	?_id_clear
  1157  01D9  3003               	movlw	3
  1158  01DA  22DE               	fcall	_id_clear
  1159  01DB  3005               	movlw	5
  1160                           
  1161                           ;MAIN.C: 312: setState(5, 0);
  1162  01DC  01F2               	clrf	?_setState
  1163  01DD  01F3               	clrf	?_setState+1
  1164  01DE  2443               	fcall	_setState
  1165                           
  1166                           ;MAIN.C: 313: tmp = 2;
  1167  01DF  3002               	movlw	2
  1168  01E0  00D6               	movwf	main@tmp
  1169                           
  1170                           ;MAIN.C: 318: beep2(1, 2);
  1171  01E1  00F5               	movwf	?_beep2
  1172  01E2  3001               	movlw	1
  1173  01E3  23C3               	fcall	_beep2
  1174  01E4  2A2D               	goto	l4178
  1175  01E5                     l6514:	
  1176                           
  1177                           ;MAIN.C: 324: if (idState == 0) {
  1178  01E5  08D5               	movf	main@idState,f
  1179  01E6  1D03               	skipz
  1180  01E7  29FE               	goto	l6528
  1181                           
  1182                           ;MAIN.C: 331: if ( idop != 1) {
  1183  01E8  0357               	decf	main@idop,w
  1184  01E9  1903               	skipnz
  1185  01EA  2A2D               	goto	l4178
  1186  01EB  3006               	movlw	6
  1187                           
  1188                           ;MAIN.C: 332: tmp++;
  1189  01EC  0AD6               	incf	main@tmp,f
  1190                           
  1191                           ;MAIN.C: 334: if (tmp <= 5) {
  1192  01ED  0256               	subwf	main@tmp,w
  1193  01EE  1803               	skipnc
  1194  01EF  2A2D               	goto	l4178
  1195                           
  1196                           ;MAIN.C: 335: id_replate(tmp, keyID, buffTag);
  1197  01F0  305D               	movlw	_keyID& (0+255)
  1198  01F1  00BE               	movwf	?_id_replate
  1199  01F2  3025               	movlw	_buffTag& (0+255)
  1200  01F3  00BF               	movwf	?_id_replate+1
  1201  01F4  0856               	movf	main@tmp,w
  1202  01F5  2282               	fcall	_id_replate
  1203  01F6  3002               	movlw	2
  1204                           
  1205                           ;MAIN.C: 336: timeTick = 0;
  1206  01F7  1283               	bcf	3,5	;RP0=0, select bank0
  1207  01F8  01DA               	clrf	_timeTick
  1208  01F9  01DB               	clrf	_timeTick+1
  1209                           
  1210                           ;MAIN.C: 341: beep2(1, 2);
  1211  01FA  00F5               	movwf	?_beep2
  1212  01FB  3001               	movlw	1
  1213  01FC  23C3               	fcall	_beep2
  1214  01FD  2A2D               	goto	l4178
  1215  01FE                     l6528:	
  1216  01FE  3000               	movlw	0
  1217                           
  1218                           ;MAIN.C: 353: beep2(0, 1);
  1219  01FF  01F5               	clrf	?_beep2
  1220  0200  0AF5               	incf	?_beep2,f
  1221  0201  23C3               	fcall	_beep2
  1222  0202  2A2D               	goto	l4178
  1223  0203                     l6530:	
  1224                           
  1225                           ;MAIN.C: 359: if (idState == 0) {
  1226  0203  08D5               	movf	main@idState,f
  1227  0204  1D03               	skipz
  1228  0205  2A1D               	goto	l6544
  1229                           
  1230                           ;MAIN.C: 360: if ( idop > 2) {
  1231  0206  3003               	movlw	3
  1232  0207  0257               	subwf	main@idop,w
  1233  0208  1C03               	skipc
  1234  0209  2A2D               	goto	l4178
  1235  020A  3006               	movlw	6
  1236                           
  1237                           ;MAIN.C: 361: tmp++;
  1238  020B  0AD6               	incf	main@tmp,f
  1239                           
  1240                           ;MAIN.C: 363: if (tmp <= 5) {
  1241  020C  0256               	subwf	main@tmp,w
  1242  020D  1803               	skipnc
  1243  020E  2A2D               	goto	l4178
  1244                           
  1245                           ;MAIN.C: 364: id_replate(tmp, keyID, buffTag);
  1246  020F  305D               	movlw	_keyID& (0+255)
  1247  0210  00BE               	movwf	?_id_replate
  1248  0211  3025               	movlw	_buffTag& (0+255)
  1249  0212  00BF               	movwf	?_id_replate+1
  1250  0213  0856               	movf	main@tmp,w
  1251  0214  2282               	fcall	_id_replate
  1252  0215  3002               	movlw	2
  1253                           
  1254                           ;MAIN.C: 365: timeTick = 0;
  1255  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1256  0217  01DA               	clrf	_timeTick
  1257  0218  01DB               	clrf	_timeTick+1
  1258                           
  1259                           ;MAIN.C: 371: beep2(1, 2);
  1260  0219  00F5               	movwf	?_beep2
  1261  021A  3001               	movlw	1
  1262  021B  23C3               	fcall	_beep2
  1263  021C  2A2D               	goto	l4178
  1264  021D                     l6544:	
  1265  021D  3000               	movlw	0
  1266                           
  1267                           ;MAIN.C: 382: beep2(0, 1);
  1268  021E  01F5               	clrf	?_beep2
  1269  021F  0AF5               	incf	?_beep2,f
  1270  0220  23C3               	fcall	_beep2
  1271  0221  2A2D               	goto	l4178
  1272  0222                     l6548:	
  1273  0222  085C               	movf	_mtState,w
  1274                           
  1275                           ; Switch size 1, requested type "space"
  1276                           ; Number of cases is 6, Range of values is 0 to 6
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; direct_byte           13     6 (fixed)
  1280                           ; simple_byte           19    10 (average)
  1281                           ; jumptable            260     6 (fixed)
  1282                           ; rangetable            11     6 (fixed)
  1283                           ; spacedrange           20     9 (fixed)
  1284                           ; locatedrange           7     3 (fixed)
  1285                           ;	Chosen strategy is direct_byte
  1286  0223  0084               	movwf	4
  1287  0224  3007               	movlw	7
  1288  0225  0204               	subwf	4,w
  1289  0226  1803               	skipnc
  1290  0227  2A2D               	goto	l4178
  1291  0228  3004               	movlw	high S6618
  1292  0229  008A               	movwf	10
  1293  022A  305D               	movlw	low S6618
  1294  022B  0704               	addwf	4,w
  1295  022C  0082               	movwf	2
  1296  022D                     l4178:	
  1297  022D  309F               	movlw	159
  1298                           
  1299                           ;MAIN.C: 389: idState = 1;
  1300  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1301  022F  01D5               	clrf	main@idState
  1302  0230  0AD5               	incf	main@idState,f
  1303                           
  1304                           ;MAIN.C: 390: _delay((unsigned long)((61)*(8000000/4000.0)));
  1305  0231  00D3               	movwf	??_main+1
  1306  0232  306F               	movlw	111
  1307  0233  00D2               	movwf	??_main
  1308  0234                     u1767:	
  1309  0234  0BD2               	decfsz	??_main,f
  1310  0235  2A34               	goto	u1767
  1311  0236  0BD3               	decfsz	??_main+1,f
  1312  0237  2A34               	goto	u1767
  1313  0238  2A39               	nop2
  1314                           
  1315                           ;MAIN.C: 391: }
  1316  0239  2A47               	goto	l6556
  1317  023A                     l6552:	
  1318  023A  3002               	movlw	2
  1319                           
  1320                           ;MAIN.C: 392: else {
  1321                           ;MAIN.C: 393: idState = 0;
  1322  023B  01D5               	clrf	main@idState
  1323                           
  1324                           ;MAIN.C: 394: _delay((unsigned long)((150)*(8000000/4000.0)));
  1325  023C  00D4               	movwf	??_main+2
  1326  023D  3086               	movlw	134
  1327  023E  00D3               	movwf	??_main+1
  1328  023F  3099               	movlw	153
  1329  0240  00D2               	movwf	??_main
  1330  0241                     u1777:	
  1331  0241  0BD2               	decfsz	??_main,f
  1332  0242  2A41               	goto	u1777
  1333  0243  0BD3               	decfsz	??_main+1,f
  1334  0244  2A41               	goto	u1777
  1335  0245  0BD4               	decfsz	??_main+2,f
  1336  0246  2A41               	goto	u1777
  1337  0247                     l6556:	
  1338                           
  1339                           ;MAIN.C: 395: }
  1340                           ;MAIN.C: 399: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1341  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1342  0248  0859               	movf	_timeOut+1,w
  1343  0249  0458               	iorwf	_timeOut,w
  1344  024A  1903               	skipnz
  1345  024B  2A71               	goto	l6572
  1346  024C  085B               	movf	_timeTick+1,w
  1347  024D  0259               	subwf	_timeOut+1,w
  1348  024E  1D03               	skipz
  1349  024F  2A52               	goto	u1725
  1350  0250  085A               	movf	_timeTick,w
  1351  0251  0258               	subwf	_timeOut,w
  1352  0252                     u1725:	
  1353  0252  1C03               	btfss	3,0
  1354  0253  2A66               	goto	l6570
  1355  0254  2A71               	goto	l6572
  1356  0255                     l6562:	
  1357                           
  1358                           ;MAIN.C: 404: setState(2, 42);
  1359  0255  302A               	movlw	42
  1360  0256  00F2               	movwf	?_setState
  1361  0257  3002               	movlw	2
  1362  0258  01F3               	clrf	?_setState+1
  1363  0259  2443               	fcall	_setState
  1364                           
  1365                           ;MAIN.C: 406: break;
  1366  025A  2A71               	goto	l6572
  1367  025B                     l6564:	
  1368                           
  1369                           ;MAIN.C: 408: setState(6, 7);
  1370  025B  3007               	movlw	7
  1371  025C  00F2               	movwf	?_setState
  1372  025D  3006               	movlw	6
  1373  025E  01F3               	clrf	?_setState+1
  1374  025F  2443               	fcall	_setState
  1375                           
  1376                           ;MAIN.C: 409: break;
  1377  0260  2A71               	goto	l6572
  1378  0261                     l6566:	
  1379  0261  3002               	movlw	2
  1380                           
  1381                           ;MAIN.C: 411: setState(2, 0);
  1382  0262  01F2               	clrf	?_setState
  1383  0263  01F3               	clrf	?_setState+1
  1384  0264  2443               	fcall	_setState
  1385                           
  1386                           ;MAIN.C: 414: break;
  1387  0265  2A71               	goto	l6572
  1388  0266                     l6570:	
  1389  0266  085C               	movf	_mtState,w
  1390                           
  1391                           ; Switch size 1, requested type "space"
  1392                           ; Number of cases is 3, Range of values is 1 to 6
  1393                           ; switch strategies available:
  1394                           ; Name         Instructions Cycles
  1395                           ; simple_byte           10     6 (average)
  1396                           ; direct_byte           15     9 (fixed)
  1397                           ; jumptable            263     9 (fixed)
  1398                           ;	Chosen strategy is simple_byte
  1399  0267  3A01               	xorlw	1	; case 1
  1400  0268  1903               	skipnz
  1401  0269  2A55               	goto	l6562
  1402  026A  3A03               	xorlw	3	; case 2
  1403  026B  1903               	skipnz
  1404  026C  2A5B               	goto	l6564
  1405  026D  3A04               	xorlw	4	; case 6
  1406  026E  1903               	skipnz
  1407  026F  2A61               	goto	l6566
  1408  0270  2A71               	goto	l6572
  1409  0271                     l6572:	
  1410                           
  1411                           ;MAIN.C: 417: }
  1412                           ;MAIN.C: 420: if (mtState == 0) RA3 = 1;
  1413  0271  08DC               	movf	_mtState,f
  1414  0272  1D03               	skipz
  1415  0273  2A76               	goto	l4203
  1416  0274  1585               	bsf	5,3
  1417  0275  2A77               	goto	l6576
  1418  0276                     l4203:	
  1419                           
  1420                           ;MAIN.C: 421: else RA3 = 0;
  1421  0276  1185               	bcf	5,3
  1422  0277                     l6576:	
  1423                           
  1424                           ;MAIN.C: 430: if (mtState == 2) {
  1425  0277  085C               	movf	_mtState,w
  1426  0278  3A02               	xorlw	2
  1427  0279  1D03               	skipz
  1428  027A  2A7D               	goto	l4205
  1429                           
  1430                           ;MAIN.C: 432: RC0 = 1;
  1431  027B  1407               	bsf	7,0
  1432                           
  1433                           ;MAIN.C: 433: } else {
  1434  027C  2A7E               	goto	l6580
  1435  027D                     l4205:	
  1436                           
  1437                           ;MAIN.C: 434: RC0 = 0;
  1438  027D  1007               	bcf	7,0
  1439  027E                     l6580:	
  1440                           
  1441                           ;MAIN.C: 435: };
  1442                           ;MAIN.C: 471: timeTick++;
  1443  027E  0ADA               	incf	_timeTick,f
  1444  027F  1903               	skipnz
  1445  0280  0ADB               	incf	_timeTick+1,f
  1446  0281  2993               	goto	l6468
  1447  0282                     __end_of_main:	
  1448                           
  1449                           	psect	swtext1
  1450  045D                     __pswtext1:	
  1451  045D                     S6618:	
  1452  045D  2A2D               	ljmp	l4178
  1453  045E  299E               	ljmp	l6474
  1454  045F  299E               	ljmp	l6474
  1455  0460  29E5               	ljmp	l6514
  1456  0461  2A2D               	ljmp	l4178
  1457  0462  2A03               	ljmp	l6530
  1458  0463  29BC               	ljmp	l6490
  1459                           
  1460                           	psect	text484
  1461  02DE                     __ptext484:	
  1462 ;; =============== function _main ends ============
  1463                           
  1464                           
  1465 ;; *************** function _id_clear *****************
  1466 ;; Defined at:
  1467 ;;		line 181 in file "MAIN.C"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;  idMin           1    wreg     unsigned char 
  1470 ;;  idMax           1    4[BANK0 ] unsigned char 
  1471 ;; Auto vars:     Size  Location     Type
  1472 ;;  idMin           1   10[BANK0 ] unsigned char 
  1473 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1474 ;; Return value:  Size  Location     Type
  1475 ;;		None               void
  1476 ;; Registers used:
  1477 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 20/0
  1480 ;;		On exit  : 20/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMMON   BANK0   BANK1
  1483 ;;      Params:         0       1       0
  1484 ;;      Locals:         0       6       0
  1485 ;;      Temps:          0       0       0
  1486 ;;      Totals:         0       7       0
  1487 ;;Total ram usage:        7 bytes
  1488 ;; Hardware stack levels used:    1
  1489 ;; Hardware stack levels required when called:    4
  1490 ;; This function calls:
  1491 ;;		_id_replate
  1492 ;; This function is called by:
  1493 ;;		_main
  1494 ;; This function uses a non-reentrant model
  1495 ;;
  1496  02DE                     _id_clear:	
  1497                           
  1498                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1499                           ;id_clear@idMin stored from wreg
  1500  02DE  00C8               	movwf	id_clear@idMin
  1501                           
  1502                           ;MAIN.C: 182: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  1503  02DF  3043               	movlw	id_clear@tmp& (0+255)
  1504  02E0  0084               	movwf	4
  1505  02E1  0820               	movf	id_clear@F1097,w
  1506  02E2  1383               	bcf	3,7	;select IRP bank0
  1507  02E3  0080               	movwf	0
  1508  02E4  0A84               	incf	4,f
  1509  02E5  0821               	movf	id_clear@F1097+1,w
  1510  02E6  0080               	movwf	0
  1511  02E7  0A84               	incf	4,f
  1512  02E8  0822               	movf	id_clear@F1097+2,w
  1513  02E9  0080               	movwf	0
  1514  02EA  0A84               	incf	4,f
  1515  02EB  0823               	movf	id_clear@F1097+3,w
  1516  02EC  0080               	movwf	0
  1517  02ED  0A84               	incf	4,f
  1518  02EE  0824               	movf	id_clear@F1097+4,w
  1519  02EF  0080               	movwf	0
  1520  02F0                     l6434:	
  1521  02F0  0848               	movf	id_clear@idMin,w
  1522  02F1  0242               	subwf	id_clear@idMax,w
  1523  02F2  1C03               	btfss	3,0
  1524  02F3  0008               	return
  1525                           
  1526                           ;MAIN.C: 184: id_replate(idMin, tmp, buffTag);
  1527  02F4  3043               	movlw	id_clear@tmp& (0+255)
  1528  02F5  00BE               	movwf	?_id_replate
  1529  02F6  3025               	movlw	_buffTag& (0+255)
  1530  02F7  00BF               	movwf	?_id_replate+1
  1531  02F8  0848               	movf	id_clear@idMin,w
  1532  02F9  2282               	fcall	_id_replate
  1533  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1534  02FB  0AC8               	incf	id_clear@idMin,f
  1535  02FC  2AF0               	goto	l6434
  1536  02FD                     __end_of_id_clear:	
  1537                           
  1538                           	psect	text485
  1539  0282                     __ptext485:	
  1540 ;; =============== function _id_clear ends ============
  1541                           
  1542                           
  1543 ;; *************** function _id_replate *****************
  1544 ;; Defined at:
  1545 ;;		line 167 in file "MAIN.C"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  id              1    wreg     unsigned char 
  1548 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1549 ;;		 -> id_clear@tmp(5), keyID(5), 
  1550 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1551 ;;		 -> buffTag(25), 
  1552 ;; Auto vars:     Size  Location     Type
  1553 ;;  id              1   11[COMMON] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;		None               void
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 20/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1
  1563 ;;      Params:         0       2       0
  1564 ;;      Locals:         1       0       0
  1565 ;;      Temps:          0       2       0
  1566 ;;      Totals:         1       4       0
  1567 ;;Total ram usage:        5 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    3
  1570 ;; This function calls:
  1571 ;;		___bmul
  1572 ;;		_eepromWriteBlock
  1573 ;; This function is called by:
  1574 ;;		_id_clear
  1575 ;;		_main
  1576 ;; This function uses a non-reentrant model
  1577 ;;
  1578  0282                     _id_replate:	
  1579                           
  1580                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1581                           ;id_replate@id stored from wreg
  1582  0282  00FB               	movwf	id_replate@id
  1583                           
  1584                           ;MAIN.C: 168: id = (id - 1) * 5;
  1585  0283  3005               	movlw	5
  1586  0284  00F2               	movwf	?___bmul
  1587  0285  087B               	movf	id_replate@id,w
  1588  0286  3EFF               	addlw	255
  1589  0287  2429               	fcall	___bmul
  1590  0288  00FB               	movwf	id_replate@id
  1591                           
  1592                           ;MAIN.C: 169: {
  1593                           ;MAIN.C: 170: {
  1594                           ;MAIN.C: 171: *(buff + id) = *Cont;
  1595  0289  083E               	movf	id_replate@Cont,w
  1596  028A  0084               	movwf	4
  1597  028B  1383               	bcf	3,7	;select IRP bank0
  1598  028C  0800               	movf	0,w
  1599  028D  00C0               	movwf	??_id_replate
  1600  028E  087B               	movf	id_replate@id,w
  1601  028F  073F               	addwf	id_replate@buff,w
  1602  0290  00C1               	movwf	??_id_replate+1
  1603  0291  0084               	movwf	4
  1604  0292  0840               	movf	??_id_replate,w
  1605  0293  0080               	movwf	0
  1606                           
  1607                           ;MAIN.C: 172: *(buff + 1 + id) = *(Cont + 1);
  1608  0294  083E               	movf	id_replate@Cont,w
  1609  0295  3E01               	addlw	1
  1610  0296  22B6               	fcall	PL3	;call to abstracted procedure
  1611  0297  3E01               	addlw	1
  1612  0298  0084               	movwf	4
  1613  0299  0840               	movf	??_id_replate,w
  1614  029A  0080               	movwf	0
  1615                           
  1616                           ;MAIN.C: 173: *(buff + 2 + id) = *(Cont + 2);
  1617  029B  083E               	movf	id_replate@Cont,w
  1618  029C  3E02               	addlw	2
  1619  029D  22B6               	fcall	PL3	;call to abstracted procedure
  1620  029E  3E02               	addlw	2
  1621  029F  0084               	movwf	4
  1622  02A0  0840               	movf	??_id_replate,w
  1623  02A1  0080               	movwf	0
  1624                           
  1625                           ;MAIN.C: 174: *(buff + 3 + id) = *(Cont + 3);
  1626  02A2  083E               	movf	id_replate@Cont,w
  1627  02A3  3E03               	addlw	3
  1628  02A4  22B6               	fcall	PL3	;call to abstracted procedure
  1629  02A5  3E03               	addlw	3
  1630  02A6  0084               	movwf	4
  1631  02A7  0840               	movf	??_id_replate,w
  1632  02A8  0080               	movwf	0
  1633                           
  1634                           ;MAIN.C: 175: *(buff + 4 + id) = *(Cont + 4);
  1635  02A9  083E               	movf	id_replate@Cont,w
  1636  02AA  3E04               	addlw	4
  1637  02AB  22B6               	fcall	PL3	;call to abstracted procedure
  1638  02AC  3E04               	addlw	4
  1639  02AD  0084               	movwf	4
  1640  02AE  0840               	movf	??_id_replate,w
  1641  02AF  0080               	movwf	0
  1642                           
  1643                           ;MAIN.C: 176: }
  1644                           ;MAIN.C: 177: }
  1645                           ;MAIN.C: 179: eepromWriteBlock(0x06, buffTag, 25);
  1646  02B0  3025               	movlw	_buffTag& (0+255)
  1647  02B1  00F6               	movwf	?_eepromWriteBlock
  1648  02B2  3019               	movlw	25
  1649  02B3  00F7               	movwf	?_eepromWriteBlock+1
  1650  02B4  3006               	movlw	6
  1651  02B5  2BD8               	ljmp	_eepromWriteBlock
  1652  02B6                     __end_of_id_replate:	
  1653  02B6                     PL3:	
  1654  02B6  0084               	movwf	4
  1655  02B7  0800               	movf	0,w
  1656  02B8  00C0               	movwf	??_id_replate
  1657  02B9  087B               	movf	id_replate@id,w
  1658  02BA  073F               	addwf	id_replate@buff,w
  1659  02BB  00C1               	movwf	??_id_replate+1
  1660  02BC  0008               	return
  1661                           
  1662                           	psect	text486
  1663  03C3                     __ptext486:	
  1664 ;; =============== function _id_replate ends ============
  1665                           
  1666                           
  1667 ;; *************** function _beep2 *****************
  1668 ;; Defined at:
  1669 ;;		line 187 in file "MAIN.C"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;  sel             1    wreg     unsigned char 
  1672 ;;  rep             1    5[COMMON] unsigned char 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  sel             1    6[COMMON] unsigned char 
  1675 ;; Return value:  Size  Location     Type
  1676 ;;		None               void
  1677 ;; Registers used:
  1678 ;;		wreg, status,2, status,0, pclath, cstack
  1679 ;; Tracked objects:
  1680 ;;		On entry : 20/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1
  1684 ;;      Params:         1       0       0
  1685 ;;      Locals:         1       0       0
  1686 ;;      Temps:          0       0       0
  1687 ;;      Totals:         2       0       0
  1688 ;;Total ram usage:        2 bytes
  1689 ;; Hardware stack levels used:    1
  1690 ;; Hardware stack levels required when called:    2
  1691 ;; This function calls:
  1692 ;;		_delay_x10ms
  1693 ;; This function is called by:
  1694 ;;		_main
  1695 ;; This function uses a non-reentrant model
  1696 ;;
  1697  03C3                     _beep2:	
  1698                           
  1699                           ; Regs used in _beep2: [wreg+status,2+status,0+pclath+cstack]
  1700                           ;beep2@sel stored from wreg
  1701  03C3  00F6               	movwf	beep2@sel
  1702  03C4                     l6412:	
  1703                           ;MAIN.C: 188: while (rep--) {
  1704                           
  1705  03C4  03F5               	decf	beep2@rep,f
  1706  03C5  0875               	movf	beep2@rep,w
  1707  03C6  3AFF               	xorlw	255
  1708  03C7  1903               	btfsc	3,2
  1709  03C8  0008               	return
  1710                           
  1711                           ;MAIN.C: 189: RC0 = 1; if (sel)RA3 = 1;
  1712  03C9  1283               	bcf	3,5	;RP0=0, select bank0
  1713  03CA  1407               	bsf	7,0
  1714  03CB  0876               	movf	beep2@sel,w
  1715  03CC  1D03               	skipz
  1716  03CD  1585               	bsf	5,3
  1717                           
  1718                           ;MAIN.C: 190: delay_x10ms(20);
  1719  03CE  3014               	movlw	20
  1720  03CF  23FB               	fcall	_delay_x10ms
  1721                           
  1722                           ;MAIN.C: 191: RC0 = 0; if (sel)RA3 = 0;
  1723  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  1724  03D1  1007               	bcf	7,0
  1725  03D2  0876               	movf	beep2@sel,w
  1726  03D3  1D03               	skipz
  1727  03D4  1185               	bcf	5,3
  1728                           
  1729                           ;MAIN.C: 192: delay_x10ms(20);
  1730  03D5  3014               	movlw	20
  1731  03D6  23FB               	fcall	_delay_x10ms
  1732  03D7  2BC4               	goto	l6412
  1733  03D8                     __end_of_beep2:	
  1734                           
  1735                           	psect	text487
  1736  03D8                     __ptext487:	
  1737 ;; =============== function _beep2 ends ============
  1738                           
  1739                           
  1740 ;; *************** function _eepromWriteBlock *****************
  1741 ;; Defined at:
  1742 ;;		line 43 in file "ms82_eeprom.c"
  1743 ;; Parameters:    Size  Location     Type
  1744 ;;  addStart        1    wreg     unsigned char 
  1745 ;;  buff            1    6[COMMON] PTR unsigned char 
  1746 ;;		 -> buffTag(25), 
  1747 ;;  len             1    7[COMMON] unsigned char 
  1748 ;; Auto vars:     Size  Location     Type
  1749 ;;  addStart        1    9[COMMON] unsigned char 
  1750 ;;  i               1   10[COMMON] unsigned char 
  1751 ;; Return value:  Size  Location     Type
  1752 ;;		None               void
  1753 ;; Registers used:
  1754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 120/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1
  1760 ;;      Params:         2       0       0
  1761 ;;      Locals:         2       0       0
  1762 ;;      Temps:          1       0       0
  1763 ;;      Totals:         5       0       0
  1764 ;;Total ram usage:        5 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    2
  1767 ;; This function calls:
  1768 ;;		_eepromWriteByte
  1769 ;; This function is called by:
  1770 ;;		_id_replate
  1771 ;; This function uses a non-reentrant model
  1772 ;;
  1773  03D8                     _eepromWriteBlock:	
  1774                           
  1775                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1776                           ;eepromWriteBlock@addStart stored from wreg
  1777  03D8  00F9               	movwf	eepromWriteBlock@addStart
  1778                           
  1779                           ;ms82_eeprom.c: 44: unsigned char i;
  1780                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  1781  03D9  01FA               	clrf	eepromWriteBlock@i
  1782  03DA                     l6394:	
  1783  03DA  0877               	movf	eepromWriteBlock@len,w
  1784  03DB  027A               	subwf	eepromWriteBlock@i,w
  1785  03DC  1803               	btfsc	3,0
  1786  03DD  0008               	return
  1787                           
  1788                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  1789  03DE  087A               	movf	eepromWriteBlock@i,w
  1790  03DF  0776               	addwf	eepromWriteBlock@buff,w
  1791  03E0  00F8               	movwf	??_eepromWriteBlock
  1792  03E1  0084               	movwf	4
  1793  03E2  1383               	bcf	3,7	;select IRP bank0
  1794  03E3  0800               	movf	0,w
  1795  03E4  00F2               	movwf	?_eepromWriteByte
  1796  03E5  087A               	movf	eepromWriteBlock@i,w
  1797  03E6  0779               	addwf	eepromWriteBlock@addStart,w
  1798  03E7  22BD               	fcall	_eepromWriteByte
  1799  03E8  0AFA               	incf	eepromWriteBlock@i,f
  1800  03E9  2BDA               	goto	l6394
  1801  03EA                     __end_of_eepromWriteBlock:	
  1802                           
  1803                           	psect	text488
  1804  0393                     __ptext488:	
  1805 ;; =============== function _eepromWriteBlock ends ============
  1806                           
  1807                           
  1808 ;; *************** function _id_search *****************
  1809 ;; Defined at:
  1810 ;;		line 159 in file "MAIN.C"
  1811 ;; Parameters:    Size  Location     Type
  1812 ;;  id_input        1    wreg     PTR unsigned char 
  1813 ;;		 -> keyID(5), 
  1814 ;;  buff            1   10[COMMON] PTR unsigned char 
  1815 ;;		 -> buffTag(25), 
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  1818 ;;		 -> keyID(5), 
  1819 ;;  i               1    1[BANK0 ] unsigned char 
  1820 ;; Return value:  Size  Location     Type
  1821 ;;                  1    wreg      unsigned char 
  1822 ;; Registers used:
  1823 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1824 ;; Tracked objects:
  1825 ;;		On entry : 20/0
  1826 ;;		On exit  : 20/0
  1827 ;;		Unchanged: FFEDF/0
  1828 ;; Data sizes:     COMMON   BANK0   BANK1
  1829 ;;      Params:         1       0       0
  1830 ;;      Locals:         0       2       0
  1831 ;;      Temps:          1       0       0
  1832 ;;      Totals:         2       2       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; Hardware stack levels required when called:    2
  1836 ;; This function calls:
  1837 ;;		_comArr
  1838 ;;		___lbdiv
  1839 ;; This function is called by:
  1840 ;;		_main
  1841 ;; This function uses a non-reentrant model
  1842 ;;
  1843  0393                     _id_search:	
  1844                           
  1845                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1846                           ;id_search@id_input stored from wreg
  1847  0393  00BE               	movwf	id_search@id_input
  1848                           
  1849                           ;MAIN.C: 160: unsigned char i;
  1850                           ;MAIN.C: 161: for (i = 0; i < 21; i += 5) {
  1851  0394  01BF               	clrf	id_search@i
  1852  0395                     l6374:	
  1853                           
  1854                           ;MAIN.C: 162: if (comArr(id_input, buff + i, 5, 5))
  1855  0395  083F               	movf	id_search@i,w
  1856  0396  077A               	addwf	id_search@buff,w
  1857  0397  00F2               	movwf	?_comArr
  1858  0398  3005               	movlw	5
  1859  0399  00F3               	movwf	?_comArr+1
  1860  039A  00F4               	movwf	?_comArr+2
  1861  039B  083E               	movf	id_search@id_input,w
  1862  039C  233B               	fcall	_comArr
  1863  039D  3A00               	xorlw	0
  1864                           
  1865                           ;MAIN.C: 163: return i / 5 + 1;
  1866  039E  3005               	movlw	5
  1867  039F  1903               	skipnz
  1868  03A0  2BA7               	goto	L1
  1869  03A1  00F2               	movwf	?___lbdiv
  1870  03A2  083F               	movf	id_search@i,w
  1871  03A3  2378               	fcall	___lbdiv
  1872  03A4  00FB               	movwf	??_id_search
  1873  03A5  0A7B               	incf	??_id_search,w
  1874  03A6  0008               	return
  1875  03A7                     L1:	
  1876  03A7  07BF               	addwf	id_search@i,f
  1877  03A8  3015               	movlw	21
  1878  03A9  023F               	subwf	id_search@i,w
  1879  03AA  1803               	btfsc	3,0
  1880                           
  1881                           ;MAIN.C: 164: }
  1882                           ;MAIN.C: 165: return 255;
  1883  03AB  34FF               	retlw	255
  1884  03AC  2B95               	goto	l6374
  1885  03AD                     __end_of_id_search:	
  1886                           
  1887                           	psect	text489
  1888  03FB                     __ptext489:	
  1889 ;; =============== function _id_search ends ============
  1890                           
  1891                           
  1892 ;; *************** function _delay_x10ms *****************
  1893 ;; Defined at:
  1894 ;;		line 59 in file "MAIN.C"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  t               1    wreg     unsigned char 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  t               1    4[COMMON] unsigned char 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0
  1903 ;; Tracked objects:
  1904 ;;		On entry : 20/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMMON   BANK0   BANK1
  1908 ;;      Params:         0       0       0
  1909 ;;      Locals:         1       0       0
  1910 ;;      Temps:          2       0       0
  1911 ;;      Totals:         3       0       0
  1912 ;;Total ram usage:        3 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    1
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_beep2
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921  03FB                     _delay_x10ms:	
  1922                           
  1923                           ; Regs used in _delay_x10ms: [wreg+status,2+status,0]
  1924                           ;delay_x10ms@t stored from wreg
  1925  03FB  00F4               	movwf	delay_x10ms@t
  1926  03FC                     l6366:	
  1927                           ;MAIN.C: 60: while (t--)
  1928                           
  1929  03FC  03F4               	decf	delay_x10ms@t,f
  1930  03FD  0874               	movf	delay_x10ms@t,w
  1931  03FE  3AFF               	xorlw	255
  1932  03FF  1903               	btfsc	3,2
  1933  0400  0008               	return
  1934                           
  1935                           ;MAIN.C: 61: _delay((unsigned long)((10)*(8000000/4000.0)));
  1936  0401  301A               	movlw	26
  1937  0402  00F3               	movwf	??_delay_x10ms+1
  1938  0403  30F8               	movlw	248
  1939  0404  00F2               	movwf	??_delay_x10ms
  1940  0405                     u1787:	
  1941  0405  0BF2               	decfsz	??_delay_x10ms,f
  1942  0406  2C05               	goto	u1787
  1943  0407  0BF3               	decfsz	??_delay_x10ms+1,f
  1944  0408  2C05               	goto	u1787
  1945  0409  0064               	clrwdt
  1946  040A  2BFC               	goto	l6366
  1947  040B                     __end_of_delay_x10ms:	
  1948                           
  1949                           	psect	text490
  1950  000B                     __ptext490:	
  1951 ;; =============== function _delay_x10ms ends ============
  1952                           
  1953                           
  1954 ;; *************** function _get_RFID *****************
  1955 ;; Defined at:
  1956 ;;		line 20 in file "rfid125.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  1961 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  1962 ;;  ii              1   19[BANK0 ] unsigned char 
  1963 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  1964 ;;  i               1   15[BANK0 ] unsigned char 
  1965 ;;  j               1   14[BANK0 ] unsigned char 
  1966 ;;  even_row        1   13[BANK0 ] unsigned char 
  1967 ;;  even_col        1   12[BANK0 ] unsigned char 
  1968 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      unsigned char 
  1971 ;; Registers used:
  1972 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 20/0
  1975 ;;		On exit  : 20/0
  1976 ;;		Unchanged: FFEDF/0
  1977 ;; Data sizes:     COMMON   BANK0   BANK1
  1978 ;;      Params:         0       0       0
  1979 ;;      Locals:         0      20       0
  1980 ;;      Temps:          1       0       0
  1981 ;;      Totals:         1      20       0
  1982 ;;Total ram usage:       21 bytes
  1983 ;; Hardware stack levels used:    1
  1984 ;; Hardware stack levels required when called:    2
  1985 ;; This function calls:
  1986 ;;		_timerOut
  1987 ;;		___lbdiv
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992  000B                     _get_RFID:	
  1993  000B  3010               	movlw	16
  1994                           
  1995                           ;rfid125.c: 22: unsigned char RF_serial_55bits[11];
  1996                           ;rfid125.c: 23: unsigned int timeOutVal;
  1997                           ;rfid125.c: 24: unsigned char i,ii,j;
  1998                           ;rfid125.c: 25: unsigned char flag_RFID_syn, flag_RFID_last;
  1999                           ;rfid125.c: 26: unsigned char even_row, even_col;
  2000                           ;rfid125.c: 29: flag_RFID_syn = 0;
  2001                           
  2002                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2003  000C  01C9               	clrf	get_RFID@flag_RFID_syn
  2004                           
  2005                           ;rfid125.c: 32: i=16;
  2006  000D  00CD               	movwf	get_RFID@i
  2007  000E                     l6144:	
  2008                           
  2009                           ;rfid125.c: 34: {
  2010                           ;rfid125.c: 35: timeOutVal=timerOut(1,150);
  2011  000E  3096               	movlw	150
  2012  000F  00F2               	movwf	?_timerOut
  2013  0010  3001               	movlw	1
  2014  0011  01F3               	clrf	?_timerOut+1
  2015  0012  231C               	fcall	_timerOut
  2016                           
  2017                           ;rfid125.c: 36: if(timeOutVal==0) return 0;
  2018  0013  2143               	fcall	PL2	;call to abstracted procedure
  2019  0014  1903               	btfsc	3,2
  2020  0015  3400               	retlw	0
  2021                           
  2022                           ;rfid125.c: 38: timeOutVal=timerOut(0,150);
  2023  0016  3096               	movlw	150
  2024  0017  00F2               	movwf	?_timerOut
  2025  0018  3000               	movlw	0
  2026  0019  01F3               	clrf	?_timerOut+1
  2027  001A  231C               	fcall	_timerOut
  2028                           
  2029                           ;rfid125.c: 39: if(timeOutVal==0) return 0;
  2030  001B  2143               	fcall	PL2	;call to abstracted procedure
  2031  001C  1903               	btfsc	3,2
  2032  001D  3400               	retlw	0
  2033  001E  3000               	movlw	0
  2034                           
  2035                           ;rfid125.c: 41: i--;
  2036  001F  03CD               	decf	get_RFID@i,f
  2037                           
  2038                           ;rfid125.c: 42: }
  2039                           ;rfid125.c: 43: while(timeOutVal<72 && i>0);
  2040  0020  0250               	subwf	get_RFID@timeOutVal+1,w
  2041  0021  3048               	movlw	72
  2042  0022  1903               	skipnz
  2043  0023  024F               	subwf	get_RFID@timeOutVal,w
  2044  0024  1803               	skipnc
  2045  0025  2829               	goto	l2459
  2046  0026  08CD               	movf	get_RFID@i,f
  2047  0027  1D03               	skipz
  2048  0028  280E               	goto	l6144
  2049  0029                     l2459:	
  2050                           
  2051                           ;rfid125.c: 44: flag_RFID_last = 1;
  2052  0029  01CE               	clrf	get_RFID@flag_RFID_last
  2053  002A  0ACE               	incf	get_RFID@flag_RFID_last,f
  2054                           
  2055                           ;rfid125.c: 45: i = 0;
  2056  002B  01CD               	clrf	get_RFID@i
  2057  002C                     l6232:	
  2058                           ;rfid125.c: 46: while(i<64)
  2059                           
  2060  002C  3040               	movlw	64
  2061  002D  024D               	subwf	get_RFID@i,w
  2062  002E  1803               	btfsc	3,0
  2063  002F  2884               	goto	l6234
  2064                           
  2065                           ;rfid125.c: 47: {
  2066                           ;rfid125.c: 48: for(ii=0;ii<9;ii++)
  2067  0030  01D1               	clrf	get_RFID@ii
  2068  0031                     l6174:	
  2069                           
  2070                           ;rfid125.c: 49: {
  2071                           ;rfid125.c: 50: timeOutVal=timerOut(flag_RFID_last,150);
  2072  0031  2150               	fcall	PL5	;call to abstracted procedure
  2073  0032  231C               	fcall	_timerOut
  2074                           
  2075                           ;rfid125.c: 51: if(timeOutVal==0) return 0;
  2076  0033  2143               	fcall	PL2	;call to abstracted procedure
  2077  0034  1903               	btfsc	3,2
  2078  0035  3400               	retlw	0
  2079                           
  2080                           ;rfid125.c: 53: if(0==flag_RFID_last && timeOutVal<=72 ||
  2081                           ;rfid125.c: 54: 1==flag_RFID_last && timeOutVal>72)
  2082  0036  08CE               	movf	get_RFID@flag_RFID_last,f
  2083  0037  1D03               	skipz
  2084  0038  2840               	goto	l6186
  2085  0039  3000               	movlw	0
  2086  003A  0250               	subwf	get_RFID@timeOutVal+1,w
  2087  003B  3049               	movlw	73
  2088  003C  1903               	skipnz
  2089  003D  024F               	subwf	get_RFID@timeOutVal,w
  2090  003E  1C03               	skipc
  2091  003F  2849               	goto	l6190
  2092  0040                     l6186:	
  2093  0040  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2094  0041  2857               	goto	l6204
  2095  0042  3000               	movlw	0
  2096  0043  0250               	subwf	get_RFID@timeOutVal+1,w
  2097  0044  3049               	movlw	73
  2098  0045  1903               	skipnz
  2099  0046  024F               	subwf	get_RFID@timeOutVal,w
  2100  0047  1C03               	skipc
  2101  0048  2857               	goto	l6204
  2102  0049                     l6190:	
  2103                           
  2104                           ;rfid125.c: 55: {
  2105                           ;rfid125.c: 56: if(!flag_RFID_last)
  2106  0049  08CE               	movf	get_RFID@flag_RFID_last,f
  2107  004A  1D03               	skipz
  2108  004B  2854               	goto	l6200
  2109                           
  2110                           ;rfid125.c: 57: {
  2111                           ;rfid125.c: 58: timeOutVal=timerOut(1,72);
  2112  004C  3048               	movlw	72
  2113  004D  00F2               	movwf	?_timerOut
  2114  004E  3001               	movlw	1
  2115  004F  01F3               	clrf	?_timerOut+1
  2116  0050  231C               	fcall	_timerOut
  2117                           
  2118                           ;rfid125.c: 59: if(timeOutVal==0) return 0;
  2119  0051  2143               	fcall	PL2	;call to abstracted procedure
  2120  0052  1903               	btfsc	3,2
  2121  0053  3400               	retlw	0
  2122  0054                     l6200:	
  2123                           
  2124                           ;rfid125.c: 60: }
  2125                           ;rfid125.c: 61: flag_RFID_last = 0;
  2126  0054  01CE               	clrf	get_RFID@flag_RFID_last
  2127                           
  2128                           ;rfid125.c: 62: i++;
  2129  0055  0ACD               	incf	get_RFID@i,f
  2130                           
  2131                           ;rfid125.c: 63: }
  2132  0056  2879               	goto	l6224
  2133  0057                     l6204:	
  2134                           
  2135                           ;rfid125.c: 64: else
  2136                           ;rfid125.c: 65: if(0==flag_RFID_last && timeOutVal>72 ||
  2137                           ;rfid125.c: 66: 1==flag_RFID_last && timeOutVal<=72)
  2138  0057  08CE               	movf	get_RFID@flag_RFID_last,f
  2139  0058  1D03               	skipz
  2140  0059  2861               	goto	l6208
  2141  005A  3000               	movlw	0
  2142  005B  0250               	subwf	get_RFID@timeOutVal+1,w
  2143  005C  3049               	movlw	73
  2144  005D  1903               	skipnz
  2145  005E  024F               	subwf	get_RFID@timeOutVal,w
  2146  005F  1803               	skipnc
  2147  0060  286A               	goto	l6212
  2148  0061                     l6208:	
  2149  0061  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2150  0062  2879               	goto	l6224
  2151  0063  3000               	movlw	0
  2152  0064  0250               	subwf	get_RFID@timeOutVal+1,w
  2153  0065  3049               	movlw	73
  2154  0066  1903               	skipnz
  2155  0067  024F               	subwf	get_RFID@timeOutVal,w
  2156  0068  1803               	skipnc
  2157  0069  2879               	goto	l6224
  2158  006A                     l6212:	
  2159                           
  2160                           ;rfid125.c: 67: {
  2161                           ;rfid125.c: 68: if(flag_RFID_last)
  2162  006A  084E               	movf	get_RFID@flag_RFID_last,w
  2163  006B  1903               	btfsc	3,2
  2164  006C  2875               	goto	l2478
  2165                           
  2166                           ;rfid125.c: 69: {
  2167                           ;rfid125.c: 70: timeOutVal=timerOut(0,72);
  2168  006D  3048               	movlw	72
  2169  006E  00F2               	movwf	?_timerOut
  2170  006F  3000               	movlw	0
  2171  0070  01F3               	clrf	?_timerOut+1
  2172  0071  231C               	fcall	_timerOut
  2173                           
  2174                           ;rfid125.c: 71: if(timeOutVal==0) return 0;
  2175  0072  2143               	fcall	PL2	;call to abstracted procedure
  2176  0073  1903               	btfsc	3,2
  2177  0074  3400               	retlw	0
  2178  0075                     l2478:	
  2179                           
  2180                           ;rfid125.c: 72: }
  2181                           ;rfid125.c: 73: flag_RFID_last = 1;
  2182  0075  01CE               	clrf	get_RFID@flag_RFID_last
  2183  0076  0ACE               	incf	get_RFID@flag_RFID_last,f
  2184                           
  2185                           ;rfid125.c: 74: i++;
  2186  0077  0ACD               	incf	get_RFID@i,f
  2187                           
  2188                           ;rfid125.c: 76: break;
  2189  0078  287E               	goto	l6228
  2190  0079                     l6224:	
  2191  0079  3009               	movlw	9
  2192  007A  0AD1               	incf	get_RFID@ii,f
  2193  007B  0251               	subwf	get_RFID@ii,w
  2194  007C  1C03               	skipc
  2195  007D  2831               	goto	l6174
  2196  007E                     l6228:	
  2197                           
  2198                           ;rfid125.c: 77: }
  2199                           ;rfid125.c: 79: }
  2200                           ;rfid125.c: 80: if(9==ii)
  2201  007E  0851               	movf	get_RFID@ii,w
  2202  007F  3A09               	xorlw	9
  2203  0080  1D03               	skipz
  2204  0081  282C               	goto	l6232
  2205                           
  2206                           ;rfid125.c: 81: {
  2207                           ;rfid125.c: 82: flag_RFID_syn = 1;
  2208  0082  01C9               	clrf	get_RFID@flag_RFID_syn
  2209  0083  0AC9               	incf	get_RFID@flag_RFID_syn,f
  2210  0084                     l6234:	
  2211                           ;rfid125.c: 83: break;
  2212                           
  2213                           
  2214                           ;rfid125.c: 84: }
  2215                           ;rfid125.c: 85: }
  2216                           ;rfid125.c: 87: if(!flag_RFID_syn)
  2217  0084  08C9               	movf	get_RFID@flag_RFID_syn,f
  2218  0085  1903               	btfsc	3,2
  2219  0086  3400               	retlw	0
  2220                           
  2221                           ;rfid125.c: 90: }
  2222                           ;rfid125.c: 91: for(ii=0;ii<55;ii++)
  2223  0087  01D1               	clrf	get_RFID@ii
  2224  0088                     l6246:	
  2225                           
  2226                           ;rfid125.c: 92: {
  2227                           ;rfid125.c: 93: i = ii/5;
  2228  0088  3005               	movlw	5
  2229  0089  00F2               	movwf	?___lbdiv
  2230  008A  0851               	movf	get_RFID@ii,w
  2231  008B  2378               	fcall	___lbdiv
  2232  008C  00CD               	movwf	get_RFID@i
  2233                           
  2234                           ;rfid125.c: 94: timeOutVal=timerOut(flag_RFID_last,150);
  2235  008D  2150               	fcall	PL5	;call to abstracted procedure
  2236  008E  231C               	fcall	_timerOut
  2237                           
  2238                           ;rfid125.c: 95: if(timeOutVal==0) return 0;
  2239  008F  2143               	fcall	PL2	;call to abstracted procedure
  2240  0090  1903               	btfsc	3,2
  2241  0091  3400               	retlw	0
  2242                           
  2243                           ;rfid125.c: 97: if(0==flag_RFID_last && timeOutVal<=72 ||
  2244                           ;rfid125.c: 98: 1==flag_RFID_last && timeOutVal>72)
  2245  0092  08CE               	movf	get_RFID@flag_RFID_last,f
  2246  0093  1D03               	skipz
  2247  0094  289C               	goto	l6260
  2248  0095  3000               	movlw	0
  2249  0096  0250               	subwf	get_RFID@timeOutVal+1,w
  2250  0097  3049               	movlw	73
  2251  0098  1903               	skipnz
  2252  0099  024F               	subwf	get_RFID@timeOutVal,w
  2253  009A  1C03               	skipc
  2254  009B  28A5               	goto	l6264
  2255  009C                     l6260:	
  2256  009C  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2257  009D  28B7               	goto	l6280
  2258  009E  3000               	movlw	0
  2259  009F  0250               	subwf	get_RFID@timeOutVal+1,w
  2260  00A0  3049               	movlw	73
  2261  00A1  1903               	skipnz
  2262  00A2  024F               	subwf	get_RFID@timeOutVal,w
  2263  00A3  1C03               	skipc
  2264  00A4  28B7               	goto	l6280
  2265  00A5                     l6264:	
  2266                           
  2267                           ;rfid125.c: 99: {
  2268                           ;rfid125.c: 100: if(!flag_RFID_last)
  2269  00A5  08CE               	movf	get_RFID@flag_RFID_last,f
  2270  00A6  1D03               	skipz
  2271  00A7  28B0               	goto	l6274
  2272                           
  2273                           ;rfid125.c: 101: {
  2274                           ;rfid125.c: 102: timeOutVal=timerOut(1,72);
  2275  00A8  3048               	movlw	72
  2276  00A9  00F2               	movwf	?_timerOut
  2277  00AA  3001               	movlw	1
  2278  00AB  01F3               	clrf	?_timerOut+1
  2279  00AC  231C               	fcall	_timerOut
  2280                           
  2281                           ;rfid125.c: 103: if(timeOutVal==0) return 0;
  2282  00AD  2143               	fcall	PL2	;call to abstracted procedure
  2283  00AE  1903               	btfsc	3,2
  2284  00AF  3400               	retlw	0
  2285  00B0                     l6274:	
  2286                           
  2287                           ;rfid125.c: 104: }
  2288                           ;rfid125.c: 105: flag_RFID_last = 0;
  2289  00B0  01CE               	clrf	get_RFID@flag_RFID_last
  2290                           
  2291                           ;rfid125.c: 106: RF_serial_55bits[i] <<= 1;
  2292  00B1  2149               	fcall	PL4	;call to abstracted procedure
  2293                           
  2294                           ;rfid125.c: 107: RF_serial_55bits[i] |= 0x01;
  2295  00B2  084D               	movf	get_RFID@i,w
  2296  00B3  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2297  00B4  0084               	movwf	4
  2298  00B5  1400               	bsf	0,0
  2299                           
  2300                           ;rfid125.c: 108: }
  2301  00B6  28D8               	goto	l6300
  2302  00B7                     l6280:	
  2303                           
  2304                           ;rfid125.c: 109: else
  2305                           ;rfid125.c: 110: if(0==flag_RFID_last && timeOutVal>72 ||
  2306                           ;rfid125.c: 111: 1==flag_RFID_last && timeOutVal<=72)
  2307  00B7  08CE               	movf	get_RFID@flag_RFID_last,f
  2308  00B8  1D03               	skipz
  2309  00B9  28C1               	goto	l6284
  2310  00BA  3000               	movlw	0
  2311  00BB  0250               	subwf	get_RFID@timeOutVal+1,w
  2312  00BC  3049               	movlw	73
  2313  00BD  1903               	skipnz
  2314  00BE  024F               	subwf	get_RFID@timeOutVal,w
  2315  00BF  1803               	skipnc
  2316  00C0  28CA               	goto	l6288
  2317  00C1                     l6284:	
  2318  00C1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2319  00C2  28D8               	goto	l6300
  2320  00C3  3000               	movlw	0
  2321  00C4  0250               	subwf	get_RFID@timeOutVal+1,w
  2322  00C5  3049               	movlw	73
  2323  00C6  1903               	skipnz
  2324  00C7  024F               	subwf	get_RFID@timeOutVal,w
  2325  00C8  1803               	skipnc
  2326  00C9  28D8               	goto	l6300
  2327  00CA                     l6288:	
  2328                           
  2329                           ;rfid125.c: 112: {
  2330                           ;rfid125.c: 113: if(flag_RFID_last)
  2331  00CA  084E               	movf	get_RFID@flag_RFID_last,w
  2332  00CB  1903               	btfsc	3,2
  2333  00CC  28D5               	goto	l2499
  2334                           
  2335                           ;rfid125.c: 114: {
  2336                           ;rfid125.c: 115: timeOutVal=timerOut(0,150);
  2337  00CD  3096               	movlw	150
  2338  00CE  00F2               	movwf	?_timerOut
  2339  00CF  3000               	movlw	0
  2340  00D0  01F3               	clrf	?_timerOut+1
  2341  00D1  231C               	fcall	_timerOut
  2342                           
  2343                           ;rfid125.c: 116: if(timeOutVal==0) return 0;
  2344  00D2  2143               	fcall	PL2	;call to abstracted procedure
  2345  00D3  1903               	btfsc	3,2
  2346  00D4  3400               	retlw	0
  2347  00D5                     l2499:	
  2348                           
  2349                           ;rfid125.c: 117: }
  2350                           ;rfid125.c: 118: flag_RFID_last = 1;
  2351  00D5  01CE               	clrf	get_RFID@flag_RFID_last
  2352  00D6  0ACE               	incf	get_RFID@flag_RFID_last,f
  2353                           
  2354                           ;rfid125.c: 119: RF_serial_55bits[i] <<= 1;
  2355  00D7  2149               	fcall	PL4	;call to abstracted procedure
  2356  00D8                     l6300:	
  2357  00D8  3037               	movlw	55
  2358  00D9  0AD1               	incf	get_RFID@ii,f
  2359  00DA  0251               	subwf	get_RFID@ii,w
  2360  00DB  1C03               	skipc
  2361  00DC  2888               	goto	l6246
  2362                           
  2363                           ;rfid125.c: 120: }
  2364                           ;rfid125.c: 121: }
  2365                           ;rfid125.c: 122: if(55==ii)
  2366  00DD  0851               	movf	get_RFID@ii,w
  2367  00DE  3A37               	xorlw	55
  2368  00DF  1D03               	skipz
  2369  00E0  3400               	retlw	0
  2370                           
  2371                           ;rfid125.c: 123: {
  2372                           ;rfid125.c: 124: even_col = 0;
  2373  00E1  01CA               	clrf	get_RFID@even_col
  2374                           
  2375                           ;rfid125.c: 125: for(ii=0;ii<10;ii++)
  2376  00E2  01D1               	clrf	get_RFID@ii
  2377  00E3                     l6312:	
  2378                           
  2379                           ;rfid125.c: 126: {
  2380                           ;rfid125.c: 127: even_row = (RF_serial_55bits[ii] & 0x01);
  2381  00E3  0851               	movf	get_RFID@ii,w
  2382  00E4  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2383  00E5  0084               	movwf	4
  2384  00E6  1383               	bcf	3,7	;select IRP bank0
  2385  00E7  0800               	movf	0,w
  2386  00E8  00CB               	movwf	get_RFID@even_row
  2387  00E9  3001               	movlw	1
  2388  00EA  05CB               	andwf	get_RFID@even_row,f
  2389                           
  2390                           ;rfid125.c: 128: for(j=1;j<5;j++)
  2391  00EB  01CC               	clrf	get_RFID@j
  2392  00EC  0ACC               	incf	get_RFID@j,f
  2393  00ED                     l6322:	
  2394                           
  2395                           ;rfid125.c: 129: {
  2396                           ;rfid125.c: 130: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  2397  00ED  0851               	movf	get_RFID@ii,w
  2398  00EE  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2399  00EF  0084               	movwf	4
  2400  00F0  0800               	movf	0,w
  2401  00F1  00F7               	movwf	??_get_RFID
  2402  00F2  0A4C               	incf	get_RFID@j,w
  2403  00F3  28F6               	goto	u1414
  2404  00F4                     u1415:	
  2405  00F4  1003               	clrc
  2406  00F5  0CF7               	rrf	??_get_RFID,f
  2407  00F6                     u1414:	
  2408  00F6  3EFF               	addlw	-1
  2409  00F7  1D03               	skipz
  2410  00F8  28F4               	goto	u1415
  2411  00F9  0877               	movf	??_get_RFID,w
  2412  00FA  3901               	andlw	1
  2413  00FB  06CB               	xorwf	get_RFID@even_row,f
  2414  00FC  3005               	movlw	5
  2415  00FD  0ACC               	incf	get_RFID@j,f
  2416  00FE  024C               	subwf	get_RFID@j,w
  2417  00FF  1C03               	skipc
  2418  0100  28ED               	goto	l6322
  2419                           
  2420                           ;rfid125.c: 131: }
  2421                           ;rfid125.c: 132: if(even_row & 0x01)
  2422  0101  184B               	btfsc	get_RFID@even_row,0
  2423  0102  3400               	retlw	0
  2424                           
  2425                           ;rfid125.c: 135: }
  2426                           ;rfid125.c: 137: RF_serial_55bits[ii] <<= 3;
  2427  0103  0851               	movf	get_RFID@ii,w
  2428  0104  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2429  0105  0084               	movwf	4
  2430  0106  0D80               	rlf	0,f
  2431  0107  0D80               	rlf	0,f
  2432  0108  0D00               	rlf	0,w
  2433  0109  39F8               	andlw	248
  2434  010A  0080               	movwf	0
  2435                           
  2436                           ;rfid125.c: 139: i = RF_serial_55bits[ii];
  2437  010B  0851               	movf	get_RFID@ii,w
  2438  010C  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2439  010D  0084               	movwf	4
  2440  010E  0800               	movf	0,w
  2441  010F  00CD               	movwf	get_RFID@i
  2442                           
  2443                           ;rfid125.c: 140: if( 0==ii%2 )
  2444  0110  1851               	btfsc	get_RFID@ii,0
  2445  0111  291F               	goto	l6338
  2446                           
  2447                           ;rfid125.c: 141: {
  2448                           ;rfid125.c: 142: keyID[ii/2] = (i & 0xF0);
  2449  0112  1003               	clrc
  2450  0113  0C51               	rrf	get_RFID@ii,w
  2451  0114  3E5D               	addlw	_keyID& (0+255)
  2452  0115  0084               	movwf	4
  2453  0116  084D               	movf	get_RFID@i,w
  2454  0117  0080               	movwf	0
  2455  0118  1003               	clrc
  2456  0119  0C51               	rrf	get_RFID@ii,w
  2457  011A  3E5D               	addlw	_keyID& (0+255)
  2458  011B  0084               	movwf	4
  2459  011C  30F0               	movlw	240
  2460  011D  0580               	andwf	0,f
  2461                           
  2462                           ;rfid125.c: 143: }
  2463  011E  2929               	goto	l6342
  2464  011F                     l6338:	
  2465  011F  300F               	movlw	15
  2466                           
  2467                           ;rfid125.c: 144: else
  2468                           ;rfid125.c: 145: {
  2469                           ;rfid125.c: 146: i >>=4;
  2470  0120  0ECD               	swapf	get_RFID@i,f
  2471  0121  05CD               	andwf	get_RFID@i,f
  2472                           
  2473                           ;rfid125.c: 147: keyID[ii/2] |= (i & 0x0F);
  2474  0122  1003               	clrc
  2475  0123  0C51               	rrf	get_RFID@ii,w
  2476  0124  3E5D               	addlw	_keyID& (0+255)
  2477  0125  0084               	movwf	4
  2478  0126  084D               	movf	get_RFID@i,w
  2479  0127  390F               	andlw	15
  2480  0128  0480               	iorwf	0,f
  2481  0129                     l6342:	
  2482                           
  2483                           ;rfid125.c: 148: }
  2484                           ;rfid125.c: 149: even_col ^= RF_serial_55bits[ii];
  2485  0129  0851               	movf	get_RFID@ii,w
  2486  012A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2487  012B  0084               	movwf	4
  2488  012C  0800               	movf	0,w
  2489  012D  06CA               	xorwf	get_RFID@even_col,f
  2490  012E  300A               	movlw	10
  2491  012F  0AD1               	incf	get_RFID@ii,f
  2492  0130  0251               	subwf	get_RFID@ii,w
  2493  0131  1C03               	skipc
  2494  0132  28E3               	goto	l6312
  2495                           
  2496                           ;rfid125.c: 150: }
  2497                           ;rfid125.c: 151: RF_serial_55bits[10] <<= 3;
  2498  0133  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2499  0134  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2500  0135  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  2501  0136  39F8               	andlw	248
  2502  0137  00C8               	movwf	get_RFID@RF_serial_55bits+10
  2503  0138  30F0               	movlw	240
  2504                           
  2505                           ;rfid125.c: 152: keyID[0] =0x00;
  2506  0139  01DD               	clrf	_keyID
  2507                           
  2508                           ;rfid125.c: 153: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  2509  013A  054A               	andwf	get_RFID@even_col,w
  2510  013B  00F7               	movwf	??_get_RFID
  2511  013C  0848               	movf	get_RFID@RF_serial_55bits+10,w
  2512  013D  39F0               	andlw	240
  2513  013E  0677               	xorwf	??_get_RFID,w
  2514  013F  1903               	btfsc	3,2
  2515  0140  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  2516  0141  3400               	retlw	0
  2517                           
  2518                           ;rfid125.c: 154: {
  2519                           ;rfid125.c: 156: return 1;
  2520  0142  3401               	retlw	1
  2521  0143                     __end_of_get_RFID:	
  2522  0143                     PL2:	
  2523  0143  0873               	movf	?_timerOut+1,w
  2524  0144  00D0               	movwf	get_RFID@timeOutVal+1
  2525  0145  0872               	movf	?_timerOut,w
  2526  0146  00CF               	movwf	get_RFID@timeOutVal
  2527  0147  0450               	iorwf	get_RFID@timeOutVal+1,w
  2528  0148  0008               	return
  2529  0149                     PL4:	
  2530  0149  084D               	movf	get_RFID@i,w
  2531  014A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2532  014B  0084               	movwf	4
  2533  014C  1383               	bcf	3,7	;select IRP bank0
  2534  014D  1003               	clrc
  2535  014E  0D80               	rlf	0,f
  2536  014F  0008               	return
  2537  0150                     PL5:	
  2538  0150  3096               	movlw	150
  2539  0151  00F2               	movwf	?_timerOut
  2540  0152  01F3               	clrf	?_timerOut+1
  2541  0153  084E               	movf	get_RFID@flag_RFID_last,w
  2542  0154  0008               	return
  2543                           
  2544                           	psect	text491
  2545  02BD                     __ptext491:	
  2546 ;; =============== function _get_RFID ends ============
  2547                           
  2548                           
  2549 ;; *************** function _eepromWriteByte *****************
  2550 ;; Defined at:
  2551 ;;		line 26 in file "ms82_eeprom.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  EEAddr          1    wreg     unsigned char 
  2554 ;;  EEData          1    2[COMMON] unsigned char 
  2555 ;; Auto vars:     Size  Location     Type
  2556 ;;  EEAddr          1    5[COMMON] unsigned char 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;		None               void
  2559 ;; Registers used:
  2560 ;;		wreg
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/20
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMMON   BANK0   BANK1
  2566 ;;      Params:         1       0       0
  2567 ;;      Locals:         1       0       0
  2568 ;;      Temps:          2       0       0
  2569 ;;      Totals:         4       0       0
  2570 ;;Total ram usage:        4 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    1
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_eepromWriteBlock
  2577 ;;		_main
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580  02BD                     _eepromWriteByte:	
  2581                           
  2582                           ; Regs used in _eepromWriteByte: [wreg]
  2583                           ;eepromWriteByte@EEAddr stored from wreg
  2584  02BD  00F5               	movwf	eepromWriteByte@EEAddr
  2585                           
  2586                           ;ms82_eeprom.c: 27: GIE = 0;
  2587  02BE  138B               	bcf	11,7
  2588  02BF                     l1597:	
  2589                           ;ms82_eeprom.c: 29: {
  2590                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  2591                           
  2592  02BF  1F8B               	btfss	11,7
  2593  02C0  2AC3               	goto	l6130
  2594  02C1  0064               	clrwdt	;#
  2595  02C2  2ABF               	goto	l1597
  2596  02C3                     l6130:	
  2597                           
  2598                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  2599  02C3  0875               	movf	eepromWriteByte@EEAddr,w
  2600  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  2601  02C5  009B               	movwf	27	;volatile
  2602                           
  2603                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  2604  02C6  0872               	movf	eepromWriteByte@EEData,w
  2605  02C7  009A               	movwf	26	;volatile
  2606  02C8  3034               	movlw	52
  2607                           
  2608                           ;ms82_eeprom.c: 33: EEIF = 0;
  2609  02C9  1283               	bcf	3,5	;RP0=0, select bank0
  2610  02CA  138C               	bcf	12,7
  2611                           
  2612                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  2613  02CB  1683               	bsf	3,5	;RP0=1, select bank1
  2614  02CC  009C               	movwf	28	;volatile
  2615                           
  2616                           ;ms82_eeprom.c: 35: WR = 1;
  2617  02CD  141D               	bsf	29,0
  2618  02CE                     l1600:	
  2619                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  2620                           
  2621  02CE  1683               	bsf	3,5	;RP0=1, select bank1
  2622  02CF  1C1D               	btfss	29,0
  2623  02D0  2AD3               	goto	l6136
  2624  02D1  0064               	clrwdt	;#
  2625  02D2  2ACE               	goto	l1600
  2626  02D3                     l6136:	
  2627                           
  2628                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  2629  02D3  3006               	movlw	6
  2630  02D4  00F4               	movwf	??_eepromWriteByte+1
  2631  02D5  3030               	movlw	48
  2632  02D6  00F3               	movwf	??_eepromWriteByte
  2633  02D7                     u1797:	
  2634  02D7  0BF3               	decfsz	??_eepromWriteByte,f
  2635  02D8  2AD7               	goto	u1797
  2636  02D9  0BF4               	decfsz	??_eepromWriteByte+1,f
  2637  02DA  2AD7               	goto	u1797
  2638  02DB  0064               	clrwdt
  2639                           
  2640                           ;ms82_eeprom.c: 38: }
  2641                           ;ms82_eeprom.c: 39: GIE = 1;
  2642  02DC  178B               	bsf	11,7
  2643  02DD  0008               	return
  2644  02DE                     __end_of_eepromWriteByte:	
  2645                           
  2646                           	psect	text492
  2647  03EA                     __ptext492:	
  2648 ;; =============== function _eepromWriteByte ends ============
  2649                           
  2650                           
  2651 ;; *************** function _eepromReadBlock *****************
  2652 ;; Defined at:
  2653 ;;		line 18 in file "ms82_eeprom.c"
  2654 ;; Parameters:    Size  Location     Type
  2655 ;;  addStart        1    wreg     unsigned char 
  2656 ;;  buff            1    4[COMMON] PTR unsigned char 
  2657 ;;		 -> buffTag(25), 
  2658 ;;  len             1    5[COMMON] unsigned char 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  addStart        1    7[COMMON] unsigned char 
  2661 ;;  i               1    8[COMMON] unsigned char 
  2662 ;; Return value:  Size  Location     Type
  2663 ;;		None               void
  2664 ;; Registers used:
  2665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2666 ;; Tracked objects:
  2667 ;;		On entry : 0/20
  2668 ;;		On exit  : 0/0
  2669 ;;		Unchanged: FFEDF/0
  2670 ;; Data sizes:     COMMON   BANK0   BANK1
  2671 ;;      Params:         2       0       0
  2672 ;;      Locals:         2       0       0
  2673 ;;      Temps:          1       0       0
  2674 ;;      Totals:         5       0       0
  2675 ;;Total ram usage:        5 bytes
  2676 ;; Hardware stack levels used:    1
  2677 ;; Hardware stack levels required when called:    2
  2678 ;; This function calls:
  2679 ;;		_eepromReadByte
  2680 ;; This function is called by:
  2681 ;;		_main
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684  03EA                     _eepromReadBlock:	
  2685                           
  2686                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2687                           ;eepromReadBlock@addStart stored from wreg
  2688  03EA  00F7               	movwf	eepromReadBlock@addStart
  2689                           
  2690                           ;ms82_eeprom.c: 19: unsigned char i;
  2691                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  2692  03EB  01F8               	clrf	eepromReadBlock@i
  2693  03EC                     l6126:	
  2694  03EC  0875               	movf	eepromReadBlock@len,w
  2695  03ED  0278               	subwf	eepromReadBlock@i,w
  2696  03EE  1803               	btfsc	3,0
  2697  03EF  0008               	return
  2698                           
  2699                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  2700  03F0  0878               	movf	eepromReadBlock@i,w
  2701  03F1  0774               	addwf	eepromReadBlock@buff,w
  2702  03F2  00F6               	movwf	??_eepromReadBlock
  2703  03F3  0084               	movwf	4
  2704  03F4  0878               	movf	eepromReadBlock@i,w
  2705  03F5  0777               	addwf	eepromReadBlock@addStart,w
  2706  03F6  2455               	fcall	_eepromReadByte
  2707  03F7  1383               	bcf	3,7	;select IRP bank0
  2708  03F8  0080               	movwf	0
  2709  03F9  0AF8               	incf	eepromReadBlock@i,f
  2710  03FA  2BEC               	goto	l6126
  2711  03FB                     __end_of_eepromReadBlock:	
  2712                           
  2713                           	psect	text493
  2714  044D                     __ptext493:	
  2715 ;; =============== function _eepromReadBlock ends ============
  2716                           
  2717                           
  2718 ;; *************** function _sys_init *****************
  2719 ;; Defined at:
  2720 ;;		line 3 in file "sysinit.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;		None
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;		None
  2725 ;; Return value:  Size  Location     Type
  2726 ;;		None               void
  2727 ;; Registers used:
  2728 ;;		wreg
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 20/20
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMMON   BANK0   BANK1
  2734 ;;      Params:         0       0       0
  2735 ;;      Locals:         0       0       0
  2736 ;;      Temps:          0       0       0
  2737 ;;      Totals:         0       0       0
  2738 ;;Total ram usage:        0 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    1
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_main
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747  044D                     _sys_init:	
  2748                           
  2749                           ;sysinit.c: 21: OSCCON = 0B01100001;
  2750                           
  2751                           ; Regs used in _sys_init: [wreg]
  2752  044D  3061               	movlw	97
  2753  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2754  044F  008F               	movwf	15	;volatile
  2755                           
  2756                           ;sysinit.c: 22: _nop();
  2757  0450  0000               	nop
  2758  0451                     l787:	
  2759                           ;sysinit.c: 28: while(HTS==0);
  2760                           
  2761  0451  1683               	bsf	3,5	;RP0=1, select bank1
  2762  0452  190F               	btfsc	15,2
  2763  0453  0008               	return
  2764  0454  2C51               	goto	l787
  2765  0455                     __end_of_sys_init:	
  2766                           
  2767                           	psect	text494
  2768  0378                     __ptext494:	
  2769 ;; =============== function _sys_init ends ============
  2770                           
  2771                           
  2772 ;; *************** function ___lbdiv *****************
  2773 ;; Defined at:
  2774 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  dividend        1    wreg     unsigned char 
  2777 ;;  divisor         1    2[COMMON] unsigned char 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  dividend        1    3[COMMON] unsigned char 
  2780 ;;  quotient        1    5[COMMON] unsigned char 
  2781 ;;  counter         1    4[COMMON] unsigned char 
  2782 ;; Return value:  Size  Location     Type
  2783 ;;                  1    wreg      unsigned char 
  2784 ;; Registers used:
  2785 ;;		wreg, status,2, status,0
  2786 ;; Tracked objects:
  2787 ;;		On entry : 20/0
  2788 ;;		On exit  : 20/0
  2789 ;;		Unchanged: FFFDF/0
  2790 ;; Data sizes:     COMMON   BANK0   BANK1
  2791 ;;      Params:         1       0       0
  2792 ;;      Locals:         3       0       0
  2793 ;;      Temps:          0       0       0
  2794 ;;      Totals:         4       0       0
  2795 ;;Total ram usage:        4 bytes
  2796 ;; Hardware stack levels used:    1
  2797 ;; Hardware stack levels required when called:    1
  2798 ;; This function calls:
  2799 ;;		Nothing
  2800 ;; This function is called by:
  2801 ;;		_get_RFID
  2802 ;;		_id_search
  2803 ;; This function uses a non-reentrant model
  2804 ;;
  2805  0378                     ___lbdiv:	
  2806                           
  2807                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2808                           ;___lbdiv@dividend stored from wreg
  2809  0378  00F3               	movwf	___lbdiv@dividend
  2810  0379  01F5               	clrf	___lbdiv@quotient
  2811  037A  0872               	movf	___lbdiv@divisor,w
  2812  037B  1903               	btfsc	3,2
  2813  037C  2B91               	goto	l6112
  2814  037D  01F4               	clrf	___lbdiv@counter
  2815  037E                     l6098:	
  2816  037E  0AF4               	incf	___lbdiv@counter,f
  2817  037F  1BF2               	btfsc	___lbdiv@divisor,7
  2818  0380  2B84               	goto	l4908
  2819  0381  1003               	clrc
  2820  0382  0DF2               	rlf	___lbdiv@divisor,f
  2821  0383  2B7E               	goto	l6098
  2822  0384                     l4908:	
  2823  0384  1003               	clrc
  2824  0385  0DF5               	rlf	___lbdiv@quotient,f
  2825  0386  0872               	movf	___lbdiv@divisor,w
  2826  0387  0273               	subwf	___lbdiv@dividend,w
  2827  0388  1C03               	skipc
  2828  0389  2B8E               	goto	L2
  2829  038A  0872               	movf	___lbdiv@divisor,w
  2830  038B  02F3               	subwf	___lbdiv@dividend,f
  2831  038C  1475               	bsf	___lbdiv@quotient,0
  2832  038D  1003               	clrc
  2833  038E                     L2:	
  2834  038E  0CF2               	rrf	___lbdiv@divisor,f
  2835  038F  0BF4               	decfsz	___lbdiv@counter,f
  2836  0390  2B84               	goto	l4908
  2837  0391                     l6112:	
  2838  0391  0875               	movf	___lbdiv@quotient,w
  2839  0392  0008               	return
  2840  0393                     __end_of___lbdiv:	
  2841                           
  2842                           	psect	text495
  2843  0429                     __ptext495:	
  2844 ;; =============== function ___lbdiv ends ============
  2845                           
  2846                           
  2847 ;; *************** function ___bmul *****************
  2848 ;; Defined at:
  2849 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;  multiplier      1    wreg     unsigned char 
  2852 ;;  multiplicand    1    2[COMMON] unsigned char 
  2853 ;; Auto vars:     Size  Location     Type
  2854 ;;  multiplier      1    4[COMMON] unsigned char 
  2855 ;;  product         1    3[COMMON] unsigned char 
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      unsigned char 
  2858 ;; Registers used:
  2859 ;;		wreg, status,2, status,0
  2860 ;; Tracked objects:
  2861 ;;		On entry : 20/0
  2862 ;;		On exit  : 20/0
  2863 ;;		Unchanged: FFFDF/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1
  2865 ;;      Params:         1       0       0
  2866 ;;      Locals:         2       0       0
  2867 ;;      Temps:          0       0       0
  2868 ;;      Totals:         3       0       0
  2869 ;;Total ram usage:        3 bytes
  2870 ;; Hardware stack levels used:    1
  2871 ;; Hardware stack levels required when called:    1
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_id_replate
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878  0429                     ___bmul:	
  2879                           
  2880                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2881                           ;___bmul@multiplier stored from wreg
  2882  0429  00F4               	movwf	___bmul@multiplier
  2883  042A  01F3               	clrf	___bmul@product
  2884  042B                     l6078:	
  2885  042B  0872               	movf	___bmul@multiplicand,w
  2886  042C  1874               	btfsc	___bmul@multiplier,0
  2887  042D  07F3               	addwf	___bmul@product,f
  2888  042E  1003               	clrc
  2889  042F  0DF2               	rlf	___bmul@multiplicand,f
  2890  0430  1003               	clrc
  2891  0431  0CF4               	rrf	___bmul@multiplier,f
  2892  0432  08F4               	movf	___bmul@multiplier,f
  2893  0433  1D03               	skipz
  2894  0434  2C2B               	goto	l6078
  2895  0435  0873               	movf	___bmul@product,w
  2896  0436  0008               	return
  2897  0437                     __end_of___bmul:	
  2898                           
  2899                           	psect	text496
  2900  0443                     __ptext496:	
  2901 ;; =============== function ___bmul ends ============
  2902                           
  2903                           
  2904 ;; *************** function _setState *****************
  2905 ;; Defined at:
  2906 ;;		line 152 in file "MAIN.C"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;  stt             1    wreg     unsigned char 
  2909 ;;  _tOut           2    2[COMMON] unsigned int 
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;  stt             1    4[COMMON] unsigned char 
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, status,2
  2916 ;; Tracked objects:
  2917 ;;		On entry : 0/20
  2918 ;;		On exit  : 20/0
  2919 ;;		Unchanged: FFFDF/0
  2920 ;; Data sizes:     COMMON   BANK0   BANK1
  2921 ;;      Params:         2       0       0
  2922 ;;      Locals:         1       0       0
  2923 ;;      Temps:          0       0       0
  2924 ;;      Totals:         3       0       0
  2925 ;;Total ram usage:        3 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:    1
  2928 ;; This function calls:
  2929 ;;		Nothing
  2930 ;; This function is called by:
  2931 ;;		_main
  2932 ;; This function uses a non-reentrant model
  2933 ;;
  2934  0443                     _setState:	
  2935                           
  2936                           ; Regs used in _setState: [wreg+status,2]
  2937                           ;setState@stt stored from wreg
  2938  0443  00F4               	movwf	setState@stt
  2939                           
  2940                           ;MAIN.C: 154: mtState = stt;
  2941  0444  1283               	bcf	3,5	;RP0=0, select bank0
  2942  0445  00DC               	movwf	_mtState
  2943                           
  2944                           ;MAIN.C: 155: timeTick = 0;
  2945  0446  01DA               	clrf	_timeTick
  2946  0447  01DB               	clrf	_timeTick+1
  2947                           
  2948                           ;MAIN.C: 156: timeOut = _tOut;
  2949  0448  0873               	movf	setState@_tOut+1,w
  2950  0449  00D9               	movwf	_timeOut+1
  2951  044A  0872               	movf	setState@_tOut,w
  2952  044B  00D8               	movwf	_timeOut
  2953  044C  0008               	return
  2954  044D                     __end_of_setState:	
  2955                           
  2956                           	psect	text497
  2957  02FD                     __ptext497:	
  2958 ;; =============== function _setState ends ============
  2959                           
  2960                           
  2961 ;; *************** function _SET_EPWM_ON *****************
  2962 ;; Defined at:
  2963 ;;		line 11 in file "ms82_pwm.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;		None               void
  2970 ;; Registers used:
  2971 ;;		wreg, status,2
  2972 ;; Tracked objects:
  2973 ;;		On entry : 20/20
  2974 ;;		On exit  : 20/20
  2975 ;;		Unchanged: FFE00/0
  2976 ;; Data sizes:     COMMON   BANK0   BANK1
  2977 ;;      Params:         0       0       0
  2978 ;;      Locals:         0       0       0
  2979 ;;      Temps:          0       0       0
  2980 ;;      Totals:         0       0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:    1
  2984 ;; This function calls:
  2985 ;;		Nothing
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990  02FD                     _SET_EPWM_ON:	
  2991                           
  2992                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  2993                           
  2994                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  2995  02FD  1687               	bsf	7,5	;volatile
  2996                           
  2997                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  2998  02FE  3001               	movlw	1
  2999  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  3000  0300  0092               	movwf	18	;volatile
  3001                           
  3002                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  3003  0301  1683               	bsf	3,5	;RP0=1, select bank1
  3004  0302  019E               	clrf	30	;volatile
  3005                           
  3006                           ;ms82_pwm.c: 15: PR2H = 0;
  3007  0303  0192               	clrf	18	;volatile
  3008                           
  3009                           ;ms82_pwm.c: 16: PR2L = 7;
  3010  0304  3007               	movlw	7
  3011  0305  0091               	movwf	17	;volatile
  3012                           
  3013                           ;ms82_pwm.c: 17: P1ADTH = 0;
  3014  0306  1283               	bcf	3,5	;RP0=0, select bank0
  3015  0307  0194               	clrf	20	;volatile
  3016                           
  3017                           ;ms82_pwm.c: 18: P1ADTL = 4;
  3018  0308  3004               	movlw	4
  3019  0309  008E               	movwf	14	;volatile
  3020                           
  3021                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  3022  030A  3001               	movlw	1
  3023  030B  1683               	bsf	3,5	;RP0=1, select bank1
  3024  030C  0090               	movwf	16	;volatile
  3025                           
  3026                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  3027  030D  0199               	clrf	25	;volatile
  3028                           
  3029                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  3030  030E  1283               	bcf	3,5	;RP0=0, select bank0
  3031  030F  0196               	clrf	22	;volatile
  3032                           
  3033                           ;ms82_pwm.c: 24: TMR2H = 0;
  3034  0310  0193               	clrf	19	;volatile
  3035                           
  3036                           ;ms82_pwm.c: 25: TMR2L = 0;
  3037  0311  0191               	clrf	17	;volatile
  3038                           
  3039                           ;ms82_pwm.c: 26: TMR2IF = 0;
  3040  0312  108C               	bcf	12,1
  3041                           
  3042                           ;ms82_pwm.c: 27: TMR2ON = 1;
  3043  0313  1512               	bsf	18,2
  3044  0314                     l3294:	
  3045                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  3046                           
  3047  0314  1283               	bcf	3,5	;RP0=0, select bank0
  3048  0315  188C               	btfsc	12,1
  3049  0316  2B19               	goto	l3296
  3050  0317  0064               	clrwdt	;#
  3051  0318  2B14               	goto	l3294
  3052  0319                     l3296:	
  3053                           
  3054                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  3055  0319  1683               	bsf	3,5	;RP0=1, select bank1
  3056  031A  1287               	bcf	7,5	;volatile
  3057  031B  0008               	return
  3058  031C                     __end_of_SET_EPWM_ON:	
  3059                           
  3060                           	psect	text498
  3061  031C                     __ptext498:	
  3062 ;; =============== function _SET_EPWM_ON ends ============
  3063                           
  3064                           
  3065 ;; *************** function _timerOut *****************
  3066 ;; Defined at:
  3067 ;;		line 6 in file "rfid125.c"
  3068 ;; Parameters:    Size  Location     Type
  3069 ;;  Logic           1    wreg     unsigned char 
  3070 ;;  time            2    2[COMMON] unsigned int 
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;  Logic           1    4[COMMON] unsigned char 
  3073 ;;  CurTimer        2    5[COMMON] unsigned int 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  2    2[COMMON] unsigned int 
  3076 ;; Registers used:
  3077 ;;		wreg, status,2
  3078 ;; Tracked objects:
  3079 ;;		On entry : 20/0
  3080 ;;		On exit  : 20/0
  3081 ;;		Unchanged: FFFDF/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1
  3083 ;;      Params:         2       0       0
  3084 ;;      Locals:         3       0       0
  3085 ;;      Temps:          0       0       0
  3086 ;;      Totals:         5       0       0
  3087 ;;Total ram usage:        5 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    1
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_get_RFID
  3094 ;; This function uses a non-reentrant model
  3095 ;;
  3096  031C                     _timerOut:	
  3097                           
  3098                           ; Regs used in _timerOut: [wreg+status,2]
  3099                           ;timerOut@Logic stored from wreg
  3100  031C  00F4               	movwf	timerOut@Logic
  3101                           
  3102                           ;rfid125.c: 7: unsigned int CurTimer;
  3103                           ;rfid125.c: 8: T0ON = 0;
  3104  031D  119F               	bcf	31,3
  3105                           
  3106                           ;rfid125.c: 9: TMR0 = 0;
  3107  031E  0181               	clrf	1	;volatile
  3108                           
  3109                           ;rfid125.c: 10: T0IF = 0;
  3110  031F  110B               	bcf	11,2
  3111                           
  3112                           ;rfid125.c: 11: T0ON = 1;
  3113  0320  159F               	bsf	31,3
  3114  0321                     l6038:	
  3115                           ;rfid125.c: 12: while(RA5==Logic){
  3116                           
  3117  0321  3000               	movlw	0
  3118  0322  1A85               	btfsc	5,5
  3119  0323  3001               	movlw	1
  3120  0324  0674               	xorwf	timerOut@Logic,w
  3121  0325  1D03               	btfss	3,2
  3122  0326  2B36               	goto	l6040
  3123                           
  3124                           ;rfid125.c: 13: CurTimer= (0 <<8 )| TMR0;
  3125  0327  01F5               	clrf	timerOut@CurTimer
  3126  0328  01F6               	clrf	timerOut@CurTimer+1
  3127  0329  0801               	movf	1,w	;volatile
  3128  032A  04F5               	iorwf	timerOut@CurTimer,f
  3129                           
  3130                           ;rfid125.c: 14: if(CurTimer>time)
  3131  032B  0876               	movf	timerOut@CurTimer+1,w
  3132  032C  0273               	subwf	timerOut@time+1,w
  3133  032D  1D03               	skipz
  3134  032E  2B31               	goto	u925
  3135  032F  0875               	movf	timerOut@CurTimer,w
  3136  0330  0272               	subwf	timerOut@time,w
  3137  0331                     u925:	
  3138  0331  1803               	skipnc
  3139  0332  2B21               	goto	l6038
  3140                           
  3141                           ;rfid125.c: 15: return 0;
  3142  0333  01F2               	clrf	?_timerOut
  3143  0334  01F3               	clrf	?_timerOut+1
  3144  0335  0008               	return
  3145  0336                     l6040:	
  3146                           
  3147                           ;rfid125.c: 16: }
  3148                           ;rfid125.c: 17: return CurTimer;
  3149  0336  0876               	movf	timerOut@CurTimer+1,w
  3150  0337  00F3               	movwf	?_timerOut+1
  3151  0338  0875               	movf	timerOut@CurTimer,w
  3152  0339  00F2               	movwf	?_timerOut
  3153  033A  0008               	return
  3154  033B                     __end_of_timerOut:	
  3155                           
  3156                           	psect	text499
  3157  033B                     __ptext499:	
  3158 ;; =============== function _timerOut ends ============
  3159                           
  3160                           
  3161 ;; *************** function _comArr *****************
  3162 ;; Defined at:
  3163 ;;		line 52 in file "ms82_eeprom.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  arr1            1    wreg     PTR unsigned char 
  3166 ;;		 -> keyID(5), 
  3167 ;;  arr2            1    2[COMMON] PTR unsigned char 
  3168 ;;		 -> buffTag(25), 
  3169 ;;  len1            1    3[COMMON] unsigned char 
  3170 ;;  len2            1    4[COMMON] unsigned char 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  arr1            1    8[COMMON] PTR unsigned char 
  3173 ;;		 -> keyID(5), 
  3174 ;;  i               1    9[COMMON] unsigned char 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;                  1    wreg      unsigned char 
  3177 ;; Registers used:
  3178 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3179 ;; Tracked objects:
  3180 ;;		On entry : 20/0
  3181 ;;		On exit  : 20/0
  3182 ;;		Unchanged: FFEDF/0
  3183 ;; Data sizes:     COMMON   BANK0   BANK1
  3184 ;;      Params:         3       0       0
  3185 ;;      Locals:         2       0       0
  3186 ;;      Temps:          3       0       0
  3187 ;;      Totals:         8       0       0
  3188 ;;Total ram usage:        8 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:    1
  3191 ;; This function calls:
  3192 ;;		Nothing
  3193 ;; This function is called by:
  3194 ;;		_id_search
  3195 ;; This function uses a non-reentrant model
  3196 ;;
  3197  033B                     _comArr:	
  3198                           
  3199                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  3200                           ;comArr@arr1 stored from wreg
  3201  033B  00F8               	movwf	comArr@arr1
  3202                           
  3203                           ;ms82_eeprom.c: 53: unsigned char i;
  3204                           ;ms82_eeprom.c: 55: if(len1!=len2)
  3205  033C  0873               	movf	comArr@len1,w
  3206  033D  0674               	xorwf	comArr@len2,w
  3207  033E  1D03               	btfss	3,2
  3208                           
  3209                           ;ms82_eeprom.c: 56: return 0;
  3210  033F  3400               	retlw	0
  3211                           
  3212                           ;ms82_eeprom.c: 57: else{
  3213                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  3214  0340  01F9               	clrf	comArr@i
  3215  0341                     l6006:	
  3216  0341  0873               	movf	comArr@len1,w
  3217  0342  0279               	subwf	comArr@i,w
  3218                           
  3219                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  3220  0343  0879               	movf	comArr@i,w
  3221  0344  1803               	btfsc	3,0
  3222  0345  2B56               	goto	L3
  3223  0346  0772               	addwf	comArr@arr2,w
  3224  0347  00F5               	movwf	??_comArr
  3225  0348  0084               	movwf	4
  3226  0349  1383               	bcf	3,7	;select IRP bank0
  3227  034A  0800               	movf	0,w
  3228  034B  00F6               	movwf	??_comArr+1
  3229  034C  0879               	movf	comArr@i,w
  3230  034D  0778               	addwf	comArr@arr1,w
  3231  034E  00F7               	movwf	??_comArr+2
  3232  034F  0084               	movwf	4
  3233  0350  0800               	movf	0,w
  3234  0351  0676               	xorwf	??_comArr+1,w
  3235  0352  1D03               	btfss	3,2
  3236  0353  3400               	retlw	0
  3237  0354  0AF9               	incf	comArr@i,f
  3238  0355  2B41               	goto	l6006
  3239  0356                     L3:	
  3240                           ;ms82_eeprom.c: 61: }
  3241                           ;ms82_eeprom.c: 62: }
  3242                           ;ms82_eeprom.c: 63: if(i==len1)
  3243                           
  3244  0356  0673               	xorwf	comArr@len1,w
  3245  0357  1903               	btfsc	3,2
  3246                           
  3247                           ;ms82_eeprom.c: 64: return 1;
  3248  0358  3401               	retlw	1
  3249  0359  3400               	retlw	0
  3250  035A                     __end_of_comArr:	
  3251                           
  3252                           	psect	text500
  3253  0455                     __ptext500:	
  3254 ;; =============== function _comArr ends ============
  3255                           
  3256                           
  3257 ;; *************** function _eepromReadByte *****************
  3258 ;; Defined at:
  3259 ;;		line 7 in file "ms82_eeprom.c"
  3260 ;; Parameters:    Size  Location     Type
  3261 ;;  EEAddr          1    wreg     unsigned char 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  EEAddr          1    2[COMMON] unsigned char 
  3264 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      unsigned char 
  3267 ;; Registers used:
  3268 ;;		wreg
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/20
  3271 ;;		On exit  : 20/20
  3272 ;;		Unchanged: FFFDF/0
  3273 ;; Data sizes:     COMMON   BANK0   BANK1
  3274 ;;      Params:         0       0       0
  3275 ;;      Locals:         2       0       0
  3276 ;;      Temps:          0       0       0
  3277 ;;      Totals:         2       0       0
  3278 ;;Total ram usage:        2 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    1
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_eepromReadBlock
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288  0455                     _eepromReadByte:	
  3289                           
  3290                           ; Regs used in _eepromReadByte: [wreg]
  3291                           ;eepromReadByte@EEAddr stored from wreg
  3292  0455  00F2               	movwf	eepromReadByte@EEAddr
  3293                           
  3294                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3295                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3296  0456  1683               	bsf	3,5	;RP0=1, select bank1
  3297  0457  009B               	movwf	27	;volatile
  3298                           
  3299                           ;ms82_eeprom.c: 11: RD = 1;
  3300  0458  141C               	bsf	28,0
  3301                           
  3302                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3303  0459  081A               	movf	26,w	;volatile
  3304  045A  00F3               	movwf	eepromReadByte@ReEepromData
  3305                           
  3306                           ;ms82_eeprom.c: 13: RD = 0;
  3307  045B  101C               	bcf	28,0
  3308                           
  3309                           ;ms82_eeprom.c: 14: return ReEepromData;
  3310  045C  0008               	return
  3311  045D                     __end_of_eepromReadByte:	
  3312                           
  3313                           	psect	text501
  3314  0437                     __ptext501:	
  3315 ;; =============== function _eepromReadByte ends ============
  3316                           
  3317                           
  3318 ;; *************** function _int_init *****************
  3319 ;; Defined at:
  3320 ;;		line 66 in file "sysinit.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;		None
  3323 ;; Auto vars:     Size  Location     Type
  3324 ;;		None
  3325 ;; Return value:  Size  Location     Type
  3326 ;;		None               void
  3327 ;; Registers used:
  3328 ;;		status,2
  3329 ;; Tracked objects:
  3330 ;;		On entry : 20/20
  3331 ;;		On exit  : 20/20
  3332 ;;		Unchanged: FFFDF/0
  3333 ;; Data sizes:     COMMON   BANK0   BANK1
  3334 ;;      Params:         0       0       0
  3335 ;;      Locals:         0       0       0
  3336 ;;      Temps:          0       0       0
  3337 ;;      Totals:         0       0       0
  3338 ;;Total ram usage:        0 bytes
  3339 ;; Hardware stack levels used:    1
  3340 ;; Hardware stack levels required when called:    1
  3341 ;; This function calls:
  3342 ;;		Nothing
  3343 ;; This function is called by:
  3344 ;;		_main
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347  0437                     _int_init:	
  3348                           
  3349                           ;sysinit.c: 72: INTCON = 0B00000000;
  3350                           
  3351                           ; Regs used in _int_init: [status,2]
  3352  0437  018B               	clrf	11	;volatile
  3353                           
  3354                           ;sysinit.c: 73: PIE1 = 0B00000000;
  3355  0438  018C               	clrf	12	;volatile
  3356                           
  3357                           ;sysinit.c: 74: PIR1 = 0B00000000;
  3358  0439  1283               	bcf	3,5	;RP0=0, select bank0
  3359  043A  018C               	clrf	12	;volatile
  3360                           
  3361                           ;sysinit.c: 87: T0IF = 0;
  3362  043B  110B               	bcf	11,2
  3363                           
  3364                           ;sysinit.c: 88: T0IE = 0;
  3365  043C  128B               	bcf	11,5
  3366                           
  3367                           ;sysinit.c: 92: TMR2IF = 0;
  3368  043D  108C               	bcf	12,1
  3369                           
  3370                           ;sysinit.c: 93: TMR2IE = 1;
  3371  043E  1683               	bsf	3,5	;RP0=1, select bank1
  3372  043F  148C               	bsf	12,1
  3373                           
  3374                           ;sysinit.c: 99: PEIE = 0;
  3375  0440  130B               	bcf	11,6
  3376                           
  3377                           ;sysinit.c: 101: GIE = 1;
  3378  0441  178B               	bsf	11,7
  3379  0442  0008               	return
  3380  0443                     __end_of_int_init:	
  3381                           
  3382                           	psect	text502
  3383  046B                     __ptext502:	
  3384 ;; =============== function _int_init ends ============
  3385                           
  3386                           
  3387 ;; *************** function _timer_init *****************
  3388 ;; Defined at:
  3389 ;;		line 44 in file "sysinit.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;		None
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg
  3398 ;; Tracked objects:
  3399 ;;		On entry : 20/20
  3400 ;;		On exit  : 20/20
  3401 ;;		Unchanged: FFFDF/0
  3402 ;; Data sizes:     COMMON   BANK0   BANK1
  3403 ;;      Params:         0       0       0
  3404 ;;      Locals:         0       0       0
  3405 ;;      Temps:          0       0       0
  3406 ;;      Totals:         0       0       0
  3407 ;;Total ram usage:        0 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    1
  3410 ;; This function calls:
  3411 ;;		Nothing
  3412 ;; This function is called by:
  3413 ;;		_main
  3414 ;; This function uses a non-reentrant model
  3415 ;;
  3416  046B                     _timer_init:	
  3417                           
  3418                           ;sysinit.c: 46: OPTION = 0B00000011;
  3419                           
  3420                           ; Regs used in _timer_init: [wreg]
  3421  046B  3003               	movlw	3
  3422  046C  0081               	movwf	1	;volatile
  3423  046D  0008               	return
  3424  046E                     __end_of_timer_init:	
  3425                           
  3426                           	psect	text503
  3427  041A                     __ptext503:	
  3428 ;; =============== function _timer_init ends ============
  3429                           
  3430                           
  3431 ;; *************** function _gpio_init *****************
  3432 ;; Defined at:
  3433 ;;		line 32 in file "sysinit.c"
  3434 ;; Parameters:    Size  Location     Type
  3435 ;;		None
  3436 ;; Auto vars:     Size  Location     Type
  3437 ;;		None
  3438 ;; Return value:  Size  Location     Type
  3439 ;;		None               void
  3440 ;; Registers used:
  3441 ;;		wreg, status,2
  3442 ;; Tracked objects:
  3443 ;;		On entry : 20/20
  3444 ;;		On exit  : 20/20
  3445 ;;		Unchanged: FFFDF/0
  3446 ;; Data sizes:     COMMON   BANK0   BANK1
  3447 ;;      Params:         0       0       0
  3448 ;;      Locals:         0       0       0
  3449 ;;      Temps:          0       0       0
  3450 ;;      Totals:         0       0       0
  3451 ;;Total ram usage:        0 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; Hardware stack levels required when called:    1
  3454 ;; This function calls:
  3455 ;;		Nothing
  3456 ;; This function is called by:
  3457 ;;		_main
  3458 ;; This function uses a non-reentrant model
  3459 ;;
  3460  041A                     _gpio_init:	
  3461                           
  3462                           ;sysinit.c: 34: PORTA = 0B00000000;
  3463                           
  3464                           ; Regs used in _gpio_init: [wreg+status,2]
  3465  041A  1283               	bcf	3,5	;RP0=0, select bank0
  3466  041B  0185               	clrf	5	;volatile
  3467                           
  3468                           ;sysinit.c: 35: TRISA = 0B01110011;
  3469  041C  3073               	movlw	115
  3470  041D  1683               	bsf	3,5	;RP0=1, select bank1
  3471  041E  0085               	movwf	5	;volatile
  3472                           
  3473                           ;sysinit.c: 36: WPUA = 0B10000000;
  3474  041F  3080               	movlw	128
  3475  0420  0095               	movwf	21	;volatile
  3476                           
  3477                           ;sysinit.c: 37: PORTC = 0B00000010;
  3478  0421  3002               	movlw	2
  3479  0422  1283               	bcf	3,5	;RP0=0, select bank0
  3480  0423  0087               	movwf	7	;volatile
  3481                           
  3482                           ;sysinit.c: 38: TRISC = 0B11111110;
  3483  0424  30FE               	movlw	254
  3484  0425  1683               	bsf	3,5	;RP0=1, select bank1
  3485  0426  0087               	movwf	7	;volatile
  3486                           
  3487                           ;sysinit.c: 39: WPUC = 0B00000000;
  3488  0427  0193               	clrf	19	;volatile
  3489  0428  0008               	return
  3490  0429                     __end_of_gpio_init:	
  3491                           
  3492                           	psect	text504
  3493  0464                     __ptext504:	
  3494 ;; =============== function _gpio_init ends ============
  3495                           
  3496                           
  3497 ;; *************** function _ISR *****************
  3498 ;; Defined at:
  3499 ;;		line 89 in file "MAIN.C"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;		None
  3504 ;; Return value:  Size  Location     Type
  3505 ;;		None               void
  3506 ;; Registers used:
  3507 ;;		None
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: FFFFF/0
  3512 ;; Data sizes:     COMMON   BANK0   BANK1
  3513 ;;      Params:         0       0       0
  3514 ;;      Locals:         0       0       0
  3515 ;;      Temps:          2       0       0
  3516 ;;      Totals:         2       0       0
  3517 ;;Total ram usage:        2 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; This function calls:
  3520 ;;		Nothing
  3521 ;; This function is called by:
  3522 ;;		Interrupt level 1
  3523 ;; This function uses a non-reentrant model
  3524 ;;
  3525  0464                     _ISR:	
  3526  0464  0871               	movf	??_ISR+1,w
  3527  0465  008A               	movwf	10
  3528  0466  0E70               	swapf	??_ISR^(0+-128),w
  3529  0467  0083               	movwf	3
  3530  0468  0EFE               	swapf	126,f
  3531  0469  0E7E               	swapf	126,w
  3532  046A  0009               	retfie
  3533  046B                     __end_of_ISR:	
  3534                           
  3535                           	psect	intentry
  3536  0004                     __pintentry:	
  3537                           ; Regs used in _ISR: []
  3538                           
  3539  0004                     interrupt_function:	
  3540  007E                     saved_w	set	btemp
  3541  0004  00FE               	movwf	btemp
  3542  0005  0E03               	swapf	3,w
  3543  0006  00F0               	movwf	??_ISR
  3544  0007  080A               	movf	10,w
  3545  0008  00F1               	movwf	??_ISR+1
  3546  0009  2C64               	ljmp	_ISR
  3547                           
  3548                           	psect	text505
  3549  0000                     __ptext505:	
  3550 ;; =============== function _ISR ends ============
  3551                           
  3552  007E                     btemp	set	126	;btemp
  3553  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sat Feb 22 11:47:49 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         _C1R 08CA  
                       _C2R 08D2                         l790 0000                         l793 0000  
                       l787 0451                         l796 0000                         l799 0000  
                       _GIE 005F                         _RA3 002B                         _RC0 0038  
                       _RA5 002D                         _HTS 047A                         _ISR 0464  
                       _SR0 0CF6                         _SR1 0CF7                         _VR0 08C0  
                       u925 0331                         _VR1 08C1                         _VR2 08C2  
                       _VR3 08C3                         _VRR 08C5                         fsr0 0004  
                       indf 0000            get_RFID@even_col 004A            get_RFID@even_row 004B  
               main@idState 0055                        S6618 045D                        ?_ISR 0070  
                      _C1OE 08CD                        l1600 02CE                        l1603 0000  
                      _C2OE 08D5                        _C1ON 08CF                        l1609 0000  
                      l4131 0000                        l4203 0276                        l4140 0000  
                      _C2ON 08D7                        l4205 027D                        l4119 0000  
                      l1594 0000                        l2459 0029                        l1588 0000  
                      l6020 0000                        l4156 0000                        l4148 0000  
                      l1597 02BF                        l6006 0341                        l6030 0000  
                      l6022 0000                        l3294 0314                        l6110 0000  
                      l6102 0000                        l2478 0075                        l6040 0336  
                      l6032 0000                        l6024 0000                        l3296 0319  
                      l6112 0391                        l6120 0000                        l6200 0054  
                      l3297 0000                        l6026 0000                        l6050 0000  
                      l6106 0000                        l6130 02C3                        l6210 0000  
                      l6202 0000                        l4178 022D                        l2499 00D5  
                      l6060 0000                        l6052 0000                        l6044 0000  
                      l6116 0000                        l6124 0000                        l6132 0000  
                      l6300 00D8                        l6212 006A                        l6204 0057  
                      l6140 0000                        l6038 0321                        l6062 0000  
                      l6054 0000                        l6046 0000                        l6070 0000  
                      l6118 0000                        l6126 03EC                        l6134 0000  
                      l6302 0000                        l6222 0000                        l6214 0000  
                      l6142 0000                        l6064 0000                        l6056 0000  
                      l6048 0000                        l6072 0000                        l6136 02D3  
                      l6128 0000                        l6312 00E3                        l6216 0000  
                      l6208 0061                        l6224 0079                        l6232 002C  
                      l6144 000E                        l6400 0000                        l6066 0000  
                      l6058 0000                        l6074 0000                        l6138 0000  
                      l6322 00ED                        l6314 0000                        l6250 0000  
                      l6234 0084                        l6226 0000                        l6162 0000  
                      l6154 0000                        l6146 0000                        l6068 0000  
                      l6084 0000                        l6076 0000                        l6092 0000  
                      l6340 0000                        l6324 0000                        l6316 0000  
                      l6260 009C                        l6228 007E                        l6404 0000  
                      l6412 03C4                        l6420 0000                        l6500 0000  
                      l6086 0000                        l6078 042B                        l6094 0000  
                      l6350 0000                        l6342 0129                        l6334 0000  
                      l6326 0000                        l6262 0000                        l6246 0088  
                      l6190 0049                        l6174 0031                        l6166 0000  
                      l6406 0000                        l6422 0000                        l6414 0000  
                      l6510 0000                        l6502 01D0                        l4911 0000  
                      l6096 0000                        l6344 0000                        l6280 00B7  
                      l6264 00A5                        l6248 0000                        l6176 0000  
                      l6408 0000                        l6424 0000                        l6416 0000  
                      l6432 0000                        l6520 0000                        l6512 0000  
                      l6440 0000                        l6098 037E                        l6346 0000  
                      l6338 011F                        l6290 0000                        l6274 00B0  
                      l6194 0000                        l6186 0040                        l6362 0000  
                      l6426 0000                        l6418 0000                        l6434 02F0  
                      l6530 0203                        l6514 01E5                        l6450 0000  
                      l6442 0000                        l4908 0384                        l6348 0000  
                      l6292 0000                        l6284 00C1                        l6276 0000  
                      l6268 0000                        l6188 0000                        l6428 0000  
                      l6540 0000                        l6524 0000                        l6508 0000  
                      l6452 0000                        l6444 0000                        l6436 0000  
                      l6286 0000                        l6278 0000                        l6366 03FC  
                      l6382 0000                        l6374 0395                        l6550 0000  
                      l6542 0000                        l6526 0000                        l6470 0000  
                      l6462 0187                        l6454 0000                        l6446 0000  
                      l6438 0000                        l6288 00CA                        l6368 0000  
                      l6392 0000                        l6536 0000                        l6544 021D  
                      l6528 01FE                        l6480 01AB                        l6472 0000  
                      l6552 023A                        l6464 0000                        l6456 0000  
                      l6448 0000                        l6298 0000                        l6394 03DA  
                      l6562 0255                        l6570 0266                        l6554 0000  
                      l6490 01BC                        l6482 0000                        l6474 019E  
                      l6466 0000                        l6458 0000                        l4875 0000  
                      l6388 0000                        l6396 0000                        l6580 027E  
                      l6564 025B                        l6572 0271                        l6556 0247  
                      l6492 0000                        l6484 0000                        l6548 0222  
                      l6468 0193                        l6398 0000                        l6566 0261  
                      l6486 0000                        l5960 0000                        l6576 0277  
                      l6496 0000                        l6488 0000                        l5962 0000  
                      l5954 0000                        l5970 0000                        l6498 0000  
                      l5956 0000                        l5964 0000                        l5972 0000  
                      l5980 0000                        l5958 0000                        l5974 0000  
                      l5966 0000                        l5982 0000                        l5976 0000  
                      l5968 0000                        l5984 0000                        l5978 0000  
                      l5988 0000                        _EEIF 0067                        _ANS0 08F0  
                      _ANS1 08F1                        _ANS2 08F2                        _ANS3 08F3  
                      _ANS4 08F4                        _ANS5 08F5                        _ANS6 08F6  
                      _ANS7 08F7                        _ANS8 08F8                        _ANS9 08F9  
                      _P1OE 0090                        _T0IE 005D                        _T0IF 005A  
                      _T0ON 00FB                        _IOCB 0116                        u1414 00F6  
                      u1415 00F4                        u1725 0252                        _PIE1 008C  
                      u1757 016B                        u1767 0234                        u1777 0241  
                      u1787 0405                        _PEIE 005E                        u1797 02D7  
                      _PR2H 0092                        _PR2L 0091                        _PIR1 000C  
                      _TMR0 0001                        _STRA 0CE8                        _STRB 0CE9  
                      _STRC 0CEA                        _STRD 0CEB                        _WREN 0C62  
                      _WPUA 0095                        _WPUB 0115                        _WPUC 0093  
                      _main 0155                        btemp 007E                        start 000A  
         ___bmul@multiplier 0074                       ??_ISR 0070                       _C1CH0 08C8  
                     _C1CH1 08C9                       _C2CH0 08D0                       _C2CH1 08D1  
                     _C1SEN 0CF5                       _C2REN 0CF4                       _C1POL 08CC  
                     _C2POL 08D4                       _C1OUT 08CE                       _C2OUT 08D6  
                     ?_main 0070             __end_of___lbdiv 0393                       _EEADR 009B  
                     _EEDAT 009A                       _ANS10 08FA                       _ANS11 08FB  
                     _P1CON 0016                       _EEPGD 0C67                       _ANSEL 011E  
                     _P1POL 0099                       _IOCB4 08B4                       _IOCB5 08B5  
                     _IOCB6 08B6                       _IOCB7 08B7                       _T1GSS 08D9  
                     _VP6EN 08C4                       _TMR2H 0013                       _TMR2L 0011  
                     _PORTA 0005                       _PORTC 0007                       _SRCON 019E  
                     _PULSR 0CF2                       _PULSS 0CF3                       _TRISA 0085  
                     _TRISC 0087                       _VRCON 0118                       _WPUB4 08AC  
                     _WPUB5 08AD                       _WPUB6 08AE                       _WPUB7 08AF  
                     _beep2 03C3    __size_of_eepromReadBlock 0011                       _keyID 005D  
                     pclath 000A                       status 0003                       wtemp0 007E  
           ___lbdiv@divisor 0072             ___lbdiv@counter 0074        __size_of_delay_x10ms 0010  
          ??_eepromReadByte 0072            _eepromWriteBlock 03D8                __end_of_main 0282  
                    ??_main 0052            eepromReadBlock@i 0078                      ?_beep2 0075  
                    _C1VREN 08C7                      _C2VREN 08C6                      _C2SYNC 08D8  
                    _EEADRH 010F                      _EEDATH 010E                      _EECON1 009C  
                    _P1ADTH 0014    __size_of_eepromWriteByte 0021                      _P1ADTL 000E  
                    _ANSELH 011F                      _MC1OUT 08DF                      _MC2OUT 08DE  
                    _T2CON0 0012                      _T2CON1 009E                      i1l4128 0000  
                    _INTCON 000B                      _OSCCON 008F                      _TMR2IE 0461  
                    _TMR2IF 0061                      _OPTION 0081                      _TMR2ON 0092  
              ?_SET_EPWM_ON 0070            __end_of_get_RFID 0143            __end_of_id_clear 02FD  
        get_RFID@timeOutVal 004F                      ___bmul 0429                   ??___lbdiv 0073  
                    _comArr 033B            __end_of_int_init 0443            __end_of_setState 044D  
                    saved_w 007E            __end_of_timerOut 033B         eepromReadBlock@buff 0074  
          ___lbdiv@dividend 0073            __end_of_sys_init 0455           ??_eepromReadBlock 0076  
       ___bmul@multiplicand 0072              __pcstackCOMMON 0070                __pidataBANK0 035A  
             __end_of_beep2 03D8            ___lbdiv@quotient 0075          __size_of_id_search 001A  
                   ??_beep2 0076                  __pbssBANK0 0058          __size_of_gpio_init 000F  
         ??_eepromWriteByte 0073                  __pmaintext 0155                     ?___bmul 0072  
                   ?_comArr 0072                  __pintentry 0004                     _CM1CON0 0119  
                   _CM2CON0 011A                     _CM2CON1 011B                  _id_replate 0282  
                 ?_get_RFID 0070                   ?_id_clear 0042    __end_of_eepromWriteBlock 03EA  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003E           __end_of_id_search 03AD                 setState@stt 0074  
      __size_of_SET_EPWM_ON 001F                   ?_setState 0072                   ?_timerOut 0072  
           __size_of___bmul 000E                     ___lbdiv 0378             __size_of_comArr 001F  
                   _buffTag 0025           __end_of_gpio_init 0429                   ?_sys_init 0070  
              __size_of_ISR 0007                     _mtState 005C                     comArr@i 0079  
                ??_get_RFID 0077                  ??_id_clear 007C                     _timeOut 0058  
                comArr@arr1 0078                  comArr@arr2 0072                  comArr@len1 0073  
                comArr@len2 0074                     main@tmp 0056        end_of_initialization 03C1  
             ??_delay_x10ms 0072                     init_ram 040F                  get_RFID@ii 0051  
                ??_int_init 0072                  ??_setState 0074         eepromWriteBlock@len 0077  
                ??_timerOut 0074       get_RFID@flag_RFID_syn 0049                  id_search@i 003F  
                _timer_init 046B                 ?_id_replate 003E                  ??_sys_init 0072  
           _eepromReadBlock 03EA         __end_of_delay_x10ms 040B              __end_of___bmul 0437  
            __end_of_comArr 035A     __size_of_eepromReadByte 0008        eepromReadByte@EEAddr 0072  
       start_initialization 03AD                 __end_of_ISR 046B             _eepromWriteByte 02BD  
             setState@_tOut 0072  eepromReadByte@ReEepromData 0073         __size_of_id_replate 0034  
                  ??___bmul 0073                    ??_comArr 0075                 __pdataBANK0 0020  
   __end_of_eepromReadBlock 03FB               id_clear@F1097 0020                 ?_timer_init 0070  
        eepromReadBlock@len 0075               __pcstackBANK0 003E               id_clear@idMax 0042  
             id_clear@idMin 0048           ?_eepromWriteBlock 0076           __size_of_get_RFID 0138  
         __size_of_id_clear 001F          ??_eepromWriteBlock 0078                 _delay_x10ms 03FB  
         __size_of_int_init 000C                    ?___lbdiv 0072                   __ptext500 0455  
                 __ptext501 0437           __size_of_setState 000A                   __ptext502 046B  
                 __ptext503 041A                   __ptext504 0464                   __ptext505 0000  
                 __ptext490 000B                   __ptext491 02BD                   __ptext492 03EA  
                 __ptext484 02DE                   __ptext493 044D                   __ptext485 0282  
                 __ptext494 0378                   __ptext486 03C3                   __ptext495 0429  
                 __ptext487 03D8                   __ptext496 0443                   __ptext488 0393  
                 __ptext497 02FD                   __ptext489 03FB                   __ptext498 031C  
                 __ptext499 033B                   _id_search 0393           __size_of_timerOut 001F  
                 __pswtext1 045D     __end_of_eepromWriteByte 02DE           __size_of_sys_init 0008  
                 _gpio_init 041A              __size_of_beep2 0015           interrupt_function 0004  
             ??_SET_EPWM_ON 0072         __size_of_timer_init 0003                   get_RFID@i 004D  
                 get_RFID@j 004C                  ?_id_search 007A                delay_x10ms@t 0074  
          timerOut@CurTimer 0075              _eepromReadByte 0455            ?_eepromReadBlock 0074  
              ??_id_replate 0040                  ?_gpio_init 0070          __end_of_id_replate 02B6  
                 init_fetch 040B         __end_of_SET_EPWM_ON 031C              id_replate@Cont 003E  
    __end_of_eepromReadByte 045D            __size_of___lbdiv 001B              id_replate@buff 003F  
         id_search@id_input 003E            ?_eepromWriteByte 0072     eepromReadBlock@addStart 0077  
                  beep2@sel 0076                    beep2@rep 0075                    _get_RFID 000B  
                  _id_clear 02DE               __size_of_main 012D                    _int_init 0437  
             id_search@buff 007A                    _setState 0443           eepromWriteBlock@i 007A  
                  _timeTick 005A                    _timerOut 031C                 ??_id_search 007B  
           ?_eepromReadByte 0070                    main@idop 0057                ??_timer_init 0072  
                  _sys_init 044D    eepromWriteBlock@addStart 0079                 ??_gpio_init 0072  
               id_clear@tmp 0043                    intlevel1 0000                ?_delay_x10ms 0070  
               _SET_EPWM_ON 02FD          __end_of_timer_init 046E        eepromWriteBlock@buff 0076  
 __size_of_eepromWriteBlock 0012       eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072  
    get_RFID@flag_RFID_last 004E                id_replate@id 007B               timerOut@Logic 0074  
              timerOut@time 0072  
