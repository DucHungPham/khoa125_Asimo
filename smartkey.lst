

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Mar 24 15:34:17 2020

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F685
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	swtext1,local,class=CONST,delta=2
    13                           	psect	text437,local,class=CODE,delta=2
    14                           	psect	text438,local,class=CODE,delta=2
    15                           	psect	text439,local,class=CODE,delta=2
    16                           	psect	text440,local,class=CODE,delta=2
    17                           	psect	text441,local,class=CODE,delta=2
    18                           	psect	text442,local,class=CODE,delta=2
    19                           	psect	text443,local,class=CODE,delta=2
    20                           	psect	text444,local,class=CODE,delta=2
    21                           	psect	text445,local,class=CODE,delta=2
    22                           	psect	text446,local,class=CODE,delta=2
    23                           	psect	text447,local,class=CODE,delta=2
    24                           	psect	text448,local,class=CODE,delta=2
    25                           	psect	text449,local,class=CODE,delta=2
    26                           	psect	text450,local,class=CODE,delta=2
    27                           	psect	text451,local,class=CODE,delta=2
    28                           	psect	text452,local,class=CODE,delta=2
    29                           	psect	text453,local,class=CODE,delta=2
    30                           	psect	text454,local,class=CODE,delta=2
    31                           	psect	text455,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text456,local,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x11E,1
    36                           	dabs	1,0x11F,1
    37                           	dabs	1,0x119,1
    38                           	dabs	1,0x11A,1
    39                           	dabs	1,0x11B,1
    40                           	dabs	1,0x10F,1
    41                           	dabs	1,0x10E,1
    42                           	dabs	1,0x116,1
    43                           	dabs	1,0x19D,1
    44                           	dabs	1,0x19E,1
    45                           	dabs	1,0x118,1
    46                           	dabs	1,0x115,1
    47                           	dabs	1,0x11E,1
    48                           	dabs	1,0x11E,1
    49                           	dabs	1,0x11F,1
    50                           	dabs	1,0x11F,1
    51                           	dabs	1,0x11E,1
    52                           	dabs	1,0x11E,1
    53                           	dabs	1,0x11E,1
    54                           	dabs	1,0x11E,1
    55                           	dabs	1,0x11E,1
    56                           	dabs	1,0x11E,1
    57                           	dabs	1,0x11F,1
    58                           	dabs	1,0x11F,1
    59                           	dabs	1,0x119,1
    60                           	dabs	1,0x119,1
    61                           	dabs	1,0x119,1
    62                           	dabs	1,0x119,1
    63                           	dabs	1,0x119,1
    64                           	dabs	1,0x119,1
    65                           	dabs	1,0x119,1
    66                           	dabs	1,0x19E,1
    67                           	dabs	1,0x118,1
    68                           	dabs	1,0x11A,1
    69                           	dabs	1,0x11A,1
    70                           	dabs	1,0x11A,1
    71                           	dabs	1,0x11A,1
    72                           	dabs	1,0x11A,1
    73                           	dabs	1,0x11A,1
    74                           	dabs	1,0x11A,1
    75                           	dabs	1,0x19E,1
    76                           	dabs	1,0x11B,1
    77                           	dabs	1,0x118,1
    78                           	dabs	1,0x18C,1
    79                           	dabs	1,0x116,1
    80                           	dabs	1,0x116,1
    81                           	dabs	1,0x116,1
    82                           	dabs	1,0x116,1
    83                           	dabs	1,0x11B,1
    84                           	dabs	1,0x11B,1
    85                           	dabs	1,0x19E,1
    86                           	dabs	1,0x19E,1
    87                           	dabs	1,0x19E,1
    88                           	dabs	1,0x19E,1
    89                           	dabs	1,0x19D,1
    90                           	dabs	1,0x19D,1
    91                           	dabs	1,0x19D,1
    92                           	dabs	1,0x19D,1
    93                           	dabs	1,0x19D,1
    94                           	dabs	1,0x11B,1
    95                           	dabs	1,0x118,1
    96                           	dabs	1,0x118,1
    97                           	dabs	1,0x118,1
    98                           	dabs	1,0x118,1
    99                           	dabs	1,0x118,1
   100                           	dabs	1,0x118,1
   101                           	dabs	1,0x115,1
   102                           	dabs	1,0x115,1
   103                           	dabs	1,0x115,1
   104                           	dabs	1,0x115,1
   105                           	dabs	1,0x18C,1
   106                           	dabs	1,0x7E,2
   107  000A                     
   108                           	psect	idataBANK0
   109  0321                     __pidataBANK0:	
   110                           
   111                           ;initializer for id_clear@F1097
   112  0321  34FF               	retlw	255
   113  0322  34FF               	retlw	255
   114  0323  34FF               	retlw	255
   115  0324  34FF               	retlw	255
   116  0325  34FF               	retlw	255
   117                           
   118                           ;initializer for _buffTag
   119  0326  3400               	retlw	0
   120  0327  3400               	retlw	0
   121  0328  3411               	retlw	17
   122  0329  340B               	retlw	11
   123  032A  344F               	retlw	79
   124  032B  3400               	retlw	0
   125  032C  3400               	retlw	0
   126  032D  3481               	retlw	129
   127  032E  342F               	retlw	47
   128  032F  3422               	retlw	34
   129  0330  3400               	retlw	0
   130  0331  3400               	retlw	0
   131  0332  347D               	retlw	125
   132  0333  3467               	retlw	103
   133  0334  3405               	retlw	5
   134  0335  3400               	retlw	0
   135  0336  3400               	retlw	0
   136  0337  347E               	retlw	126
   137  0338  3431               	retlw	49
   138  0339  34E7               	retlw	231
   139  033A  3400               	retlw	0
   140  033B  3400               	retlw	0
   141  033C  347E               	retlw	126
   142  033D  3451               	retlw	81
   143  033E  34E6               	retlw	230
   144  011E                     _ANSEL	set	286	;_ANSEL
   145  011F                     _ANSELH	set	287	;_ANSELH
   146  0119                     _CM1CON0	set	281	;_CM1CON0
   147  011A                     _CM2CON0	set	282	;_CM2CON0
   148  011B                     _CM2CON1	set	283	;_CM2CON1
   149  010F                     _EEADRH	set	271	;_EEADRH
   150  010E                     _EEDATH	set	270	;_EEDATH
   151  0116                     _IOCB	set	278	;_IOCB
   152  019D                     _PSTRCON	set	413	;_PSTRCON
   153  019E                     _SRCON	set	414	;_SRCON
   154  0118                     _VRCON	set	280	;_VRCON
   155  0115                     _WPUB	set	277	;_WPUB
   156  08F0                     _ANS0	set	2288	;_ANS0
   157  08F1                     _ANS1	set	2289	;_ANS1
   158  08FA                     _ANS10	set	2298	;_ANS10
   159  08FB                     _ANS11	set	2299	;_ANS11
   160  08F2                     _ANS2	set	2290	;_ANS2
   161  08F3                     _ANS3	set	2291	;_ANS3
   162  08F4                     _ANS4	set	2292	;_ANS4
   163  08F5                     _ANS5	set	2293	;_ANS5
   164  08F6                     _ANS6	set	2294	;_ANS6
   165  08F7                     _ANS7	set	2295	;_ANS7
   166  08F8                     _ANS8	set	2296	;_ANS8
   167  08F9                     _ANS9	set	2297	;_ANS9
   168  08C8                     _C1CH0	set	2248	;_C1CH0
   169  08C9                     _C1CH1	set	2249	;_C1CH1
   170  08CD                     _C1OE	set	2253	;_C1OE
   171  08CF                     _C1ON	set	2255	;_C1ON
   172  08CE                     _C1OUT	set	2254	;_C1OUT
   173  08CC                     _C1POL	set	2252	;_C1POL
   174  08CA                     _C1R	set	2250	;_C1R
   175  0CF5                     _C1SEN	set	3317	;_C1SEN
   176  08C7                     _C1VREN	set	2247	;_C1VREN
   177  08D0                     _C2CH0	set	2256	;_C2CH0
   178  08D1                     _C2CH1	set	2257	;_C2CH1
   179  08D5                     _C2OE	set	2261	;_C2OE
   180  08D7                     _C2ON	set	2263	;_C2ON
   181  08D6                     _C2OUT	set	2262	;_C2OUT
   182  08D4                     _C2POL	set	2260	;_C2POL
   183  08D2                     _C2R	set	2258	;_C2R
   184  0CF4                     _C2REN	set	3316	;_C2REN
   185  08D8                     _C2SYNC	set	2264	;_C2SYNC
   186  08C6                     _C2VREN	set	2246	;_C2VREN
   187  0C67                     _EEPGD	set	3175	;_EEPGD
   188  08B4                     _IOCB4	set	2228	;_IOCB4
   189  08B5                     _IOCB5	set	2229	;_IOCB5
   190  08B6                     _IOCB6	set	2230	;_IOCB6
   191  08B7                     _IOCB7	set	2231	;_IOCB7
   192  08DF                     _MC1OUT	set	2271	;_MC1OUT
   193  08DE                     _MC2OUT	set	2270	;_MC2OUT
   194  0CF2                     _PULSR	set	3314	;_PULSR
   195  0CF3                     _PULSS	set	3315	;_PULSS
   196  0CF6                     _SR0	set	3318	;_SR0
   197  0CF7                     _SR1	set	3319	;_SR1
   198  0CE8                     _STRA	set	3304	;_STRA
   199  0CE9                     _STRB	set	3305	;_STRB
   200  0CEA                     _STRC	set	3306	;_STRC
   201  0CEB                     _STRD	set	3307	;_STRD
   202  0CEC                     _STRSYNC	set	3308	;_STRSYNC
   203  08D9                     _T1GSS	set	2265	;_T1GSS
   204  08C4                     _VP6EN	set	2244	;_VP6EN
   205  08C0                     _VR0	set	2240	;_VR0
   206  08C1                     _VR1	set	2241	;_VR1
   207  08C2                     _VR2	set	2242	;_VR2
   208  08C3                     _VR3	set	2243	;_VR3
   209  08C5                     _VRR	set	2245	;_VRR
   210  08AC                     _WPUB4	set	2220	;_WPUB4
   211  08AD                     _WPUB5	set	2221	;_WPUB5
   212  08AE                     _WPUB6	set	2222	;_WPUB6
   213  08AF                     _WPUB7	set	2223	;_WPUB7
   214  0C62                     _WREN	set	3170	;_WREN
   215  000B                     _INTCON	set	11
   216  0014                     _P1ADTH	set	20
   217  000E                     _P1ADTL	set	14
   218  0016                     _P1CON	set	22
   219  000C                     _PIR1	set	12
   220  0005                     _PORTA	set	5
   221  0007                     _PORTC	set	7
   222  0012                     _T2CON0	set	18
   223  0013                     _TMR2H	set	19
   224  0011                     _TMR2L	set	17
   225  0067                     _EEIF	set	103
   226  005F                     _GIE	set	95
   227  005E                     _PEIE	set	94
   228  002B                     _RA3	set	43
   229  002D                     _RA5	set	45
   230  005D                     _T0IE	set	93
   231  005A                     _T0IF	set	90
   232  00FB                     _T0ON	set	251
   233  0061                     _TMR2IF	set	97
   234  0092                     _TMR2ON	set	146
   235  009B                     _EEADR	set	155
   236  009C                     _EECON1	set	156
   237  009A                     _EEDAT	set	154
   238  0081                     _OPTION	set	129
   239  008F                     _OSCCON	set	143
   240  0090                     _P1OE	set	144
   241  0099                     _P1POL	set	153
   242  008C                     _PIE1	set	140
   243  0092                     _PR2H	set	146
   244  0091                     _PR2L	set	145
   245  009E                     _T2CON1	set	158
   246  0085                     _TRISA	set	133
   247  0087                     _TRISC	set	135
   248  0095                     _WPUA	set	149
   249  0093                     _WPUC	set	147
   250  047A                     _HTS	set	1146
   251  04E0                     _RD	set	1248
   252  0461                     _TMR2IE	set	1121
   253  04E8                     _WR	set	1256
   254  0001                     _TMR0	set	1
   255                           
   256                           	psect	cinit
   257  0374                     start_initialization:	
   258  0374  303E               	movlw	low (__pdataBANK0+30)
   259                           
   260                           ; Clear objects allocated to BANK0
   261  0375  01D8               	clrf	__pbssBANK0& (0+127)
   262  0376  01D9               	clrf	(__pbssBANK0+1)& (0+127)
   263  0377  01DA               	clrf	(__pbssBANK0+2)& (0+127)
   264  0378  01DB               	clrf	(__pbssBANK0+3)& (0+127)
   265  0379  01DC               	clrf	(__pbssBANK0+4)& (0+127)
   266  037A  01DD               	clrf	(__pbssBANK0+5)& (0+127)
   267  037B  01DE               	clrf	(__pbssBANK0+6)& (0+127)
   268  037C  01DF               	clrf	(__pbssBANK0+7)& (0+127)
   269  037D  01E0               	clrf	(__pbssBANK0+8)& (0+127)
   270  037E  01E1               	clrf	(__pbssBANK0+9)& (0+127)
   271                           
   272                           ; Initialize objects allocated to BANK0
   273  037F  1383               	bcf	3,7	;select IRP bank0
   274  0380  00FD               	movwf	125
   275  0381  3003               	movlw	high __pidataBANK0
   276  0382  00FE               	movwf	126
   277  0383  3021               	movlw	low __pidataBANK0
   278  0384  00FF               	movwf	127
   279  0385  3020               	movlw	low __pdataBANK0
   280  0386  0084               	movwf	4
   281  0387  23B1               	fcall	init_ram
   282  0388                     end_of_initialization:	
   283                           ;End of C runtime variable initialization code
   284                           
   285  0388  0183               	clrf	3
   286  0389  2955               	ljmp	_main	;jump to C main() function
   287                           
   288                           	psect	bssBANK0
   289  0058                     __pbssBANK0:	
   290  0058                     _timeOut:	
   291  0058                     	ds	2
   292  005A                     _timeTick:	
   293  005A                     	ds	2
   294  005C                     _mtState:	
   295  005C                     	ds	1
   296  005D                     _keyID:	
   297  005D                     	ds	5
   298                           
   299                           	psect	dataBANK0
   300  0020                     __pdataBANK0:	
   301  0020                     id_clear@F1097:	
   302  0020                     	ds	5
   303  0025                     _buffTag:	
   304  0025                     	ds	25
   305                           
   306                           	psect	inittext
   307  03AD                     init_fetch:	
   308                           ;	Called with low address in FSR and high address in W
   309                           
   310  03AD  087E               	movf	126,w
   311  03AE  008A               	movwf	10
   312  03AF  087F               	movf	127,w
   313  03B0  0082               	movwf	2
   314  03B1                     init_ram:	
   315                           ;Called with:
   316                           ;	high address of idata address in btemp 
   317                           ;	low address of idata address in btemp+1 
   318                           ;	low address of data in FSR
   319                           ;	high address + 1 of data in btemp-1
   320                           
   321  03B1  23AD               	fcall	init_fetch
   322  03B2  0080               	movwf	0
   323  03B3  0A84               	incf	4,f
   324  03B4  0804               	movf	4,w
   325  03B5  067D               	xorwf	125,w
   326  03B6  1903               	btfsc	3,2
   327  03B7  3400               	retlw	0
   328  03B8  0AFF               	incf	127,f
   329  03B9  1903               	btfsc	3,2
   330  03BA  0AFE               	incf	126,f
   331  03BB  2BB1               	goto	init_ram
   332                           
   333                           	psect	cstackCOMMON
   334  0070                     __pcstackCOMMON:	
   335  0070                     ?_sys_init:	
   336  0070                     ?_gpio_init:	
   337                           ; 0 bytes @ 0x0
   338                           
   339  0070                     ?_timer_init:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0070                     ?_int_init:	
   343                           ; 0 bytes @ 0x0
   344                           
   345  0070                     ?_SET_EPWM_ON:	
   346                           ; 0 bytes @ 0x0
   347                           
   348  0070                     ?_ISR:	
   349                           ; 0 bytes @ 0x0
   350                           
   351  0070                     ??_ISR:	
   352                           ; 0 bytes @ 0x0
   353                           
   354  0070                     ?_main:	
   355                           ; 0 bytes @ 0x0
   356                           
   357  0070                     ?_eepromReadByte:	
   358                           ; 0 bytes @ 0x0
   359                           
   360  0070                     ?_get_RFID:	
   361                           ; 1 bytes @ 0x0
   362                           
   363                           
   364                           ; 1 bytes @ 0x0
   365  0070                     	ds	2
   366  0072                     ??_sys_init:	
   367  0072                     ??_gpio_init:	
   368                           ; 0 bytes @ 0x2
   369                           
   370  0072                     ??_timer_init:	
   371                           ; 0 bytes @ 0x2
   372                           
   373  0072                     ??_int_init:	
   374                           ; 0 bytes @ 0x2
   375                           
   376  0072                     ??_eepromReadByte:	
   377                           ; 0 bytes @ 0x2
   378                           
   379  0072                     ?_eepromWriteByte:	
   380                           ; 0 bytes @ 0x2
   381                           
   382  0072                     ??_SET_EPWM_ON:	
   383                           ; 0 bytes @ 0x2
   384                           
   385  0072                     ?_setState:	
   386                           ; 0 bytes @ 0x2
   387                           
   388  0072                     ?_comArr:	
   389                           ; 0 bytes @ 0x2
   390                           
   391  0072                     ?___bmul:	
   392                           ; 1 bytes @ 0x2
   393                           
   394  0072                     ?___lbdiv:	
   395                           ; 1 bytes @ 0x2
   396                           
   397  0072                     ?_timerOut:	
   398                           ; 1 bytes @ 0x2
   399                           
   400  0072                     eepromReadByte@EEAddr:	
   401                           ; 2 bytes @ 0x2
   402                           
   403  0072                     eepromWriteByte@EEData:	
   404                           ; 1 bytes @ 0x2
   405                           
   406  0072                     comArr@arr2:	
   407                           ; 1 bytes @ 0x2
   408                           
   409  0072                     ___bmul@multiplicand:	
   410                           ; 1 bytes @ 0x2
   411                           
   412  0072                     ___lbdiv@divisor:	
   413                           ; 1 bytes @ 0x2
   414                           
   415  0072                     timerOut@time:	
   416                           ; 1 bytes @ 0x2
   417                           
   418  0072                     setState@_tOut:	
   419                           ; 2 bytes @ 0x2
   420                           
   421                           
   422                           ; 2 bytes @ 0x2
   423  0072                     	ds	1
   424  0073                     ??_eepromWriteByte:	
   425  0073                     ??___bmul:	
   426                           ; 0 bytes @ 0x3
   427                           
   428  0073                     ??___lbdiv:	
   429                           ; 0 bytes @ 0x3
   430                           
   431  0073                     eepromReadByte@ReEepromData:	
   432                           ; 0 bytes @ 0x3
   433                           
   434  0073                     comArr@len1:	
   435                           ; 1 bytes @ 0x3
   436                           
   437  0073                     ___bmul@product:	
   438                           ; 1 bytes @ 0x3
   439                           
   440  0073                     ___lbdiv@dividend:	
   441                           ; 1 bytes @ 0x3
   442                           
   443                           
   444                           ; 1 bytes @ 0x3
   445  0073                     	ds	1
   446  0074                     ?_eepromReadBlock:	
   447  0074                     ??_timerOut:	
   448                           ; 0 bytes @ 0x4
   449                           
   450  0074                     ??_setState:	
   451                           ; 0 bytes @ 0x4
   452                           
   453  0074                     eepromReadBlock@buff:	
   454                           ; 0 bytes @ 0x4
   455                           
   456  0074                     comArr@len2:	
   457                           ; 1 bytes @ 0x4
   458                           
   459  0074                     timerOut@Logic:	
   460                           ; 1 bytes @ 0x4
   461                           
   462  0074                     setState@stt:	
   463                           ; 1 bytes @ 0x4
   464                           
   465  0074                     ___bmul@multiplier:	
   466                           ; 1 bytes @ 0x4
   467                           
   468  0074                     ___lbdiv@counter:	
   469                           ; 1 bytes @ 0x4
   470                           
   471                           
   472                           ; 1 bytes @ 0x4
   473  0074                     	ds	1
   474  0075                     ??_comArr:	
   475  0075                     eepromReadBlock@len:	
   476                           ; 0 bytes @ 0x5
   477                           
   478  0075                     eepromWriteByte@EEAddr:	
   479                           ; 1 bytes @ 0x5
   480                           
   481  0075                     ___lbdiv@quotient:	
   482                           ; 1 bytes @ 0x5
   483                           
   484  0075                     timerOut@CurTimer:	
   485                           ; 1 bytes @ 0x5
   486                           
   487                           
   488                           ; 2 bytes @ 0x5
   489  0075                     	ds	1
   490  0076                     ??_eepromReadBlock:	
   491  0076                     ?_eepromWriteBlock:	
   492                           ; 0 bytes @ 0x6
   493                           
   494  0076                     eepromWriteBlock@buff:	
   495                           ; 0 bytes @ 0x6
   496                           
   497                           
   498                           ; 1 bytes @ 0x6
   499  0076                     	ds	1
   500  0077                     ??_get_RFID:	
   501  0077                     eepromReadBlock@addStart:	
   502                           ; 0 bytes @ 0x7
   503                           
   504  0077                     eepromWriteBlock@len:	
   505                           ; 1 bytes @ 0x7
   506                           
   507                           
   508                           ; 1 bytes @ 0x7
   509  0077                     	ds	1
   510  0078                     ??_eepromWriteBlock:	
   511  0078                     eepromReadBlock@i:	
   512                           ; 0 bytes @ 0x8
   513                           
   514  0078                     comArr@arr1:	
   515                           ; 1 bytes @ 0x8
   516                           
   517                           
   518                           ; 1 bytes @ 0x8
   519  0078                     	ds	1
   520  0079                     eepromWriteBlock@addStart:	
   521  0079                     comArr@i:	
   522                           ; 1 bytes @ 0x9
   523                           
   524                           
   525                           ; 1 bytes @ 0x9
   526  0079                     	ds	1
   527  007A                     ?_id_search:	
   528  007A                     eepromWriteBlock@i:	
   529                           ; 1 bytes @ 0xA
   530                           
   531  007A                     id_search@buff:	
   532                           ; 1 bytes @ 0xA
   533                           
   534                           
   535                           ; 1 bytes @ 0xA
   536  007A                     	ds	1
   537  007B                     ??_id_search:	
   538  007B                     id_replate@id:	
   539                           ; 0 bytes @ 0xB
   540                           
   541                           
   542                           ; 1 bytes @ 0xB
   543  007B                     	ds	1
   544  007C                     ??_id_clear:	
   545                           
   546                           	psect	cstackBANK0
   547  003E                     __pcstackBANK0:	
   548                           ; 0 bytes @ 0xC
   549                           
   550  003E                     ?_id_replate:	
   551  003E                     id_search@id_input:	
   552                           ; 0 bytes @ 0x0
   553                           
   554  003E                     id_replate@Cont:	
   555                           ; 1 bytes @ 0x0
   556                           
   557  003E                     get_RFID@RF_serial_55bits:	
   558                           ; 1 bytes @ 0x0
   559                           
   560                           
   561                           ; 11 bytes @ 0x0
   562  003E                     	ds	1
   563  003F                     id_search@i:	
   564  003F                     id_replate@buff:	
   565                           ; 1 bytes @ 0x1
   566                           
   567                           
   568                           ; 1 bytes @ 0x1
   569  003F                     	ds	1
   570  0040                     ??_id_replate:	
   571                           
   572                           ; 0 bytes @ 0x2
   573  0040                     	ds	2
   574  0042                     ?_id_clear:	
   575  0042                     id_clear@idMax:	
   576                           ; 0 bytes @ 0x4
   577                           
   578                           
   579                           ; 1 bytes @ 0x4
   580  0042                     	ds	1
   581  0043                     id_clear@tmp:	
   582                           
   583                           ; 5 bytes @ 0x5
   584  0043                     	ds	5
   585  0048                     id_clear@idMin:	
   586                           
   587                           ; 1 bytes @ 0xA
   588  0048                     	ds	1
   589  0049                     get_RFID@flag_RFID_syn:	
   590                           
   591                           ; 1 bytes @ 0xB
   592  0049                     	ds	1
   593  004A                     get_RFID@even_col:	
   594                           
   595                           ; 1 bytes @ 0xC
   596  004A                     	ds	1
   597  004B                     get_RFID@even_row:	
   598                           
   599                           ; 1 bytes @ 0xD
   600  004B                     	ds	1
   601  004C                     get_RFID@j:	
   602                           
   603                           ; 1 bytes @ 0xE
   604  004C                     	ds	1
   605  004D                     get_RFID@i:	
   606                           
   607                           ; 1 bytes @ 0xF
   608  004D                     	ds	1
   609  004E                     get_RFID@flag_RFID_last:	
   610                           
   611                           ; 1 bytes @ 0x10
   612  004E                     	ds	1
   613  004F                     get_RFID@timeOutVal:	
   614                           
   615                           ; 2 bytes @ 0x11
   616  004F                     	ds	2
   617  0051                     get_RFID@ii:	
   618                           
   619                           ; 1 bytes @ 0x13
   620  0051                     	ds	1
   621  0052                     ??_main:	
   622                           
   623                           ; 0 bytes @ 0x14
   624  0052                     	ds	3
   625  0055                     main@idState:	
   626                           
   627                           ; 1 bytes @ 0x17
   628  0055                     	ds	1
   629  0056                     main@tmp:	
   630                           
   631                           ; 1 bytes @ 0x18
   632  0056                     	ds	1
   633  0057                     main@idop:	
   634                           
   635                           ; 1 bytes @ 0x19
   636  0057                     	ds	1
   637                           
   638                           	psect	maintext
   639  0155                     __pmaintext:	
   640 ;;Data sizes: Strings 0, constant 0, data 30, bss 10, persistent 0 stack 0
   641 ;;Auto spaces:   Size  Autos    Used
   642 ;; COMMON          14     12      12
   643 ;; BANK0           80     26      66
   644 ;; BANK1           32      0       0
   645 ;;
   646 ;; Pointer list with targets:
   647 ;; ?_timerOut	unsigned int  size(1) Largest target is 1
   648 ;;		 -> TMR0(BITSFR0[1]), 
   649 ;;
   650 ;; id_replate@Cont	PTR unsigned char  size(1) Largest target is 5
   651 ;;		 -> id_clear@tmp(BANK0[5]), keyID(BANK0[5]), 
   652 ;;
   653 ;; id_replate@buff	PTR unsigned char  size(1) Largest target is 25
   654 ;;		 -> buffTag(BANK0[25]), 
   655 ;;
   656 ;; id_search@buff	PTR unsigned char  size(1) Largest target is 25
   657 ;;		 -> buffTag(BANK0[25]), 
   658 ;;
   659 ;; id_search@id_input	PTR unsigned char  size(1) Largest target is 5
   660 ;;		 -> keyID(BANK0[5]), 
   661 ;;
   662 ;; comArr@arr2	PTR unsigned char  size(1) Largest target is 25
   663 ;;		 -> buffTag(BANK0[25]), 
   664 ;;
   665 ;; comArr@arr1	PTR unsigned char  size(1) Largest target is 5
   666 ;;		 -> keyID(BANK0[5]), 
   667 ;;
   668 ;; eepromWriteBlock@buff	PTR unsigned char  size(1) Largest target is 25
   669 ;;		 -> buffTag(BANK0[25]), 
   670 ;;
   671 ;; eepromReadBlock@buff	PTR unsigned char  size(1) Largest target is 25
   672 ;;		 -> buffTag(BANK0[25]), 
   673 ;;
   674 ;;
   675 ;; Critical Paths under _main in COMMON
   676 ;;
   677 ;;   _main->_id_search
   678 ;;   _main->_id_replate
   679 ;;   _id_clear->_id_replate
   680 ;;   _id_replate->_eepromWriteBlock
   681 ;;   _eepromWriteBlock->_eepromWriteByte
   682 ;;   _id_search->_comArr
   683 ;;   _get_RFID->_timerOut
   684 ;;   _eepromReadBlock->_eepromReadByte
   685 ;;
   686 ;; Critical Paths under _ISR in COMMON
   687 ;;
   688 ;;   None.
   689 ;;
   690 ;; Critical Paths under _main in BANK0
   691 ;;
   692 ;;   _main->_get_RFID
   693 ;;   _id_clear->_id_replate
   694 ;;
   695 ;; Critical Paths under _ISR in BANK0
   696 ;;
   697 ;;   None.
   698 ;;
   699 ;; Critical Paths under _main in BANK1
   700 ;;
   701 ;;   None.
   702 ;;
   703 ;; Critical Paths under _ISR in BANK1
   704 ;;
   705 ;;   None.
   706 ;;
   707 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   708 ;;
   709 ;;
   710 ;;Call Graph Tables:
   711 ;;
   712 ;; ---------------------------------------------------------------------------------
   713 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   714 ;; ---------------------------------------------------------------------------------
   715 ;; (0) _main                                                10    10      0    4451
   716 ;;                                             20 BANK0      6     6      0
   717 ;;                           _sys_init
   718 ;;                          _gpio_init
   719 ;;                         _timer_init
   720 ;;                           _int_init
   721 ;;                    _eepromWriteByte
   722 ;;                        _SET_EPWM_ON
   723 ;;                     _eepromReadByte
   724 ;;                    _eepromReadBlock
   725 ;;                           _setState
   726 ;;                           _get_RFID
   727 ;;                          _id_search
   728 ;;                           _id_clear
   729 ;;                         _id_replate
   730 ;; ---------------------------------------------------------------------------------
   731 ;; (1) _id_clear                                             7     6      1     718
   732 ;;                                              4 BANK0      7     6      1
   733 ;;                         _id_replate
   734 ;; ---------------------------------------------------------------------------------
   735 ;; (1) _id_replate                                           5     3      2     623
   736 ;;                                             11 COMMON     1     1      0
   737 ;;                                              0 BANK0      4     2      2
   738 ;;                             ___bmul
   739 ;;                   _eepromWriteBlock
   740 ;; ---------------------------------------------------------------------------------
   741 ;; (2) _eepromWriteBlock                                     5     3      2     178
   742 ;;                                              6 COMMON     5     3      2
   743 ;;                    _eepromWriteByte
   744 ;; ---------------------------------------------------------------------------------
   745 ;; (1) _id_search                                            4     3      1     518
   746 ;;                                             10 COMMON     2     1      1
   747 ;;                                              0 BANK0      2     2      0
   748 ;;                             _comArr
   749 ;;                            ___lbdiv
   750 ;; ---------------------------------------------------------------------------------
   751 ;; (1) _get_RFID                                            21    21      0    1917
   752 ;;                                              7 COMMON     1     1      0
   753 ;;                                              0 BANK0     20    20      0
   754 ;;                           _timerOut
   755 ;;                            ___lbdiv
   756 ;; ---------------------------------------------------------------------------------
   757 ;; (3) _eepromWriteByte                                      4     3      1      44
   758 ;;                                              2 COMMON     4     3      1
   759 ;; ---------------------------------------------------------------------------------
   760 ;; (1) _eepromReadBlock                                      5     3      2     179
   761 ;;                                              4 COMMON     5     3      2
   762 ;;                     _eepromReadByte
   763 ;; ---------------------------------------------------------------------------------
   764 ;; (1) _sys_init                                             0     0      0       0
   765 ;; ---------------------------------------------------------------------------------
   766 ;; (2) ___lbdiv                                              4     3      1     162
   767 ;;                                              2 COMMON     4     3      1
   768 ;; ---------------------------------------------------------------------------------
   769 ;; (2) ___bmul                                               3     2      1      92
   770 ;;                                              2 COMMON     3     2      1
   771 ;; ---------------------------------------------------------------------------------
   772 ;; (1) _setState                                             3     1      2      44
   773 ;;                                              2 COMMON     3     1      2
   774 ;; ---------------------------------------------------------------------------------
   775 ;; (1) _SET_EPWM_ON                                          0     0      0       0
   776 ;; ---------------------------------------------------------------------------------
   777 ;; (2) _timerOut                                             5     3      2      90
   778 ;;                                              2 COMMON     5     3      2
   779 ;; ---------------------------------------------------------------------------------
   780 ;; (2) _comArr                                               8     5      3     222
   781 ;;                                              2 COMMON     8     5      3
   782 ;; ---------------------------------------------------------------------------------
   783 ;; (2) _eepromReadByte                                       2     2      0      45
   784 ;;                                              2 COMMON     2     2      0
   785 ;; ---------------------------------------------------------------------------------
   786 ;; (1) _int_init                                             0     0      0       0
   787 ;; ---------------------------------------------------------------------------------
   788 ;; (1) _timer_init                                           0     0      0       0
   789 ;; ---------------------------------------------------------------------------------
   790 ;; (1) _gpio_init                                            0     0      0       0
   791 ;; ---------------------------------------------------------------------------------
   792 ;; Estimated maximum stack depth 3
   793 ;; ---------------------------------------------------------------------------------
   794 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   795 ;; ---------------------------------------------------------------------------------
   796 ;; (5) _ISR                                                  2     2      0       0
   797 ;;                                              0 COMMON     2     2      0
   798 ;; ---------------------------------------------------------------------------------
   799 ;; Estimated maximum stack depth 5
   800 ;; ---------------------------------------------------------------------------------
   801 ;; Call Graph Graphs:
   802 ;; _main (ROOT)
   803 ;;   _sys_init
   804 ;;   _gpio_init
   805 ;;   _timer_init
   806 ;;   _int_init
   807 ;;   _eepromWriteByte
   808 ;;   _SET_EPWM_ON
   809 ;;   _eepromReadByte
   810 ;;   _eepromReadBlock
   811 ;;     _eepromReadByte
   812 ;;   _setState
   813 ;;   _get_RFID
   814 ;;     _timerOut
   815 ;;     ___lbdiv
   816 ;;   _id_search
   817 ;;     _comArr
   818 ;;     ___lbdiv
   819 ;;   _id_clear
   820 ;;     _id_replate
   821 ;;       ___bmul
   822 ;;       _eepromWriteBlock
   823 ;;         _eepromWriteByte
   824 ;;   _id_replate
   825 ;;     ___bmul
   826 ;;     _eepromWriteBlock
   827 ;;       _eepromWriteByte
   828 ;;
   829 ;; _ISR (ROOT)
   830 ;;
   831 ;; Address spaces:
   832 ;;Name               Size   Autos  Total    Cost      Usage
   833 ;;SFR1                 0      0       0       2        0.0%
   834 ;;BITSFR1              0      0       0       2        0.0%
   835 ;;BANK1               20      0       0       5        0.0%
   836 ;;BITBANK1            20      0       0       7        0.0%
   837 ;;CODE                 0      0       0       0        0.0%
   838 ;;DATA                 0      0      52       8        0.0%
   839 ;;ABS                  0      0      4E       6        0.0%
   840 ;;NULL                 0      0       0       0        0.0%
   841 ;;STACK                0      0       4       2        0.0%
   842 ;;BANK0               50     1A      42       4       82.5%
   843 ;;BITBANK0            50      0       0       3        0.0%
   844 ;;SFR0                 0      0       0       1        0.0%
   845 ;;BITSFR0              0      0       0       1        0.0%
   846 ;;COMMON               E      C       C       1       85.7%
   847 ;;BITCOMMON            E      0       0       0        0.0%
   848 ;;EEDATA             100      0       0       0        0.0%
   849                           
   850                           
   851 ;; *************** function _main *****************
   852 ;; Defined at:
   853 ;;		line 210 in file "MAIN.C"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  t               2    0        unsigned int 
   858 ;;  idop            1   25[BANK0 ] unsigned char 
   859 ;;  tmp             1   24[BANK0 ] unsigned char 
   860 ;;  idState         1   23[BANK0 ] unsigned char 
   861 ;;  t1              1    0        unsigned char 
   862 ;;  buzFre          1    0        unsigned char 
   863 ;; Return value:  Size  Location     Type
   864 ;;		None               void
   865 ;; Registers used:
   866 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   867 ;; Tracked objects:
   868 ;;		On entry : 17F/0
   869 ;;		On exit  : 20/0
   870 ;;		Unchanged: 0/0
   871 ;; Data sizes:     COMMON   BANK0   BANK1
   872 ;;      Params:         0       0       0
   873 ;;      Locals:         0       3       0
   874 ;;      Temps:          0       3       0
   875 ;;      Totals:         0       6       0
   876 ;;Total ram usage:        6 bytes
   877 ;; Hardware stack levels required when called:    5
   878 ;; This function calls:
   879 ;;		_sys_init
   880 ;;		_gpio_init
   881 ;;		_timer_init
   882 ;;		_int_init
   883 ;;		_eepromWriteByte
   884 ;;		_SET_EPWM_ON
   885 ;;		_eepromReadByte
   886 ;;		_eepromReadBlock
   887 ;;		_setState
   888 ;;		_get_RFID
   889 ;;		_id_search
   890 ;;		_id_clear
   891 ;;		_id_replate
   892 ;; This function is called by:
   893 ;;		Startup code after reset
   894 ;; This function uses a non-reentrant model
   895 ;;
   896  0155                     _main:	
   897                           
   898                           ;MAIN.C: 213: unsigned int t;
   899                           ;MAIN.C: 214: unsigned char buzFre = 0;
   900                           
   901                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   902  0155  01D5               	clrf	main@idState
   903  0156  0064               	clrwdt	;#
   904                           
   905                           ;MAIN.C: 218: sys_init();
   906  0157  23EF               	fcall	_sys_init
   907                           
   908                           ;MAIN.C: 219: gpio_init();
   909  0158  23BC               	fcall	_gpio_init
   910                           
   911                           ;MAIN.C: 221: timer_init();
   912  0159  240E               	fcall	_timer_init
   913                           
   914                           ;MAIN.C: 222: int_init();
   915  015A  23D9               	fcall	_int_init
   916                           
   917                           ;MAIN.C: 228: eepromWriteByte(0xFF, 0xAA);
   918  015B  30AA               	movlw	170
   919  015C  00F2               	movwf	?_eepromWriteByte
   920  015D  30FF               	movlw	255
   921  015E  2284               	fcall	_eepromWriteByte
   922                           
   923                           ;MAIN.C: 229: eepromWriteByte(0xFF, 0xAA);
   924  015F  30AA               	movlw	170
   925  0160  00F2               	movwf	?_eepromWriteByte
   926  0161  30FF               	movlw	255
   927  0162  2284               	fcall	_eepromWriteByte
   928                           
   929                           ;MAIN.C: 232: TRISC &= 0xfe;
   930  0163  1683               	bsf	3,5	;RP0=1, select bank1
   931  0164  1007               	bcf	7,0	;volatile
   932                           
   933                           ;MAIN.C: 234: SET_EPWM_ON();
   934  0165  22C4               	fcall	_SET_EPWM_ON
   935                           
   936                           ;MAIN.C: 238: _delay((unsigned long)((20)*(8000000/4000.0)));
   937  0166  3034               	movlw	52
   938  0167  1283               	bcf	3,5	;RP0=0, select bank0
   939  0168  00D3               	movwf	??_main+1
   940  0169  30F1               	movlw	241
   941  016A  00D2               	movwf	??_main
   942  016B                     u1657:	
   943  016B  0BD2               	decfsz	??_main,f
   944  016C  296B               	goto	u1657
   945  016D  0BD3               	decfsz	??_main+1,f
   946  016E  296B               	goto	u1657
   947  016F  2970               	nop2
   948                           
   949                           ;MAIN.C: 243: if (eepromReadByte(0x06) != 0) {
   950  0170  3006               	movlw	6
   951  0171  23F7               	fcall	_eepromReadByte
   952  0172  3A00               	xorlw	0
   953  0173  1903               	skipnz
   954  0174  2987               	goto	l6391
   955  0175  3006               	movlw	6
   956                           
   957                           ;MAIN.C: 247: eepromWriteByte(0x06, 0);
   958  0176  01F2               	clrf	?_eepromWriteByte
   959  0177  2284               	fcall	_eepromWriteByte
   960  0178  3007               	movlw	7
   961                           
   962                           ;MAIN.C: 248: eepromWriteByte(0x06 + 1, 0);
   963  0179  01F2               	clrf	?_eepromWriteByte
   964  017A  2284               	fcall	_eepromWriteByte
   965                           
   966                           ;MAIN.C: 249: eepromWriteByte(0x06 + 2, 0x87);
   967  017B  3087               	movlw	135
   968  017C  00F2               	movwf	?_eepromWriteByte
   969  017D  3008               	movlw	8
   970  017E  2284               	fcall	_eepromWriteByte
   971                           
   972                           ;MAIN.C: 250: eepromWriteByte(0x06 + 3, 0x3a);
   973  017F  303A               	movlw	58
   974  0180  00F2               	movwf	?_eepromWriteByte
   975  0181  3009               	movlw	9
   976  0182  2284               	fcall	_eepromWriteByte
   977                           
   978                           ;MAIN.C: 251: eepromWriteByte(0x06 + 4, 0xf8);
   979  0183  30F8               	movlw	248
   980  0184  00F2               	movwf	?_eepromWriteByte
   981  0185  300A               	movlw	10
   982  0186  2284               	fcall	_eepromWriteByte
   983  0187                     l6391:	
   984                           
   985                           ;MAIN.C: 253: }
   986                           ;MAIN.C: 254: eepromReadBlock(0x06, buffTag, 5 * 5);
   987  0187  3025               	movlw	_buffTag& (0+255)
   988  0188  00F4               	movwf	?_eepromReadBlock
   989  0189  3019               	movlw	25
   990  018A  00F5               	movwf	?_eepromReadBlock+1
   991  018B  3006               	movlw	6
   992  018C  239C               	fcall	_eepromReadBlock
   993                           
   994                           ;MAIN.C: 256: setState(1, 12);
   995  018D  300C               	movlw	12
   996  018E  00F2               	movwf	?_setState
   997  018F  3001               	movlw	1
   998  0190  01F3               	clrf	?_setState+1
   999  0191  23E5               	fcall	_setState
  1000                           
  1001                           ;MAIN.C: 260: tmp = 0;
  1002  0192  01D6               	clrf	main@tmp
  1003  0193                     l6397:	
  1004                           
  1005                           ;MAIN.C: 264: idop = get_RFID();
  1006  0193  200B               	fcall	_get_RFID
  1007  0194  00D7               	movwf	main@idop
  1008                           
  1009                           ;MAIN.C: 266: if (idop) {
  1010  0195  0857               	movf	main@idop,w
  1011  0196  1903               	btfsc	3,2
  1012  0197  2A08               	goto	l6467
  1013                           
  1014                           ;MAIN.C: 267: idop = id_search(keyID, buffTag);
  1015  0198  3025               	movlw	_buffTag& (0+255)
  1016  0199  00FA               	movwf	?_id_search
  1017  019A  305D               	movlw	_keyID& (0+255)
  1018  019B  235A               	fcall	_id_search
  1019  019C  00D7               	movwf	main@idop
  1020                           
  1021                           ;MAIN.C: 268: switch (mtState) {
  1022  019D  29F1               	goto	l6463
  1023  019E                     l6403:	
  1024                           
  1025                           ;MAIN.C: 270: case 2:
  1026                           ;MAIN.C: 271: if ((idop > 1) && (idop < 6))
  1027  019E  3002               	movlw	2
  1028  019F  0257               	subwf	main@idop,w
  1029  01A0  1C03               	skipc
  1030  01A1  29AB               	goto	l6409
  1031  01A2  3006               	movlw	6
  1032  01A3  0257               	subwf	main@idop,w
  1033  01A4  1803               	skipnc
  1034  01A5  29AB               	goto	l6409
  1035  01A6  3000               	movlw	0
  1036                           
  1037                           ;MAIN.C: 272: {
  1038                           ;MAIN.C: 273: setState(0, 0);
  1039  01A7  01F2               	clrf	?_setState
  1040  01A8  01F3               	clrf	?_setState+1
  1041  01A9  23E5               	fcall	_setState
  1042                           
  1043                           ;MAIN.C: 275: }
  1044  01AA  29FC               	goto	l4175
  1045  01AB                     l6409:	
  1046                           
  1047                           ;MAIN.C: 276: else if (idop == 1)
  1048  01AB  0B57               	decfsz	main@idop,w
  1049  01AC  29FC               	goto	l4175
  1050  01AD                     L1:	
  1051                           
  1052                           ;MAIN.C: 277: {
  1053                           ;MAIN.C: 279: id_clear(2, 5);
  1054  01AD  3005               	movlw	5
  1055  01AE  00C2               	movwf	?_id_clear
  1056  01AF  3002               	movlw	2
  1057  01B0  22A5               	fcall	_id_clear
  1058  01B1  3003               	movlw	3
  1059                           
  1060                           ;MAIN.C: 280: setState(3, 0);
  1061  01B2  01F2               	clrf	?_setState
  1062  01B3  01F3               	clrf	?_setState+1
  1063  01B4  23E5               	fcall	_setState
  1064                           
  1065                           ;MAIN.C: 281: tmp = 1;
  1066  01B5  01D6               	clrf	main@tmp
  1067  01B6  0AD6               	incf	main@tmp,f
  1068  01B7  29FC               	goto	l4175
  1069  01B8                     l6417:	
  1070                           
  1071                           ;MAIN.C: 297: if (idop == 1 && idState == 0) {
  1072  01B8  0B57               	decfsz	main@idop,w
  1073  01B9  29BD               	goto	l6427
  1074  01BA  08D5               	movf	main@idState,f
  1075  01BB  1903               	btfsc	3,2
  1076  01BC  29AD               	goto	L1
  1077  01BD                     l6427:	
  1078                           ;MAIN.C: 300: setState(3, 0);
  1079                           
  1080                           ;MAIN.C: 299: id_clear(2, 5);
  1081                           
  1082                           
  1083                           ;MAIN.C: 309: else if (idop == 2 && idState == 0) {
  1084  01BD  0857               	movf	main@idop,w
  1085  01BE  3A02               	xorlw	2
  1086  01BF  1D03               	skipz
  1087  01C0  29FC               	goto	l4175
  1088  01C1  08D5               	movf	main@idState,f
  1089  01C2  1D03               	skipz
  1090  01C3  29FC               	goto	l4175
  1091                           
  1092                           ;MAIN.C: 311: id_clear(3, 5);
  1093  01C4  3005               	movlw	5
  1094  01C5  00C2               	movwf	?_id_clear
  1095  01C6  3003               	movlw	3
  1096  01C7  22A5               	fcall	_id_clear
  1097  01C8  3005               	movlw	5
  1098                           
  1099                           ;MAIN.C: 312: setState(5, 0);
  1100  01C9  01F2               	clrf	?_setState
  1101  01CA  01F3               	clrf	?_setState+1
  1102  01CB  23E5               	fcall	_setState
  1103                           
  1104                           ;MAIN.C: 313: tmp = 2;
  1105  01CC  3002               	movlw	2
  1106  01CD  00D6               	movwf	main@tmp
  1107  01CE  29FC               	goto	l4175
  1108  01CF                     l6437:	
  1109                           
  1110                           ;MAIN.C: 324: if (idState == 0) {
  1111  01CF  08D5               	movf	main@idState,f
  1112  01D0  1D03               	skipz
  1113  01D1  29FC               	goto	l4175
  1114                           
  1115                           ;MAIN.C: 331: if ( idop != 1) {
  1116  01D2  0357               	decf	main@idop,w
  1117  01D3  1903               	skipnz
  1118  01D4  29FC               	goto	l4175
  1119  01D5  3006               	movlw	6
  1120                           
  1121                           ;MAIN.C: 332: tmp++;
  1122  01D6  0AD6               	incf	main@tmp,f
  1123                           
  1124                           ;MAIN.C: 334: if (tmp <= 5) {
  1125  01D7  0256               	subwf	main@tmp,w
  1126  01D8  1803               	skipnc
  1127  01D9  29FC               	goto	l4175
  1128  01DA                     l6445:	
  1129                           
  1130                           ;MAIN.C: 335: id_replate(tmp, keyID, buffTag);
  1131  01DA  305D               	movlw	_keyID& (0+255)
  1132  01DB  00BE               	movwf	?_id_replate
  1133  01DC  3025               	movlw	_buffTag& (0+255)
  1134  01DD  00BF               	movwf	?_id_replate+1
  1135  01DE  0856               	movf	main@tmp,w
  1136  01DF  2249               	fcall	_id_replate
  1137                           
  1138                           ;MAIN.C: 336: timeTick = 0;
  1139  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1140  01E1  01DA               	clrf	_timeTick
  1141  01E2  01DB               	clrf	_timeTick+1
  1142  01E3  29FC               	goto	l4175
  1143  01E4                     l6449:	
  1144                           
  1145                           ;MAIN.C: 359: if (idState == 0) {
  1146  01E4  08D5               	movf	main@idState,f
  1147  01E5  1D03               	skipz
  1148  01E6  29FC               	goto	l4175
  1149                           
  1150                           ;MAIN.C: 360: if ( idop > 2) {
  1151  01E7  3003               	movlw	3
  1152  01E8  0257               	subwf	main@idop,w
  1153  01E9  1C03               	skipc
  1154  01EA  29FC               	goto	l4175
  1155  01EB  3006               	movlw	6
  1156                           
  1157                           ;MAIN.C: 361: tmp++;
  1158  01EC  0AD6               	incf	main@tmp,f
  1159                           
  1160                           ;MAIN.C: 363: if (tmp <= 5) {
  1161  01ED  0256               	subwf	main@tmp,w
  1162  01EE  1803               	skipnc
  1163  01EF  29FC               	goto	l4175
  1164  01F0  29DA               	goto	l6445
  1165  01F1                     l6463:	
  1166                           ;MAIN.C: 364: id_replate(tmp, keyID, buffTag);
  1167                           
  1168  01F1  085C               	movf	_mtState,w
  1169                           
  1170                           ; Switch size 1, requested type "space"
  1171                           ; Number of cases is 6, Range of values is 0 to 6
  1172                           ; switch strategies available:
  1173                           ; Name         Instructions Cycles
  1174                           ; direct_byte           13     6 (fixed)
  1175                           ; simple_byte           19    10 (average)
  1176                           ; jumptable            260     6 (fixed)
  1177                           ; rangetable            11     6 (fixed)
  1178                           ; spacedrange           20     9 (fixed)
  1179                           ; locatedrange           7     3 (fixed)
  1180                           ;	Chosen strategy is direct_byte
  1181  01F2  0084               	movwf	4
  1182  01F3  3007               	movlw	7
  1183  01F4  0204               	subwf	4,w
  1184  01F5  1803               	skipnc
  1185  01F6  29FC               	goto	l4175
  1186  01F7  3004               	movlw	high S6529
  1187  01F8  008A               	movwf	10
  1188  01F9  3000               	movlw	low S6529
  1189  01FA  0704               	addwf	4,w
  1190  01FB  0082               	movwf	2
  1191  01FC                     l4175:	
  1192  01FC  309F               	movlw	159
  1193                           
  1194                           ;MAIN.C: 389: idState = 1;
  1195  01FD  01D5               	clrf	main@idState
  1196  01FE  0AD5               	incf	main@idState,f
  1197                           
  1198                           ;MAIN.C: 390: _delay((unsigned long)((61)*(8000000/4000.0)));
  1199  01FF  00D3               	movwf	??_main+1
  1200  0200  306F               	movlw	111
  1201  0201  00D2               	movwf	??_main
  1202  0202                     u1667:	
  1203  0202  0BD2               	decfsz	??_main,f
  1204  0203  2A02               	goto	u1667
  1205  0204  0BD3               	decfsz	??_main+1,f
  1206  0205  2A02               	goto	u1667
  1207  0206  2A07               	nop2
  1208                           
  1209                           ;MAIN.C: 391: }
  1210  0207  2A15               	goto	l6471
  1211  0208                     l6467:	
  1212  0208  3002               	movlw	2
  1213                           
  1214                           ;MAIN.C: 392: else {
  1215                           ;MAIN.C: 393: idState = 0;
  1216  0209  01D5               	clrf	main@idState
  1217                           
  1218                           ;MAIN.C: 394: _delay((unsigned long)((150)*(8000000/4000.0)));
  1219  020A  00D4               	movwf	??_main+2
  1220  020B  3086               	movlw	134
  1221  020C  00D3               	movwf	??_main+1
  1222  020D  3099               	movlw	153
  1223  020E  00D2               	movwf	??_main
  1224  020F                     u1677:	
  1225  020F  0BD2               	decfsz	??_main,f
  1226  0210  2A0F               	goto	u1677
  1227  0211  0BD3               	decfsz	??_main+1,f
  1228  0212  2A0F               	goto	u1677
  1229  0213  0BD4               	decfsz	??_main+2,f
  1230  0214  2A0F               	goto	u1677
  1231  0215                     l6471:	
  1232                           
  1233                           ;MAIN.C: 395: }
  1234                           ;MAIN.C: 399: if ((timeOut != 0) && ( timeTick > timeOut)) {
  1235  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1236  0216  0859               	movf	_timeOut+1,w
  1237  0217  0458               	iorwf	_timeOut,w
  1238  0218  1903               	skipnz
  1239  0219  2A3F               	goto	l6487
  1240  021A  085B               	movf	_timeTick+1,w
  1241  021B  0259               	subwf	_timeOut+1,w
  1242  021C  1D03               	skipz
  1243  021D  2A20               	goto	u1635
  1244  021E  085A               	movf	_timeTick,w
  1245  021F  0258               	subwf	_timeOut,w
  1246  0220                     u1635:	
  1247  0220  1C03               	btfss	3,0
  1248  0221  2A34               	goto	l6485
  1249  0222  2A3F               	goto	l6487
  1250  0223                     l6477:	
  1251                           
  1252                           ;MAIN.C: 404: setState(2, 60);
  1253  0223  303C               	movlw	60
  1254  0224  00F2               	movwf	?_setState
  1255  0225  3002               	movlw	2
  1256  0226  01F3               	clrf	?_setState+1
  1257  0227  23E5               	fcall	_setState
  1258                           
  1259                           ;MAIN.C: 406: break;
  1260  0228  2A3F               	goto	l6487
  1261  0229                     l6479:	
  1262                           
  1263                           ;MAIN.C: 408: setState(6, 7);
  1264  0229  3007               	movlw	7
  1265  022A  00F2               	movwf	?_setState
  1266  022B  3006               	movlw	6
  1267  022C  01F3               	clrf	?_setState+1
  1268  022D  23E5               	fcall	_setState
  1269                           
  1270                           ;MAIN.C: 409: break;
  1271  022E  2A3F               	goto	l6487
  1272  022F                     l6481:	
  1273  022F  3002               	movlw	2
  1274                           
  1275                           ;MAIN.C: 411: setState(2, 0);
  1276  0230  01F2               	clrf	?_setState
  1277  0231  01F3               	clrf	?_setState+1
  1278  0232  23E5               	fcall	_setState
  1279                           
  1280                           ;MAIN.C: 414: break;
  1281  0233  2A3F               	goto	l6487
  1282  0234                     l6485:	
  1283  0234  085C               	movf	_mtState,w
  1284                           
  1285                           ; Switch size 1, requested type "space"
  1286                           ; Number of cases is 3, Range of values is 1 to 6
  1287                           ; switch strategies available:
  1288                           ; Name         Instructions Cycles
  1289                           ; simple_byte           10     6 (average)
  1290                           ; direct_byte           15     9 (fixed)
  1291                           ; jumptable            263     9 (fixed)
  1292                           ;	Chosen strategy is simple_byte
  1293  0235  3A01               	xorlw	1	; case 1
  1294  0236  1903               	skipnz
  1295  0237  2A23               	goto	l6477
  1296  0238  3A03               	xorlw	3	; case 2
  1297  0239  1903               	skipnz
  1298  023A  2A29               	goto	l6479
  1299  023B  3A04               	xorlw	4	; case 6
  1300  023C  1903               	skipnz
  1301  023D  2A2F               	goto	l6481
  1302  023E  2A3F               	goto	l6487
  1303  023F                     l6487:	
  1304                           
  1305                           ;MAIN.C: 417: }
  1306                           ;MAIN.C: 420: if (mtState == 0) RA3 = 1;
  1307  023F  08DC               	movf	_mtState,f
  1308  0240  1D03               	skipz
  1309  0241  2A44               	goto	l4200
  1310  0242  1585               	bsf	5,3
  1311  0243  2A45               	goto	l6491
  1312  0244                     l4200:	
  1313                           
  1314                           ;MAIN.C: 421: else RA3 = 0;
  1315  0244  1185               	bcf	5,3
  1316  0245                     l6491:	
  1317                           
  1318                           ;MAIN.C: 471: timeTick++;
  1319  0245  0ADA               	incf	_timeTick,f
  1320  0246  1903               	skipnz
  1321  0247  0ADB               	incf	_timeTick+1,f
  1322  0248  2993               	goto	l6397
  1323  0249                     __end_of_main:	
  1324                           
  1325                           	psect	swtext1
  1326  0400                     __pswtext1:	
  1327  0400                     S6529:	
  1328  0400  29FC               	ljmp	l4175
  1329  0401  299E               	ljmp	l6403
  1330  0402  299E               	ljmp	l6403
  1331  0403  29CF               	ljmp	l6437
  1332  0404  29FC               	ljmp	l4175
  1333  0405  29E4               	ljmp	l6449
  1334  0406  29B8               	ljmp	l6417
  1335                           
  1336                           	psect	text437
  1337  02A5                     __ptext437:	
  1338 ;; =============== function _main ends ============
  1339                           
  1340                           
  1341 ;; *************** function _id_clear *****************
  1342 ;; Defined at:
  1343 ;;		line 181 in file "MAIN.C"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  idMin           1    wreg     unsigned char 
  1346 ;;  idMax           1    4[BANK0 ] unsigned char 
  1347 ;; Auto vars:     Size  Location     Type
  1348 ;;  idMin           1   10[BANK0 ] unsigned char 
  1349 ;;  tmp             5    5[BANK0 ] unsigned char [5]
  1350 ;; Return value:  Size  Location     Type
  1351 ;;		None               void
  1352 ;; Registers used:
  1353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 20/0
  1356 ;;		On exit  : 20/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMMON   BANK0   BANK1
  1359 ;;      Params:         0       1       0
  1360 ;;      Locals:         0       6       0
  1361 ;;      Temps:          0       0       0
  1362 ;;      Totals:         0       7       0
  1363 ;;Total ram usage:        7 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    4
  1366 ;; This function calls:
  1367 ;;		_id_replate
  1368 ;; This function is called by:
  1369 ;;		_main
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372  02A5                     _id_clear:	
  1373                           
  1374                           ; Regs used in _id_clear: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1375                           ;id_clear@idMin stored from wreg
  1376  02A5  00C8               	movwf	id_clear@idMin
  1377                           
  1378                           ;MAIN.C: 182: unsigned char tmp[5] = {0xff, 0xff, 0xff, 0xff, 0xff};
  1379  02A6  3043               	movlw	id_clear@tmp& (0+255)
  1380  02A7  0084               	movwf	4
  1381  02A8  0820               	movf	id_clear@F1097,w
  1382  02A9  1383               	bcf	3,7	;select IRP bank0
  1383  02AA  0080               	movwf	0
  1384  02AB  0A84               	incf	4,f
  1385  02AC  0821               	movf	id_clear@F1097+1,w
  1386  02AD  0080               	movwf	0
  1387  02AE  0A84               	incf	4,f
  1388  02AF  0822               	movf	id_clear@F1097+2,w
  1389  02B0  0080               	movwf	0
  1390  02B1  0A84               	incf	4,f
  1391  02B2  0823               	movf	id_clear@F1097+3,w
  1392  02B3  0080               	movwf	0
  1393  02B4  0A84               	incf	4,f
  1394  02B5  0824               	movf	id_clear@F1097+4,w
  1395  02B6  0080               	movwf	0
  1396  02B7                     l6363:	
  1397  02B7  0848               	movf	id_clear@idMin,w
  1398  02B8  0242               	subwf	id_clear@idMax,w
  1399  02B9  1C03               	btfss	3,0
  1400  02BA  0008               	return
  1401                           
  1402                           ;MAIN.C: 184: id_replate(idMin, tmp, buffTag);
  1403  02BB  3043               	movlw	id_clear@tmp& (0+255)
  1404  02BC  00BE               	movwf	?_id_replate
  1405  02BD  3025               	movlw	_buffTag& (0+255)
  1406  02BE  00BF               	movwf	?_id_replate+1
  1407  02BF  0848               	movf	id_clear@idMin,w
  1408  02C0  2249               	fcall	_id_replate
  1409  02C1  1283               	bcf	3,5	;RP0=0, select bank0
  1410  02C2  0AC8               	incf	id_clear@idMin,f
  1411  02C3  2AB7               	goto	l6363
  1412  02C4                     __end_of_id_clear:	
  1413                           
  1414                           	psect	text438
  1415  0249                     __ptext438:	
  1416 ;; =============== function _id_clear ends ============
  1417                           
  1418                           
  1419 ;; *************** function _id_replate *****************
  1420 ;; Defined at:
  1421 ;;		line 167 in file "MAIN.C"
  1422 ;; Parameters:    Size  Location     Type
  1423 ;;  id              1    wreg     unsigned char 
  1424 ;;  Cont            1    0[BANK0 ] PTR unsigned char 
  1425 ;;		 -> id_clear@tmp(5), keyID(5), 
  1426 ;;  buff            1    1[BANK0 ] PTR unsigned char 
  1427 ;;		 -> buffTag(25), 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  id              1   11[COMMON] unsigned char 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;		None               void
  1432 ;; Registers used:
  1433 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 20/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0   BANK1
  1439 ;;      Params:         0       2       0
  1440 ;;      Locals:         1       0       0
  1441 ;;      Temps:          0       2       0
  1442 ;;      Totals:         1       4       0
  1443 ;;Total ram usage:        5 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    3
  1446 ;; This function calls:
  1447 ;;		___bmul
  1448 ;;		_eepromWriteBlock
  1449 ;; This function is called by:
  1450 ;;		_id_clear
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454  0249                     _id_replate:	
  1455                           
  1456                           ; Regs used in _id_replate: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1457                           ;id_replate@id stored from wreg
  1458  0249  00FB               	movwf	id_replate@id
  1459                           
  1460                           ;MAIN.C: 168: id = (id - 1) * 5;
  1461  024A  3005               	movlw	5
  1462  024B  00F2               	movwf	?___bmul
  1463  024C  087B               	movf	id_replate@id,w
  1464  024D  3EFF               	addlw	255
  1465  024E  23CB               	fcall	___bmul
  1466  024F  00FB               	movwf	id_replate@id
  1467                           
  1468                           ;MAIN.C: 169: {
  1469                           ;MAIN.C: 170: {
  1470                           ;MAIN.C: 171: *(buff + id) = *Cont;
  1471  0250  083E               	movf	id_replate@Cont,w
  1472  0251  0084               	movwf	4
  1473  0252  1383               	bcf	3,7	;select IRP bank0
  1474  0253  0800               	movf	0,w
  1475  0254  00C0               	movwf	??_id_replate
  1476  0255  087B               	movf	id_replate@id,w
  1477  0256  073F               	addwf	id_replate@buff,w
  1478  0257  00C1               	movwf	??_id_replate+1
  1479  0258  0084               	movwf	4
  1480  0259  0840               	movf	??_id_replate,w
  1481  025A  0080               	movwf	0
  1482                           
  1483                           ;MAIN.C: 172: *(buff + 1 + id) = *(Cont + 1);
  1484  025B  083E               	movf	id_replate@Cont,w
  1485  025C  3E01               	addlw	1
  1486  025D  227D               	fcall	PL3	;call to abstracted procedure
  1487  025E  3E01               	addlw	1
  1488  025F  0084               	movwf	4
  1489  0260  0840               	movf	??_id_replate,w
  1490  0261  0080               	movwf	0
  1491                           
  1492                           ;MAIN.C: 173: *(buff + 2 + id) = *(Cont + 2);
  1493  0262  083E               	movf	id_replate@Cont,w
  1494  0263  3E02               	addlw	2
  1495  0264  227D               	fcall	PL3	;call to abstracted procedure
  1496  0265  3E02               	addlw	2
  1497  0266  0084               	movwf	4
  1498  0267  0840               	movf	??_id_replate,w
  1499  0268  0080               	movwf	0
  1500                           
  1501                           ;MAIN.C: 174: *(buff + 3 + id) = *(Cont + 3);
  1502  0269  083E               	movf	id_replate@Cont,w
  1503  026A  3E03               	addlw	3
  1504  026B  227D               	fcall	PL3	;call to abstracted procedure
  1505  026C  3E03               	addlw	3
  1506  026D  0084               	movwf	4
  1507  026E  0840               	movf	??_id_replate,w
  1508  026F  0080               	movwf	0
  1509                           
  1510                           ;MAIN.C: 175: *(buff + 4 + id) = *(Cont + 4);
  1511  0270  083E               	movf	id_replate@Cont,w
  1512  0271  3E04               	addlw	4
  1513  0272  227D               	fcall	PL3	;call to abstracted procedure
  1514  0273  3E04               	addlw	4
  1515  0274  0084               	movwf	4
  1516  0275  0840               	movf	??_id_replate,w
  1517  0276  0080               	movwf	0
  1518                           
  1519                           ;MAIN.C: 176: }
  1520                           ;MAIN.C: 177: }
  1521                           ;MAIN.C: 179: eepromWriteBlock(0x06, buffTag, 25);
  1522  0277  3025               	movlw	_buffTag& (0+255)
  1523  0278  00F6               	movwf	?_eepromWriteBlock
  1524  0279  3019               	movlw	25
  1525  027A  00F7               	movwf	?_eepromWriteBlock+1
  1526  027B  3006               	movlw	6
  1527  027C  2B8A               	ljmp	_eepromWriteBlock
  1528  027D                     __end_of_id_replate:	
  1529  027D                     PL3:	
  1530  027D  0084               	movwf	4
  1531  027E  0800               	movf	0,w
  1532  027F  00C0               	movwf	??_id_replate
  1533  0280  087B               	movf	id_replate@id,w
  1534  0281  073F               	addwf	id_replate@buff,w
  1535  0282  00C1               	movwf	??_id_replate+1
  1536  0283  0008               	return
  1537                           
  1538                           	psect	text439
  1539  038A                     __ptext439:	
  1540 ;; =============== function _id_replate ends ============
  1541                           
  1542                           
  1543 ;; *************** function _eepromWriteBlock *****************
  1544 ;; Defined at:
  1545 ;;		line 43 in file "ms82_eeprom.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  addStart        1    wreg     unsigned char 
  1548 ;;  buff            1    6[COMMON] PTR unsigned char 
  1549 ;;		 -> buffTag(25), 
  1550 ;;  len             1    7[COMMON] unsigned char 
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;  addStart        1    9[COMMON] unsigned char 
  1553 ;;  i               1   10[COMMON] unsigned char 
  1554 ;; Return value:  Size  Location     Type
  1555 ;;		None               void
  1556 ;; Registers used:
  1557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1558 ;; Tracked objects:
  1559 ;;		On entry : 120/0
  1560 ;;		On exit  : 0/0
  1561 ;;		Unchanged: 0/0
  1562 ;; Data sizes:     COMMON   BANK0   BANK1
  1563 ;;      Params:         2       0       0
  1564 ;;      Locals:         2       0       0
  1565 ;;      Temps:          1       0       0
  1566 ;;      Totals:         5       0       0
  1567 ;;Total ram usage:        5 bytes
  1568 ;; Hardware stack levels used:    1
  1569 ;; Hardware stack levels required when called:    2
  1570 ;; This function calls:
  1571 ;;		_eepromWriteByte
  1572 ;; This function is called by:
  1573 ;;		_id_replate
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576  038A                     _eepromWriteBlock:	
  1577                           
  1578                           ; Regs used in _eepromWriteBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1579                           ;eepromWriteBlock@addStart stored from wreg
  1580  038A  00F9               	movwf	eepromWriteBlock@addStart
  1581                           
  1582                           ;ms82_eeprom.c: 44: unsigned char i;
  1583                           ;ms82_eeprom.c: 45: for(i=0;i<len;i++){
  1584  038B  01FA               	clrf	eepromWriteBlock@i
  1585  038C                     l6341:	
  1586  038C  0877               	movf	eepromWriteBlock@len,w
  1587  038D  027A               	subwf	eepromWriteBlock@i,w
  1588  038E  1803               	btfsc	3,0
  1589  038F  0008               	return
  1590                           
  1591                           ;ms82_eeprom.c: 46: eepromWriteByte(addStart+i,buff[i]);
  1592  0390  087A               	movf	eepromWriteBlock@i,w
  1593  0391  0776               	addwf	eepromWriteBlock@buff,w
  1594  0392  00F8               	movwf	??_eepromWriteBlock
  1595  0393  0084               	movwf	4
  1596  0394  1383               	bcf	3,7	;select IRP bank0
  1597  0395  0800               	movf	0,w
  1598  0396  00F2               	movwf	?_eepromWriteByte
  1599  0397  087A               	movf	eepromWriteBlock@i,w
  1600  0398  0779               	addwf	eepromWriteBlock@addStart,w
  1601  0399  2284               	fcall	_eepromWriteByte
  1602  039A  0AFA               	incf	eepromWriteBlock@i,f
  1603  039B  2B8C               	goto	l6341
  1604  039C                     __end_of_eepromWriteBlock:	
  1605                           
  1606                           	psect	text440
  1607  035A                     __ptext440:	
  1608 ;; =============== function _eepromWriteBlock ends ============
  1609                           
  1610                           
  1611 ;; *************** function _id_search *****************
  1612 ;; Defined at:
  1613 ;;		line 159 in file "MAIN.C"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;  id_input        1    wreg     PTR unsigned char 
  1616 ;;		 -> keyID(5), 
  1617 ;;  buff            1   10[COMMON] PTR unsigned char 
  1618 ;;		 -> buffTag(25), 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;  id_input        1    0[BANK0 ] PTR unsigned char 
  1621 ;;		 -> keyID(5), 
  1622 ;;  i               1    1[BANK0 ] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      unsigned char 
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 20/0
  1629 ;;		On exit  : 20/0
  1630 ;;		Unchanged: FFEDF/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1
  1632 ;;      Params:         1       0       0
  1633 ;;      Locals:         0       2       0
  1634 ;;      Temps:          1       0       0
  1635 ;;      Totals:         2       2       0
  1636 ;;Total ram usage:        4 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		_comArr
  1641 ;;		___lbdiv
  1642 ;; This function is called by:
  1643 ;;		_main
  1644 ;; This function uses a non-reentrant model
  1645 ;;
  1646  035A                     _id_search:	
  1647                           
  1648                           ; Regs used in _id_search: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1649                           ;id_search@id_input stored from wreg
  1650  035A  00BE               	movwf	id_search@id_input
  1651                           
  1652                           ;MAIN.C: 160: unsigned char i;
  1653                           ;MAIN.C: 161: for (i = 0; i < 21; i += 5) {
  1654  035B  01BF               	clrf	id_search@i
  1655  035C                     l6321:	
  1656                           
  1657                           ;MAIN.C: 162: if (comArr(id_input, buff + i, 5, 5))
  1658  035C  083F               	movf	id_search@i,w
  1659  035D  077A               	addwf	id_search@buff,w
  1660  035E  00F2               	movwf	?_comArr
  1661  035F  3005               	movlw	5
  1662  0360  00F3               	movwf	?_comArr+1
  1663  0361  00F4               	movwf	?_comArr+2
  1664  0362  083E               	movf	id_search@id_input,w
  1665  0363  2302               	fcall	_comArr
  1666  0364  3A00               	xorlw	0
  1667                           
  1668                           ;MAIN.C: 163: return i / 5 + 1;
  1669  0365  3005               	movlw	5
  1670  0366  1903               	skipnz
  1671  0367  2B6E               	goto	L2
  1672  0368  00F2               	movwf	?___lbdiv
  1673  0369  083F               	movf	id_search@i,w
  1674  036A  233F               	fcall	___lbdiv
  1675  036B  00FB               	movwf	??_id_search
  1676  036C  0A7B               	incf	??_id_search,w
  1677  036D  0008               	return
  1678  036E                     L2:	
  1679  036E  07BF               	addwf	id_search@i,f
  1680  036F  3015               	movlw	21
  1681  0370  023F               	subwf	id_search@i,w
  1682  0371  1803               	btfsc	3,0
  1683                           
  1684                           ;MAIN.C: 164: }
  1685                           ;MAIN.C: 165: return 255;
  1686  0372  34FF               	retlw	255
  1687  0373  2B5C               	goto	l6321
  1688  0374                     __end_of_id_search:	
  1689                           
  1690                           	psect	text441
  1691  000B                     __ptext441:	
  1692 ;; =============== function _id_search ends ============
  1693                           
  1694                           
  1695 ;; *************** function _get_RFID *****************
  1696 ;; Defined at:
  1697 ;;		line 20 in file "rfid125.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;		None
  1700 ;; Auto vars:     Size  Location     Type
  1701 ;;  RF_serial_55   11    0[BANK0 ] unsigned char [11]
  1702 ;;  timeOutVal      2   17[BANK0 ] unsigned int 
  1703 ;;  ii              1   19[BANK0 ] unsigned char 
  1704 ;;  flag_RFID_la    1   16[BANK0 ] unsigned char 
  1705 ;;  i               1   15[BANK0 ] unsigned char 
  1706 ;;  j               1   14[BANK0 ] unsigned char 
  1707 ;;  even_row        1   13[BANK0 ] unsigned char 
  1708 ;;  even_col        1   12[BANK0 ] unsigned char 
  1709 ;;  flag_RFID_sy    1   11[BANK0 ] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      unsigned char 
  1712 ;; Registers used:
  1713 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1714 ;; Tracked objects:
  1715 ;;		On entry : 20/0
  1716 ;;		On exit  : 20/0
  1717 ;;		Unchanged: FFEDF/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1
  1719 ;;      Params:         0       0       0
  1720 ;;      Locals:         0      20       0
  1721 ;;      Temps:          1       0       0
  1722 ;;      Totals:         1      20       0
  1723 ;;Total ram usage:       21 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    2
  1726 ;; This function calls:
  1727 ;;		_timerOut
  1728 ;;		___lbdiv
  1729 ;; This function is called by:
  1730 ;;		_main
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733  000B                     _get_RFID:	
  1734  000B  3010               	movlw	16
  1735                           
  1736                           ;rfid125.c: 22: unsigned char RF_serial_55bits[11];
  1737                           ;rfid125.c: 23: unsigned int timeOutVal;
  1738                           ;rfid125.c: 24: unsigned char i,ii,j;
  1739                           ;rfid125.c: 25: unsigned char flag_RFID_syn, flag_RFID_last;
  1740                           ;rfid125.c: 26: unsigned char even_row, even_col;
  1741                           ;rfid125.c: 29: flag_RFID_syn = 0;
  1742                           
  1743                           ; Regs used in _get_RFID: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1744  000C  01C9               	clrf	get_RFID@flag_RFID_syn
  1745                           
  1746                           ;rfid125.c: 32: i=16;
  1747  000D  00CD               	movwf	get_RFID@i
  1748  000E                     l6097:	
  1749                           
  1750                           ;rfid125.c: 34: {
  1751                           ;rfid125.c: 35: timeOutVal=timerOut(1,150);
  1752  000E  3096               	movlw	150
  1753  000F  00F2               	movwf	?_timerOut
  1754  0010  3001               	movlw	1
  1755  0011  01F3               	clrf	?_timerOut+1
  1756  0012  22E3               	fcall	_timerOut
  1757                           
  1758                           ;rfid125.c: 36: if(timeOutVal==0) return 0;
  1759  0013  2143               	fcall	PL2	;call to abstracted procedure
  1760  0014  1903               	btfsc	3,2
  1761  0015  3400               	retlw	0
  1762                           
  1763                           ;rfid125.c: 38: timeOutVal=timerOut(0,150);
  1764  0016  3096               	movlw	150
  1765  0017  00F2               	movwf	?_timerOut
  1766  0018  3000               	movlw	0
  1767  0019  01F3               	clrf	?_timerOut+1
  1768  001A  22E3               	fcall	_timerOut
  1769                           
  1770                           ;rfid125.c: 39: if(timeOutVal==0) return 0;
  1771  001B  2143               	fcall	PL2	;call to abstracted procedure
  1772  001C  1903               	btfsc	3,2
  1773  001D  3400               	retlw	0
  1774  001E  3000               	movlw	0
  1775                           
  1776                           ;rfid125.c: 41: i--;
  1777  001F  03CD               	decf	get_RFID@i,f
  1778                           
  1779                           ;rfid125.c: 42: }
  1780                           ;rfid125.c: 43: while(timeOutVal<72 && i>0);
  1781  0020  0250               	subwf	get_RFID@timeOutVal+1,w
  1782  0021  3048               	movlw	72
  1783  0022  1903               	skipnz
  1784  0023  024F               	subwf	get_RFID@timeOutVal,w
  1785  0024  1803               	skipnc
  1786  0025  2829               	goto	l2459
  1787  0026  08CD               	movf	get_RFID@i,f
  1788  0027  1D03               	skipz
  1789  0028  280E               	goto	l6097
  1790  0029                     l2459:	
  1791                           
  1792                           ;rfid125.c: 44: flag_RFID_last = 1;
  1793  0029  01CE               	clrf	get_RFID@flag_RFID_last
  1794  002A  0ACE               	incf	get_RFID@flag_RFID_last,f
  1795                           
  1796                           ;rfid125.c: 45: i = 0;
  1797  002B  01CD               	clrf	get_RFID@i
  1798  002C                     l6185:	
  1799                           ;rfid125.c: 46: while(i<64)
  1800                           
  1801  002C  3040               	movlw	64
  1802  002D  024D               	subwf	get_RFID@i,w
  1803  002E  1803               	btfsc	3,0
  1804  002F  2884               	goto	l6187
  1805                           
  1806                           ;rfid125.c: 47: {
  1807                           ;rfid125.c: 48: for(ii=0;ii<9;ii++)
  1808  0030  01D1               	clrf	get_RFID@ii
  1809  0031                     l6127:	
  1810                           
  1811                           ;rfid125.c: 49: {
  1812                           ;rfid125.c: 50: timeOutVal=timerOut(flag_RFID_last,150);
  1813  0031  2150               	fcall	PL5	;call to abstracted procedure
  1814  0032  22E3               	fcall	_timerOut
  1815                           
  1816                           ;rfid125.c: 51: if(timeOutVal==0) return 0;
  1817  0033  2143               	fcall	PL2	;call to abstracted procedure
  1818  0034  1903               	btfsc	3,2
  1819  0035  3400               	retlw	0
  1820                           
  1821                           ;rfid125.c: 53: if(0==flag_RFID_last && timeOutVal<=72 ||
  1822                           ;rfid125.c: 54: 1==flag_RFID_last && timeOutVal>72)
  1823  0036  08CE               	movf	get_RFID@flag_RFID_last,f
  1824  0037  1D03               	skipz
  1825  0038  2840               	goto	l6139
  1826  0039  3000               	movlw	0
  1827  003A  0250               	subwf	get_RFID@timeOutVal+1,w
  1828  003B  3049               	movlw	73
  1829  003C  1903               	skipnz
  1830  003D  024F               	subwf	get_RFID@timeOutVal,w
  1831  003E  1C03               	skipc
  1832  003F  2849               	goto	l6143
  1833  0040                     l6139:	
  1834  0040  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  1835  0041  2857               	goto	l6157
  1836  0042  3000               	movlw	0
  1837  0043  0250               	subwf	get_RFID@timeOutVal+1,w
  1838  0044  3049               	movlw	73
  1839  0045  1903               	skipnz
  1840  0046  024F               	subwf	get_RFID@timeOutVal,w
  1841  0047  1C03               	skipc
  1842  0048  2857               	goto	l6157
  1843  0049                     l6143:	
  1844                           
  1845                           ;rfid125.c: 55: {
  1846                           ;rfid125.c: 56: if(!flag_RFID_last)
  1847  0049  08CE               	movf	get_RFID@flag_RFID_last,f
  1848  004A  1D03               	skipz
  1849  004B  2854               	goto	l6153
  1850                           
  1851                           ;rfid125.c: 57: {
  1852                           ;rfid125.c: 58: timeOutVal=timerOut(1,72);
  1853  004C  3048               	movlw	72
  1854  004D  00F2               	movwf	?_timerOut
  1855  004E  3001               	movlw	1
  1856  004F  01F3               	clrf	?_timerOut+1
  1857  0050  22E3               	fcall	_timerOut
  1858                           
  1859                           ;rfid125.c: 59: if(timeOutVal==0) return 0;
  1860  0051  2143               	fcall	PL2	;call to abstracted procedure
  1861  0052  1903               	btfsc	3,2
  1862  0053  3400               	retlw	0
  1863  0054                     l6153:	
  1864                           
  1865                           ;rfid125.c: 60: }
  1866                           ;rfid125.c: 61: flag_RFID_last = 0;
  1867  0054  01CE               	clrf	get_RFID@flag_RFID_last
  1868                           
  1869                           ;rfid125.c: 62: i++;
  1870  0055  0ACD               	incf	get_RFID@i,f
  1871                           
  1872                           ;rfid125.c: 63: }
  1873  0056  2879               	goto	l6177
  1874  0057                     l6157:	
  1875                           
  1876                           ;rfid125.c: 64: else
  1877                           ;rfid125.c: 65: if(0==flag_RFID_last && timeOutVal>72 ||
  1878                           ;rfid125.c: 66: 1==flag_RFID_last && timeOutVal<=72)
  1879  0057  08CE               	movf	get_RFID@flag_RFID_last,f
  1880  0058  1D03               	skipz
  1881  0059  2861               	goto	l6161
  1882  005A  3000               	movlw	0
  1883  005B  0250               	subwf	get_RFID@timeOutVal+1,w
  1884  005C  3049               	movlw	73
  1885  005D  1903               	skipnz
  1886  005E  024F               	subwf	get_RFID@timeOutVal,w
  1887  005F  1803               	skipnc
  1888  0060  286A               	goto	l6165
  1889  0061                     l6161:	
  1890  0061  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  1891  0062  2879               	goto	l6177
  1892  0063  3000               	movlw	0
  1893  0064  0250               	subwf	get_RFID@timeOutVal+1,w
  1894  0065  3049               	movlw	73
  1895  0066  1903               	skipnz
  1896  0067  024F               	subwf	get_RFID@timeOutVal,w
  1897  0068  1803               	skipnc
  1898  0069  2879               	goto	l6177
  1899  006A                     l6165:	
  1900                           
  1901                           ;rfid125.c: 67: {
  1902                           ;rfid125.c: 68: if(flag_RFID_last)
  1903  006A  084E               	movf	get_RFID@flag_RFID_last,w
  1904  006B  1903               	btfsc	3,2
  1905  006C  2875               	goto	l2478
  1906                           
  1907                           ;rfid125.c: 69: {
  1908                           ;rfid125.c: 70: timeOutVal=timerOut(0,72);
  1909  006D  3048               	movlw	72
  1910  006E  00F2               	movwf	?_timerOut
  1911  006F  3000               	movlw	0
  1912  0070  01F3               	clrf	?_timerOut+1
  1913  0071  22E3               	fcall	_timerOut
  1914                           
  1915                           ;rfid125.c: 71: if(timeOutVal==0) return 0;
  1916  0072  2143               	fcall	PL2	;call to abstracted procedure
  1917  0073  1903               	btfsc	3,2
  1918  0074  3400               	retlw	0
  1919  0075                     l2478:	
  1920                           
  1921                           ;rfid125.c: 72: }
  1922                           ;rfid125.c: 73: flag_RFID_last = 1;
  1923  0075  01CE               	clrf	get_RFID@flag_RFID_last
  1924  0076  0ACE               	incf	get_RFID@flag_RFID_last,f
  1925                           
  1926                           ;rfid125.c: 74: i++;
  1927  0077  0ACD               	incf	get_RFID@i,f
  1928                           
  1929                           ;rfid125.c: 76: break;
  1930  0078  287E               	goto	l6181
  1931  0079                     l6177:	
  1932  0079  3009               	movlw	9
  1933  007A  0AD1               	incf	get_RFID@ii,f
  1934  007B  0251               	subwf	get_RFID@ii,w
  1935  007C  1C03               	skipc
  1936  007D  2831               	goto	l6127
  1937  007E                     l6181:	
  1938                           
  1939                           ;rfid125.c: 77: }
  1940                           ;rfid125.c: 79: }
  1941                           ;rfid125.c: 80: if(9==ii)
  1942  007E  0851               	movf	get_RFID@ii,w
  1943  007F  3A09               	xorlw	9
  1944  0080  1D03               	skipz
  1945  0081  282C               	goto	l6185
  1946                           
  1947                           ;rfid125.c: 81: {
  1948                           ;rfid125.c: 82: flag_RFID_syn = 1;
  1949  0082  01C9               	clrf	get_RFID@flag_RFID_syn
  1950  0083  0AC9               	incf	get_RFID@flag_RFID_syn,f
  1951  0084                     l6187:	
  1952                           ;rfid125.c: 83: break;
  1953                           
  1954                           
  1955                           ;rfid125.c: 84: }
  1956                           ;rfid125.c: 85: }
  1957                           ;rfid125.c: 87: if(!flag_RFID_syn)
  1958  0084  08C9               	movf	get_RFID@flag_RFID_syn,f
  1959  0085  1903               	btfsc	3,2
  1960  0086  3400               	retlw	0
  1961                           
  1962                           ;rfid125.c: 90: }
  1963                           ;rfid125.c: 91: for(ii=0;ii<55;ii++)
  1964  0087  01D1               	clrf	get_RFID@ii
  1965  0088                     l6199:	
  1966                           
  1967                           ;rfid125.c: 92: {
  1968                           ;rfid125.c: 93: i = ii/5;
  1969  0088  3005               	movlw	5
  1970  0089  00F2               	movwf	?___lbdiv
  1971  008A  0851               	movf	get_RFID@ii,w
  1972  008B  233F               	fcall	___lbdiv
  1973  008C  00CD               	movwf	get_RFID@i
  1974                           
  1975                           ;rfid125.c: 94: timeOutVal=timerOut(flag_RFID_last,150);
  1976  008D  2150               	fcall	PL5	;call to abstracted procedure
  1977  008E  22E3               	fcall	_timerOut
  1978                           
  1979                           ;rfid125.c: 95: if(timeOutVal==0) return 0;
  1980  008F  2143               	fcall	PL2	;call to abstracted procedure
  1981  0090  1903               	btfsc	3,2
  1982  0091  3400               	retlw	0
  1983                           
  1984                           ;rfid125.c: 97: if(0==flag_RFID_last && timeOutVal<=72 ||
  1985                           ;rfid125.c: 98: 1==flag_RFID_last && timeOutVal>72)
  1986  0092  08CE               	movf	get_RFID@flag_RFID_last,f
  1987  0093  1D03               	skipz
  1988  0094  289C               	goto	l6213
  1989  0095  3000               	movlw	0
  1990  0096  0250               	subwf	get_RFID@timeOutVal+1,w
  1991  0097  3049               	movlw	73
  1992  0098  1903               	skipnz
  1993  0099  024F               	subwf	get_RFID@timeOutVal,w
  1994  009A  1C03               	skipc
  1995  009B  28A5               	goto	l6217
  1996  009C                     l6213:	
  1997  009C  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  1998  009D  28B7               	goto	l6233
  1999  009E  3000               	movlw	0
  2000  009F  0250               	subwf	get_RFID@timeOutVal+1,w
  2001  00A0  3049               	movlw	73
  2002  00A1  1903               	skipnz
  2003  00A2  024F               	subwf	get_RFID@timeOutVal,w
  2004  00A3  1C03               	skipc
  2005  00A4  28B7               	goto	l6233
  2006  00A5                     l6217:	
  2007                           
  2008                           ;rfid125.c: 99: {
  2009                           ;rfid125.c: 100: if(!flag_RFID_last)
  2010  00A5  08CE               	movf	get_RFID@flag_RFID_last,f
  2011  00A6  1D03               	skipz
  2012  00A7  28B0               	goto	l6227
  2013                           
  2014                           ;rfid125.c: 101: {
  2015                           ;rfid125.c: 102: timeOutVal=timerOut(1,72);
  2016  00A8  3048               	movlw	72
  2017  00A9  00F2               	movwf	?_timerOut
  2018  00AA  3001               	movlw	1
  2019  00AB  01F3               	clrf	?_timerOut+1
  2020  00AC  22E3               	fcall	_timerOut
  2021                           
  2022                           ;rfid125.c: 103: if(timeOutVal==0) return 0;
  2023  00AD  2143               	fcall	PL2	;call to abstracted procedure
  2024  00AE  1903               	btfsc	3,2
  2025  00AF  3400               	retlw	0
  2026  00B0                     l6227:	
  2027                           
  2028                           ;rfid125.c: 104: }
  2029                           ;rfid125.c: 105: flag_RFID_last = 0;
  2030  00B0  01CE               	clrf	get_RFID@flag_RFID_last
  2031                           
  2032                           ;rfid125.c: 106: RF_serial_55bits[i] <<= 1;
  2033  00B1  2149               	fcall	PL4	;call to abstracted procedure
  2034                           
  2035                           ;rfid125.c: 107: RF_serial_55bits[i] |= 0x01;
  2036  00B2  084D               	movf	get_RFID@i,w
  2037  00B3  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2038  00B4  0084               	movwf	4
  2039  00B5  1400               	bsf	0,0
  2040                           
  2041                           ;rfid125.c: 108: }
  2042  00B6  28D8               	goto	l6253
  2043  00B7                     l6233:	
  2044                           
  2045                           ;rfid125.c: 109: else
  2046                           ;rfid125.c: 110: if(0==flag_RFID_last && timeOutVal>72 ||
  2047                           ;rfid125.c: 111: 1==flag_RFID_last && timeOutVal<=72)
  2048  00B7  08CE               	movf	get_RFID@flag_RFID_last,f
  2049  00B8  1D03               	skipz
  2050  00B9  28C1               	goto	l6237
  2051  00BA  3000               	movlw	0
  2052  00BB  0250               	subwf	get_RFID@timeOutVal+1,w
  2053  00BC  3049               	movlw	73
  2054  00BD  1903               	skipnz
  2055  00BE  024F               	subwf	get_RFID@timeOutVal,w
  2056  00BF  1803               	skipnc
  2057  00C0  28CA               	goto	l6241
  2058  00C1                     l6237:	
  2059  00C1  0B4E               	decfsz	get_RFID@flag_RFID_last,w
  2060  00C2  28D8               	goto	l6253
  2061  00C3  3000               	movlw	0
  2062  00C4  0250               	subwf	get_RFID@timeOutVal+1,w
  2063  00C5  3049               	movlw	73
  2064  00C6  1903               	skipnz
  2065  00C7  024F               	subwf	get_RFID@timeOutVal,w
  2066  00C8  1803               	skipnc
  2067  00C9  28D8               	goto	l6253
  2068  00CA                     l6241:	
  2069                           
  2070                           ;rfid125.c: 112: {
  2071                           ;rfid125.c: 113: if(flag_RFID_last)
  2072  00CA  084E               	movf	get_RFID@flag_RFID_last,w
  2073  00CB  1903               	btfsc	3,2
  2074  00CC  28D5               	goto	l2499
  2075                           
  2076                           ;rfid125.c: 114: {
  2077                           ;rfid125.c: 115: timeOutVal=timerOut(0,150);
  2078  00CD  3096               	movlw	150
  2079  00CE  00F2               	movwf	?_timerOut
  2080  00CF  3000               	movlw	0
  2081  00D0  01F3               	clrf	?_timerOut+1
  2082  00D1  22E3               	fcall	_timerOut
  2083                           
  2084                           ;rfid125.c: 116: if(timeOutVal==0) return 0;
  2085  00D2  2143               	fcall	PL2	;call to abstracted procedure
  2086  00D3  1903               	btfsc	3,2
  2087  00D4  3400               	retlw	0
  2088  00D5                     l2499:	
  2089                           
  2090                           ;rfid125.c: 117: }
  2091                           ;rfid125.c: 118: flag_RFID_last = 1;
  2092  00D5  01CE               	clrf	get_RFID@flag_RFID_last
  2093  00D6  0ACE               	incf	get_RFID@flag_RFID_last,f
  2094                           
  2095                           ;rfid125.c: 119: RF_serial_55bits[i] <<= 1;
  2096  00D7  2149               	fcall	PL4	;call to abstracted procedure
  2097  00D8                     l6253:	
  2098  00D8  3037               	movlw	55
  2099  00D9  0AD1               	incf	get_RFID@ii,f
  2100  00DA  0251               	subwf	get_RFID@ii,w
  2101  00DB  1C03               	skipc
  2102  00DC  2888               	goto	l6199
  2103                           
  2104                           ;rfid125.c: 120: }
  2105                           ;rfid125.c: 121: }
  2106                           ;rfid125.c: 122: if(55==ii)
  2107  00DD  0851               	movf	get_RFID@ii,w
  2108  00DE  3A37               	xorlw	55
  2109  00DF  1D03               	skipz
  2110  00E0  3400               	retlw	0
  2111                           
  2112                           ;rfid125.c: 123: {
  2113                           ;rfid125.c: 124: even_col = 0;
  2114  00E1  01CA               	clrf	get_RFID@even_col
  2115                           
  2116                           ;rfid125.c: 125: for(ii=0;ii<10;ii++)
  2117  00E2  01D1               	clrf	get_RFID@ii
  2118  00E3                     l6265:	
  2119                           
  2120                           ;rfid125.c: 126: {
  2121                           ;rfid125.c: 127: even_row = (RF_serial_55bits[ii] & 0x01);
  2122  00E3  0851               	movf	get_RFID@ii,w
  2123  00E4  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2124  00E5  0084               	movwf	4
  2125  00E6  1383               	bcf	3,7	;select IRP bank0
  2126  00E7  0800               	movf	0,w
  2127  00E8  00CB               	movwf	get_RFID@even_row
  2128  00E9  3001               	movlw	1
  2129  00EA  05CB               	andwf	get_RFID@even_row,f
  2130                           
  2131                           ;rfid125.c: 128: for(j=1;j<5;j++)
  2132  00EB  01CC               	clrf	get_RFID@j
  2133  00EC  0ACC               	incf	get_RFID@j,f
  2134  00ED                     l6275:	
  2135                           
  2136                           ;rfid125.c: 129: {
  2137                           ;rfid125.c: 130: even_row = even_row ^ ((RF_serial_55bits[ii]>>j) & 0x01);
  2138  00ED  0851               	movf	get_RFID@ii,w
  2139  00EE  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2140  00EF  0084               	movwf	4
  2141  00F0  0800               	movf	0,w
  2142  00F1  00F7               	movwf	??_get_RFID
  2143  00F2  0A4C               	incf	get_RFID@j,w
  2144  00F3  28F6               	goto	u1364
  2145  00F4                     u1365:	
  2146  00F4  1003               	clrc
  2147  00F5  0CF7               	rrf	??_get_RFID,f
  2148  00F6                     u1364:	
  2149  00F6  3EFF               	addlw	-1
  2150  00F7  1D03               	skipz
  2151  00F8  28F4               	goto	u1365
  2152  00F9  0877               	movf	??_get_RFID,w
  2153  00FA  3901               	andlw	1
  2154  00FB  06CB               	xorwf	get_RFID@even_row,f
  2155  00FC  3005               	movlw	5
  2156  00FD  0ACC               	incf	get_RFID@j,f
  2157  00FE  024C               	subwf	get_RFID@j,w
  2158  00FF  1C03               	skipc
  2159  0100  28ED               	goto	l6275
  2160                           
  2161                           ;rfid125.c: 131: }
  2162                           ;rfid125.c: 132: if(even_row & 0x01)
  2163  0101  184B               	btfsc	get_RFID@even_row,0
  2164  0102  3400               	retlw	0
  2165                           
  2166                           ;rfid125.c: 135: }
  2167                           ;rfid125.c: 137: RF_serial_55bits[ii] <<= 3;
  2168  0103  0851               	movf	get_RFID@ii,w
  2169  0104  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2170  0105  0084               	movwf	4
  2171  0106  0D80               	rlf	0,f
  2172  0107  0D80               	rlf	0,f
  2173  0108  0D00               	rlf	0,w
  2174  0109  39F8               	andlw	248
  2175  010A  0080               	movwf	0
  2176                           
  2177                           ;rfid125.c: 139: i = RF_serial_55bits[ii];
  2178  010B  0851               	movf	get_RFID@ii,w
  2179  010C  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2180  010D  0084               	movwf	4
  2181  010E  0800               	movf	0,w
  2182  010F  00CD               	movwf	get_RFID@i
  2183                           
  2184                           ;rfid125.c: 140: if( 0==ii%2 )
  2185  0110  1851               	btfsc	get_RFID@ii,0
  2186  0111  291F               	goto	l6291
  2187                           
  2188                           ;rfid125.c: 141: {
  2189                           ;rfid125.c: 142: keyID[ii/2] = (i & 0xF0);
  2190  0112  1003               	clrc
  2191  0113  0C51               	rrf	get_RFID@ii,w
  2192  0114  3E5D               	addlw	_keyID& (0+255)
  2193  0115  0084               	movwf	4
  2194  0116  084D               	movf	get_RFID@i,w
  2195  0117  0080               	movwf	0
  2196  0118  1003               	clrc
  2197  0119  0C51               	rrf	get_RFID@ii,w
  2198  011A  3E5D               	addlw	_keyID& (0+255)
  2199  011B  0084               	movwf	4
  2200  011C  30F0               	movlw	240
  2201  011D  0580               	andwf	0,f
  2202                           
  2203                           ;rfid125.c: 143: }
  2204  011E  2929               	goto	l6295
  2205  011F                     l6291:	
  2206  011F  300F               	movlw	15
  2207                           
  2208                           ;rfid125.c: 144: else
  2209                           ;rfid125.c: 145: {
  2210                           ;rfid125.c: 146: i >>=4;
  2211  0120  0ECD               	swapf	get_RFID@i,f
  2212  0121  05CD               	andwf	get_RFID@i,f
  2213                           
  2214                           ;rfid125.c: 147: keyID[ii/2] |= (i & 0x0F);
  2215  0122  1003               	clrc
  2216  0123  0C51               	rrf	get_RFID@ii,w
  2217  0124  3E5D               	addlw	_keyID& (0+255)
  2218  0125  0084               	movwf	4
  2219  0126  084D               	movf	get_RFID@i,w
  2220  0127  390F               	andlw	15
  2221  0128  0480               	iorwf	0,f
  2222  0129                     l6295:	
  2223                           
  2224                           ;rfid125.c: 148: }
  2225                           ;rfid125.c: 149: even_col ^= RF_serial_55bits[ii];
  2226  0129  0851               	movf	get_RFID@ii,w
  2227  012A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2228  012B  0084               	movwf	4
  2229  012C  0800               	movf	0,w
  2230  012D  06CA               	xorwf	get_RFID@even_col,f
  2231  012E  300A               	movlw	10
  2232  012F  0AD1               	incf	get_RFID@ii,f
  2233  0130  0251               	subwf	get_RFID@ii,w
  2234  0131  1C03               	skipc
  2235  0132  28E3               	goto	l6265
  2236                           
  2237                           ;rfid125.c: 150: }
  2238                           ;rfid125.c: 151: RF_serial_55bits[10] <<= 3;
  2239  0133  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2240  0134  0DC8               	rlf	get_RFID@RF_serial_55bits+10,f
  2241  0135  0D48               	rlf	get_RFID@RF_serial_55bits+10,w
  2242  0136  39F8               	andlw	248
  2243  0137  00C8               	movwf	get_RFID@RF_serial_55bits+10
  2244  0138  30F0               	movlw	240
  2245                           
  2246                           ;rfid125.c: 152: keyID[0] =0x00;
  2247  0139  01DD               	clrf	_keyID
  2248                           
  2249                           ;rfid125.c: 153: if(((RF_serial_55bits[10] & 0xf0)==(even_col & 0xf0)) && (0==(RF_serial
      +                          _55bits[10]&0x08)))
  2250  013A  054A               	andwf	get_RFID@even_col,w
  2251  013B  00F7               	movwf	??_get_RFID
  2252  013C  0848               	movf	get_RFID@RF_serial_55bits+10,w
  2253  013D  39F0               	andlw	240
  2254  013E  0677               	xorwf	??_get_RFID,w
  2255  013F  1903               	btfsc	3,2
  2256  0140  19C8               	btfsc	get_RFID@RF_serial_55bits+10,3
  2257  0141  3400               	retlw	0
  2258                           
  2259                           ;rfid125.c: 154: {
  2260                           ;rfid125.c: 156: return 1;
  2261  0142  3401               	retlw	1
  2262  0143                     __end_of_get_RFID:	
  2263  0143                     PL2:	
  2264  0143  0873               	movf	?_timerOut+1,w
  2265  0144  00D0               	movwf	get_RFID@timeOutVal+1
  2266  0145  0872               	movf	?_timerOut,w
  2267  0146  00CF               	movwf	get_RFID@timeOutVal
  2268  0147  0450               	iorwf	get_RFID@timeOutVal+1,w
  2269  0148  0008               	return
  2270  0149                     PL4:	
  2271  0149  084D               	movf	get_RFID@i,w
  2272  014A  3E3E               	addlw	get_RFID@RF_serial_55bits& (0+255)
  2273  014B  0084               	movwf	4
  2274  014C  1383               	bcf	3,7	;select IRP bank0
  2275  014D  1003               	clrc
  2276  014E  0D80               	rlf	0,f
  2277  014F  0008               	return
  2278  0150                     PL5:	
  2279  0150  3096               	movlw	150
  2280  0151  00F2               	movwf	?_timerOut
  2281  0152  01F3               	clrf	?_timerOut+1
  2282  0153  084E               	movf	get_RFID@flag_RFID_last,w
  2283  0154  0008               	return
  2284                           
  2285                           	psect	text442
  2286  0284                     __ptext442:	
  2287 ;; =============== function _get_RFID ends ============
  2288                           
  2289                           
  2290 ;; *************** function _eepromWriteByte *****************
  2291 ;; Defined at:
  2292 ;;		line 26 in file "ms82_eeprom.c"
  2293 ;; Parameters:    Size  Location     Type
  2294 ;;  EEAddr          1    wreg     unsigned char 
  2295 ;;  EEData          1    2[COMMON] unsigned char 
  2296 ;; Auto vars:     Size  Location     Type
  2297 ;;  EEAddr          1    5[COMMON] unsigned char 
  2298 ;; Return value:  Size  Location     Type
  2299 ;;		None               void
  2300 ;; Registers used:
  2301 ;;		wreg
  2302 ;; Tracked objects:
  2303 ;;		On entry : 0/20
  2304 ;;		On exit  : 0/0
  2305 ;;		Unchanged: 0/0
  2306 ;; Data sizes:     COMMON   BANK0   BANK1
  2307 ;;      Params:         1       0       0
  2308 ;;      Locals:         1       0       0
  2309 ;;      Temps:          2       0       0
  2310 ;;      Totals:         4       0       0
  2311 ;;Total ram usage:        4 bytes
  2312 ;; Hardware stack levels used:    1
  2313 ;; Hardware stack levels required when called:    1
  2314 ;; This function calls:
  2315 ;;		Nothing
  2316 ;; This function is called by:
  2317 ;;		_eepromWriteBlock
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321  0284                     _eepromWriteByte:	
  2322                           
  2323                           ; Regs used in _eepromWriteByte: [wreg]
  2324                           ;eepromWriteByte@EEAddr stored from wreg
  2325  0284  00F5               	movwf	eepromWriteByte@EEAddr
  2326                           
  2327                           ;ms82_eeprom.c: 27: GIE = 0;
  2328  0285  138B               	bcf	11,7
  2329  0286                     l1597:	
  2330                           ;ms82_eeprom.c: 29: {
  2331                           ;ms82_eeprom.c: 30: while(GIE) asm("clrwdt");
  2332                           
  2333  0286  1F8B               	btfss	11,7
  2334  0287  2A8A               	goto	l6083
  2335  0288  0064               	clrwdt	;#
  2336  0289  2A86               	goto	l1597
  2337  028A                     l6083:	
  2338                           
  2339                           ;ms82_eeprom.c: 31: EEADR = EEAddr;
  2340  028A  0875               	movf	eepromWriteByte@EEAddr,w
  2341  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2342  028C  009B               	movwf	27	;volatile
  2343                           
  2344                           ;ms82_eeprom.c: 32: EEDAT = EEData;
  2345  028D  0872               	movf	eepromWriteByte@EEData,w
  2346  028E  009A               	movwf	26	;volatile
  2347  028F  3034               	movlw	52
  2348                           
  2349                           ;ms82_eeprom.c: 33: EEIF = 0;
  2350  0290  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0291  138C               	bcf	12,7
  2352                           
  2353                           ;ms82_eeprom.c: 34: EECON1 = 0x34;
  2354  0292  1683               	bsf	3,5	;RP0=1, select bank1
  2355  0293  009C               	movwf	28	;volatile
  2356                           
  2357                           ;ms82_eeprom.c: 35: WR = 1;
  2358  0294  141D               	bsf	29,0
  2359  0295                     l1600:	
  2360                           ;ms82_eeprom.c: 36: while(WR) asm("clrwdt");
  2361                           
  2362  0295  1683               	bsf	3,5	;RP0=1, select bank1
  2363  0296  1C1D               	btfss	29,0
  2364  0297  2A9A               	goto	l6089
  2365  0298  0064               	clrwdt	;#
  2366  0299  2A95               	goto	l1600
  2367  029A                     l6089:	
  2368                           
  2369                           ;ms82_eeprom.c: 37: _delay((unsigned long)((2)*(8000000/4000.0)));
  2370  029A  3006               	movlw	6
  2371  029B  00F4               	movwf	??_eepromWriteByte+1
  2372  029C  3030               	movlw	48
  2373  029D  00F3               	movwf	??_eepromWriteByte
  2374  029E                     u1687:	
  2375  029E  0BF3               	decfsz	??_eepromWriteByte,f
  2376  029F  2A9E               	goto	u1687
  2377  02A0  0BF4               	decfsz	??_eepromWriteByte+1,f
  2378  02A1  2A9E               	goto	u1687
  2379  02A2  0064               	clrwdt
  2380                           
  2381                           ;ms82_eeprom.c: 38: }
  2382                           ;ms82_eeprom.c: 39: GIE = 1;
  2383  02A3  178B               	bsf	11,7
  2384  02A4  0008               	return
  2385  02A5                     __end_of_eepromWriteByte:	
  2386                           
  2387                           	psect	text443
  2388  039C                     __ptext443:	
  2389 ;; =============== function _eepromWriteByte ends ============
  2390                           
  2391                           
  2392 ;; *************** function _eepromReadBlock *****************
  2393 ;; Defined at:
  2394 ;;		line 18 in file "ms82_eeprom.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;  addStart        1    wreg     unsigned char 
  2397 ;;  buff            1    4[COMMON] PTR unsigned char 
  2398 ;;		 -> buffTag(25), 
  2399 ;;  len             1    5[COMMON] unsigned char 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  addStart        1    7[COMMON] unsigned char 
  2402 ;;  i               1    8[COMMON] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;		None               void
  2405 ;; Registers used:
  2406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/20
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: FFEDF/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1
  2412 ;;      Params:         2       0       0
  2413 ;;      Locals:         2       0       0
  2414 ;;      Temps:          1       0       0
  2415 ;;      Totals:         5       0       0
  2416 ;;Total ram usage:        5 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    2
  2419 ;; This function calls:
  2420 ;;		_eepromReadByte
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425  039C                     _eepromReadBlock:	
  2426                           
  2427                           ; Regs used in _eepromReadBlock: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2428                           ;eepromReadBlock@addStart stored from wreg
  2429  039C  00F7               	movwf	eepromReadBlock@addStart
  2430                           
  2431                           ;ms82_eeprom.c: 19: unsigned char i;
  2432                           ;ms82_eeprom.c: 20: for(i=0;i<len;i++){
  2433  039D  01F8               	clrf	eepromReadBlock@i
  2434  039E                     l6079:	
  2435  039E  0875               	movf	eepromReadBlock@len,w
  2436  039F  0278               	subwf	eepromReadBlock@i,w
  2437  03A0  1803               	btfsc	3,0
  2438  03A1  0008               	return
  2439                           
  2440                           ;ms82_eeprom.c: 21: buff[i] = eepromReadByte(addStart+i);
  2441  03A2  0878               	movf	eepromReadBlock@i,w
  2442  03A3  0774               	addwf	eepromReadBlock@buff,w
  2443  03A4  00F6               	movwf	??_eepromReadBlock
  2444  03A5  0084               	movwf	4
  2445  03A6  0878               	movf	eepromReadBlock@i,w
  2446  03A7  0777               	addwf	eepromReadBlock@addStart,w
  2447  03A8  23F7               	fcall	_eepromReadByte
  2448  03A9  1383               	bcf	3,7	;select IRP bank0
  2449  03AA  0080               	movwf	0
  2450  03AB  0AF8               	incf	eepromReadBlock@i,f
  2451  03AC  2B9E               	goto	l6079
  2452  03AD                     __end_of_eepromReadBlock:	
  2453                           
  2454                           	psect	text444
  2455  03EF                     __ptext444:	
  2456 ;; =============== function _eepromReadBlock ends ============
  2457                           
  2458                           
  2459 ;; *************** function _sys_init *****************
  2460 ;; Defined at:
  2461 ;;		line 3 in file "sysinit.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;		None               void
  2468 ;; Registers used:
  2469 ;;		wreg
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 20/20
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1
  2475 ;;      Params:         0       0       0
  2476 ;;      Locals:         0       0       0
  2477 ;;      Temps:          0       0       0
  2478 ;;      Totals:         0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    1
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488  03EF                     _sys_init:	
  2489                           
  2490                           ;sysinit.c: 21: OSCCON = 0B01100001;
  2491                           
  2492                           ; Regs used in _sys_init: [wreg]
  2493  03EF  3061               	movlw	97
  2494  03F0  1683               	bsf	3,5	;RP0=1, select bank1
  2495  03F1  008F               	movwf	15	;volatile
  2496                           
  2497                           ;sysinit.c: 22: _nop();
  2498  03F2  0000               	nop
  2499  03F3                     l787:	
  2500                           ;sysinit.c: 28: while(HTS==0);
  2501                           
  2502  03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2503  03F4  190F               	btfsc	15,2
  2504  03F5  0008               	return
  2505  03F6  2BF3               	goto	l787
  2506  03F7                     __end_of_sys_init:	
  2507                           
  2508                           	psect	text445
  2509  033F                     __ptext445:	
  2510 ;; =============== function _sys_init ends ============
  2511                           
  2512                           
  2513 ;; *************** function ___lbdiv *****************
  2514 ;; Defined at:
  2515 ;;		line 5 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\lbdiv.c"
  2516 ;; Parameters:    Size  Location     Type
  2517 ;;  dividend        1    wreg     unsigned char 
  2518 ;;  divisor         1    2[COMMON] unsigned char 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;  dividend        1    3[COMMON] unsigned char 
  2521 ;;  quotient        1    5[COMMON] unsigned char 
  2522 ;;  counter         1    4[COMMON] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;                  1    wreg      unsigned char 
  2525 ;; Registers used:
  2526 ;;		wreg, status,2, status,0
  2527 ;; Tracked objects:
  2528 ;;		On entry : 20/0
  2529 ;;		On exit  : 20/0
  2530 ;;		Unchanged: FFFDF/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1
  2532 ;;      Params:         1       0       0
  2533 ;;      Locals:         3       0       0
  2534 ;;      Temps:          0       0       0
  2535 ;;      Totals:         4       0       0
  2536 ;;Total ram usage:        4 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    1
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_get_RFID
  2543 ;;		_id_search
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546  033F                     ___lbdiv:	
  2547                           
  2548                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
  2549                           ;___lbdiv@dividend stored from wreg
  2550  033F  00F3               	movwf	___lbdiv@dividend
  2551  0340  01F5               	clrf	___lbdiv@quotient
  2552  0341  0872               	movf	___lbdiv@divisor,w
  2553  0342  1903               	btfsc	3,2
  2554  0343  2B58               	goto	l6065
  2555  0344  01F4               	clrf	___lbdiv@counter
  2556  0345                     l6051:	
  2557  0345  0AF4               	incf	___lbdiv@counter,f
  2558  0346  1BF2               	btfsc	___lbdiv@divisor,7
  2559  0347  2B4B               	goto	l4903
  2560  0348  1003               	clrc
  2561  0349  0DF2               	rlf	___lbdiv@divisor,f
  2562  034A  2B45               	goto	l6051
  2563  034B                     l4903:	
  2564  034B  1003               	clrc
  2565  034C  0DF5               	rlf	___lbdiv@quotient,f
  2566  034D  0872               	movf	___lbdiv@divisor,w
  2567  034E  0273               	subwf	___lbdiv@dividend,w
  2568  034F  1C03               	skipc
  2569  0350  2B55               	goto	L3
  2570  0351  0872               	movf	___lbdiv@divisor,w
  2571  0352  02F3               	subwf	___lbdiv@dividend,f
  2572  0353  1475               	bsf	___lbdiv@quotient,0
  2573  0354  1003               	clrc
  2574  0355                     L3:	
  2575  0355  0CF2               	rrf	___lbdiv@divisor,f
  2576  0356  0BF4               	decfsz	___lbdiv@counter,f
  2577  0357  2B4B               	goto	l4903
  2578  0358                     l6065:	
  2579  0358  0875               	movf	___lbdiv@quotient,w
  2580  0359  0008               	return
  2581  035A                     __end_of___lbdiv:	
  2582                           
  2583                           	psect	text446
  2584  03CB                     __ptext446:	
  2585 ;; =============== function ___lbdiv ends ============
  2586                           
  2587                           
  2588 ;; *************** function ___bmul *****************
  2589 ;; Defined at:
  2590 ;;		line 3 in file "D:\OneDrive\SmarRF\MCU\MC82\IDE\ORIGINIDE_V2.0.9\Program Files (x86)\HI-TECH Software\PICC\9.83\sour
      +ces\bmul.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  multiplier      1    wreg     unsigned char 
  2593 ;;  multiplicand    1    2[COMMON] unsigned char 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  multiplier      1    4[COMMON] unsigned char 
  2596 ;;  product         1    3[COMMON] unsigned char 
  2597 ;; Return value:  Size  Location     Type
  2598 ;;                  1    wreg      unsigned char 
  2599 ;; Registers used:
  2600 ;;		wreg, status,2, status,0
  2601 ;; Tracked objects:
  2602 ;;		On entry : 20/0
  2603 ;;		On exit  : 20/0
  2604 ;;		Unchanged: FFFDF/0
  2605 ;; Data sizes:     COMMON   BANK0   BANK1
  2606 ;;      Params:         1       0       0
  2607 ;;      Locals:         2       0       0
  2608 ;;      Temps:          0       0       0
  2609 ;;      Totals:         3       0       0
  2610 ;;Total ram usage:        3 bytes
  2611 ;; Hardware stack levels used:    1
  2612 ;; Hardware stack levels required when called:    1
  2613 ;; This function calls:
  2614 ;;		Nothing
  2615 ;; This function is called by:
  2616 ;;		_id_replate
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619  03CB                     ___bmul:	
  2620                           
  2621                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2622                           ;___bmul@multiplier stored from wreg
  2623  03CB  00F4               	movwf	___bmul@multiplier
  2624  03CC  01F3               	clrf	___bmul@product
  2625  03CD                     l6031:	
  2626  03CD  0872               	movf	___bmul@multiplicand,w
  2627  03CE  1874               	btfsc	___bmul@multiplier,0
  2628  03CF  07F3               	addwf	___bmul@product,f
  2629  03D0  1003               	clrc
  2630  03D1  0DF2               	rlf	___bmul@multiplicand,f
  2631  03D2  1003               	clrc
  2632  03D3  0CF4               	rrf	___bmul@multiplier,f
  2633  03D4  08F4               	movf	___bmul@multiplier,f
  2634  03D5  1D03               	skipz
  2635  03D6  2BCD               	goto	l6031
  2636  03D7  0873               	movf	___bmul@product,w
  2637  03D8  0008               	return
  2638  03D9                     __end_of___bmul:	
  2639                           
  2640                           	psect	text447
  2641  03E5                     __ptext447:	
  2642 ;; =============== function ___bmul ends ============
  2643                           
  2644                           
  2645 ;; *************** function _setState *****************
  2646 ;; Defined at:
  2647 ;;		line 152 in file "MAIN.C"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  stt             1    wreg     unsigned char 
  2650 ;;  _tOut           2    2[COMMON] unsigned int 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  stt             1    4[COMMON] unsigned char 
  2653 ;; Return value:  Size  Location     Type
  2654 ;;		None               void
  2655 ;; Registers used:
  2656 ;;		wreg, status,2
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/20
  2659 ;;		On exit  : 20/0
  2660 ;;		Unchanged: FFFDF/0
  2661 ;; Data sizes:     COMMON   BANK0   BANK1
  2662 ;;      Params:         2       0       0
  2663 ;;      Locals:         1       0       0
  2664 ;;      Temps:          0       0       0
  2665 ;;      Totals:         3       0       0
  2666 ;;Total ram usage:        3 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    1
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_main
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675  03E5                     _setState:	
  2676                           
  2677                           ; Regs used in _setState: [wreg+status,2]
  2678                           ;setState@stt stored from wreg
  2679  03E5  00F4               	movwf	setState@stt
  2680                           
  2681                           ;MAIN.C: 154: mtState = stt;
  2682  03E6  1283               	bcf	3,5	;RP0=0, select bank0
  2683  03E7  00DC               	movwf	_mtState
  2684                           
  2685                           ;MAIN.C: 155: timeTick = 0;
  2686  03E8  01DA               	clrf	_timeTick
  2687  03E9  01DB               	clrf	_timeTick+1
  2688                           
  2689                           ;MAIN.C: 156: timeOut = _tOut;
  2690  03EA  0873               	movf	setState@_tOut+1,w
  2691  03EB  00D9               	movwf	_timeOut+1
  2692  03EC  0872               	movf	setState@_tOut,w
  2693  03ED  00D8               	movwf	_timeOut
  2694  03EE  0008               	return
  2695  03EF                     __end_of_setState:	
  2696                           
  2697                           	psect	text448
  2698  02C4                     __ptext448:	
  2699 ;; =============== function _setState ends ============
  2700                           
  2701                           
  2702 ;; *************** function _SET_EPWM_ON *****************
  2703 ;; Defined at:
  2704 ;;		line 11 in file "ms82_pwm.c"
  2705 ;; Parameters:    Size  Location     Type
  2706 ;;		None
  2707 ;; Auto vars:     Size  Location     Type
  2708 ;;		None
  2709 ;; Return value:  Size  Location     Type
  2710 ;;		None               void
  2711 ;; Registers used:
  2712 ;;		wreg, status,2
  2713 ;; Tracked objects:
  2714 ;;		On entry : 20/20
  2715 ;;		On exit  : 20/20
  2716 ;;		Unchanged: FFE00/0
  2717 ;; Data sizes:     COMMON   BANK0   BANK1
  2718 ;;      Params:         0       0       0
  2719 ;;      Locals:         0       0       0
  2720 ;;      Temps:          0       0       0
  2721 ;;      Totals:         0       0       0
  2722 ;;Total ram usage:        0 bytes
  2723 ;; Hardware stack levels used:    1
  2724 ;; Hardware stack levels required when called:    1
  2725 ;; This function calls:
  2726 ;;		Nothing
  2727 ;; This function is called by:
  2728 ;;		_main
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731  02C4                     _SET_EPWM_ON:	
  2732                           
  2733                           ;ms82_pwm.c: 12: TRISC |= 0B00100000;
  2734                           
  2735                           ; Regs used in _SET_EPWM_ON: [wreg+status,2]
  2736  02C4  1687               	bsf	7,5	;volatile
  2737                           
  2738                           ;ms82_pwm.c: 13: T2CON0 = 0B00000001;
  2739  02C5  3001               	movlw	1
  2740  02C6  1283               	bcf	3,5	;RP0=0, select bank0
  2741  02C7  0092               	movwf	18	;volatile
  2742                           
  2743                           ;ms82_pwm.c: 14: T2CON1 = 0B00000000;
  2744  02C8  1683               	bsf	3,5	;RP0=1, select bank1
  2745  02C9  019E               	clrf	30	;volatile
  2746                           
  2747                           ;ms82_pwm.c: 15: PR2H = 0;
  2748  02CA  0192               	clrf	18	;volatile
  2749                           
  2750                           ;ms82_pwm.c: 16: PR2L = 7;
  2751  02CB  3007               	movlw	7
  2752  02CC  0091               	movwf	17	;volatile
  2753                           
  2754                           ;ms82_pwm.c: 17: P1ADTH = 0;
  2755  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2756  02CE  0194               	clrf	20	;volatile
  2757                           
  2758                           ;ms82_pwm.c: 18: P1ADTL = 4;
  2759  02CF  3004               	movlw	4
  2760  02D0  008E               	movwf	14	;volatile
  2761                           
  2762                           ;ms82_pwm.c: 20: P1OE = 0B00000001;
  2763  02D1  3001               	movlw	1
  2764  02D2  1683               	bsf	3,5	;RP0=1, select bank1
  2765  02D3  0090               	movwf	16	;volatile
  2766                           
  2767                           ;ms82_pwm.c: 21: P1POL = 0B00000000;
  2768  02D4  0199               	clrf	25	;volatile
  2769                           
  2770                           ;ms82_pwm.c: 22: P1CON = 0B00000000;
  2771  02D5  1283               	bcf	3,5	;RP0=0, select bank0
  2772  02D6  0196               	clrf	22	;volatile
  2773                           
  2774                           ;ms82_pwm.c: 24: TMR2H = 0;
  2775  02D7  0193               	clrf	19	;volatile
  2776                           
  2777                           ;ms82_pwm.c: 25: TMR2L = 0;
  2778  02D8  0191               	clrf	17	;volatile
  2779                           
  2780                           ;ms82_pwm.c: 26: TMR2IF = 0;
  2781  02D9  108C               	bcf	12,1
  2782                           
  2783                           ;ms82_pwm.c: 27: TMR2ON = 1;
  2784  02DA  1512               	bsf	18,2
  2785  02DB                     l3294:	
  2786                           ;ms82_pwm.c: 28: while(TMR2IF==0) asm("clrwdt");
  2787                           
  2788  02DB  1283               	bcf	3,5	;RP0=0, select bank0
  2789  02DC  188C               	btfsc	12,1
  2790  02DD  2AE0               	goto	l3296
  2791  02DE  0064               	clrwdt	;#
  2792  02DF  2ADB               	goto	l3294
  2793  02E0                     l3296:	
  2794                           
  2795                           ;ms82_pwm.c: 29: TRISC &= 0B11011111;
  2796  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  2797  02E1  1287               	bcf	7,5	;volatile
  2798  02E2  0008               	return
  2799  02E3                     __end_of_SET_EPWM_ON:	
  2800                           
  2801                           	psect	text449
  2802  02E3                     __ptext449:	
  2803 ;; =============== function _SET_EPWM_ON ends ============
  2804                           
  2805                           
  2806 ;; *************** function _timerOut *****************
  2807 ;; Defined at:
  2808 ;;		line 6 in file "rfid125.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  Logic           1    wreg     unsigned char 
  2811 ;;  time            2    2[COMMON] unsigned int 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  Logic           1    4[COMMON] unsigned char 
  2814 ;;  CurTimer        2    5[COMMON] unsigned int 
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  2    2[COMMON] unsigned int 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2
  2819 ;; Tracked objects:
  2820 ;;		On entry : 20/0
  2821 ;;		On exit  : 20/0
  2822 ;;		Unchanged: FFFDF/0
  2823 ;; Data sizes:     COMMON   BANK0   BANK1
  2824 ;;      Params:         2       0       0
  2825 ;;      Locals:         3       0       0
  2826 ;;      Temps:          0       0       0
  2827 ;;      Totals:         5       0       0
  2828 ;;Total ram usage:        5 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    1
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_get_RFID
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837  02E3                     _timerOut:	
  2838                           
  2839                           ; Regs used in _timerOut: [wreg+status,2]
  2840                           ;timerOut@Logic stored from wreg
  2841  02E3  00F4               	movwf	timerOut@Logic
  2842                           
  2843                           ;rfid125.c: 7: unsigned int CurTimer;
  2844                           ;rfid125.c: 8: T0ON = 0;
  2845  02E4  119F               	bcf	31,3
  2846                           
  2847                           ;rfid125.c: 9: TMR0 = 0;
  2848  02E5  0181               	clrf	1	;volatile
  2849                           
  2850                           ;rfid125.c: 10: T0IF = 0;
  2851  02E6  110B               	bcf	11,2
  2852                           
  2853                           ;rfid125.c: 11: T0ON = 1;
  2854  02E7  159F               	bsf	31,3
  2855  02E8                     l5991:	
  2856                           ;rfid125.c: 12: while(RA5==Logic){
  2857                           
  2858  02E8  3000               	movlw	0
  2859  02E9  1A85               	btfsc	5,5
  2860  02EA  3001               	movlw	1
  2861  02EB  0674               	xorwf	timerOut@Logic,w
  2862  02EC  1D03               	btfss	3,2
  2863  02ED  2AFD               	goto	l5993
  2864                           
  2865                           ;rfid125.c: 13: CurTimer= (0 <<8 )| TMR0;
  2866  02EE  01F5               	clrf	timerOut@CurTimer
  2867  02EF  01F6               	clrf	timerOut@CurTimer+1
  2868  02F0  0801               	movf	1,w	;volatile
  2869  02F1  04F5               	iorwf	timerOut@CurTimer,f
  2870                           
  2871                           ;rfid125.c: 14: if(CurTimer>time)
  2872  02F2  0876               	movf	timerOut@CurTimer+1,w
  2873  02F3  0273               	subwf	timerOut@time+1,w
  2874  02F4  1D03               	skipz
  2875  02F5  2AF8               	goto	u875
  2876  02F6  0875               	movf	timerOut@CurTimer,w
  2877  02F7  0272               	subwf	timerOut@time,w
  2878  02F8                     u875:	
  2879  02F8  1803               	skipnc
  2880  02F9  2AE8               	goto	l5991
  2881                           
  2882                           ;rfid125.c: 15: return 0;
  2883  02FA  01F2               	clrf	?_timerOut
  2884  02FB  01F3               	clrf	?_timerOut+1
  2885  02FC  0008               	return
  2886  02FD                     l5993:	
  2887                           
  2888                           ;rfid125.c: 16: }
  2889                           ;rfid125.c: 17: return CurTimer;
  2890  02FD  0876               	movf	timerOut@CurTimer+1,w
  2891  02FE  00F3               	movwf	?_timerOut+1
  2892  02FF  0875               	movf	timerOut@CurTimer,w
  2893  0300  00F2               	movwf	?_timerOut
  2894  0301  0008               	return
  2895  0302                     __end_of_timerOut:	
  2896                           
  2897                           	psect	text450
  2898  0302                     __ptext450:	
  2899 ;; =============== function _timerOut ends ============
  2900                           
  2901                           
  2902 ;; *************** function _comArr *****************
  2903 ;; Defined at:
  2904 ;;		line 52 in file "ms82_eeprom.c"
  2905 ;; Parameters:    Size  Location     Type
  2906 ;;  arr1            1    wreg     PTR unsigned char 
  2907 ;;		 -> keyID(5), 
  2908 ;;  arr2            1    2[COMMON] PTR unsigned char 
  2909 ;;		 -> buffTag(25), 
  2910 ;;  len1            1    3[COMMON] unsigned char 
  2911 ;;  len2            1    4[COMMON] unsigned char 
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  arr1            1    8[COMMON] PTR unsigned char 
  2914 ;;		 -> keyID(5), 
  2915 ;;  i               1    9[COMMON] unsigned char 
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      unsigned char 
  2918 ;; Registers used:
  2919 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2920 ;; Tracked objects:
  2921 ;;		On entry : 20/0
  2922 ;;		On exit  : 20/0
  2923 ;;		Unchanged: FFEDF/0
  2924 ;; Data sizes:     COMMON   BANK0   BANK1
  2925 ;;      Params:         3       0       0
  2926 ;;      Locals:         2       0       0
  2927 ;;      Temps:          3       0       0
  2928 ;;      Totals:         8       0       0
  2929 ;;Total ram usage:        8 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    1
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_id_search
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938  0302                     _comArr:	
  2939                           
  2940                           ; Regs used in _comArr: [wreg-fsr0h+status,2+status,0]
  2941                           ;comArr@arr1 stored from wreg
  2942  0302  00F8               	movwf	comArr@arr1
  2943                           
  2944                           ;ms82_eeprom.c: 53: unsigned char i;
  2945                           ;ms82_eeprom.c: 55: if(len1!=len2)
  2946  0303  0873               	movf	comArr@len1,w
  2947  0304  0674               	xorwf	comArr@len2,w
  2948  0305  1D03               	btfss	3,2
  2949                           
  2950                           ;ms82_eeprom.c: 56: return 0;
  2951  0306  3400               	retlw	0
  2952                           
  2953                           ;ms82_eeprom.c: 57: else{
  2954                           ;ms82_eeprom.c: 58: for(i=0;i<len1;i++){
  2955  0307  01F9               	clrf	comArr@i
  2956  0308                     l5959:	
  2957  0308  0873               	movf	comArr@len1,w
  2958  0309  0279               	subwf	comArr@i,w
  2959                           
  2960                           ;ms82_eeprom.c: 59: if(*(arr1+i) != *(arr2+i)){
  2961  030A  0879               	movf	comArr@i,w
  2962  030B  1803               	btfsc	3,0
  2963  030C  2B1D               	goto	L4
  2964  030D  0772               	addwf	comArr@arr2,w
  2965  030E  00F5               	movwf	??_comArr
  2966  030F  0084               	movwf	4
  2967  0310  1383               	bcf	3,7	;select IRP bank0
  2968  0311  0800               	movf	0,w
  2969  0312  00F6               	movwf	??_comArr+1
  2970  0313  0879               	movf	comArr@i,w
  2971  0314  0778               	addwf	comArr@arr1,w
  2972  0315  00F7               	movwf	??_comArr+2
  2973  0316  0084               	movwf	4
  2974  0317  0800               	movf	0,w
  2975  0318  0676               	xorwf	??_comArr+1,w
  2976  0319  1D03               	btfss	3,2
  2977  031A  3400               	retlw	0
  2978  031B  0AF9               	incf	comArr@i,f
  2979  031C  2B08               	goto	l5959
  2980  031D                     L4:	
  2981                           ;ms82_eeprom.c: 61: }
  2982                           ;ms82_eeprom.c: 62: }
  2983                           ;ms82_eeprom.c: 63: if(i==len1)
  2984                           
  2985  031D  0673               	xorwf	comArr@len1,w
  2986  031E  1903               	btfsc	3,2
  2987                           
  2988                           ;ms82_eeprom.c: 64: return 1;
  2989  031F  3401               	retlw	1
  2990  0320  3400               	retlw	0
  2991  0321                     __end_of_comArr:	
  2992                           
  2993                           	psect	text451
  2994  03F7                     __ptext451:	
  2995 ;; =============== function _comArr ends ============
  2996                           
  2997                           
  2998 ;; *************** function _eepromReadByte *****************
  2999 ;; Defined at:
  3000 ;;		line 7 in file "ms82_eeprom.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  EEAddr          1    wreg     unsigned char 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  EEAddr          1    2[COMMON] unsigned char 
  3005 ;;  ReEepromData    1    3[COMMON] unsigned char 
  3006 ;; Return value:  Size  Location     Type
  3007 ;;                  1    wreg      unsigned char 
  3008 ;; Registers used:
  3009 ;;		wreg
  3010 ;; Tracked objects:
  3011 ;;		On entry : 0/20
  3012 ;;		On exit  : 20/20
  3013 ;;		Unchanged: FFFDF/0
  3014 ;; Data sizes:     COMMON   BANK0   BANK1
  3015 ;;      Params:         0       0       0
  3016 ;;      Locals:         2       0       0
  3017 ;;      Temps:          0       0       0
  3018 ;;      Totals:         2       0       0
  3019 ;;Total ram usage:        2 bytes
  3020 ;; Hardware stack levels used:    1
  3021 ;; Hardware stack levels required when called:    1
  3022 ;; This function calls:
  3023 ;;		Nothing
  3024 ;; This function is called by:
  3025 ;;		_eepromReadBlock
  3026 ;;		_main
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029  03F7                     _eepromReadByte:	
  3030                           
  3031                           ; Regs used in _eepromReadByte: [wreg]
  3032                           ;eepromReadByte@EEAddr stored from wreg
  3033  03F7  00F2               	movwf	eepromReadByte@EEAddr
  3034                           
  3035                           ;ms82_eeprom.c: 8: unsigned char ReEepromData;
  3036                           ;ms82_eeprom.c: 10: EEADR = EEAddr;
  3037  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  3038  03F9  009B               	movwf	27	;volatile
  3039                           
  3040                           ;ms82_eeprom.c: 11: RD = 1;
  3041  03FA  141C               	bsf	28,0
  3042                           
  3043                           ;ms82_eeprom.c: 12: ReEepromData = EEDAT;
  3044  03FB  081A               	movf	26,w	;volatile
  3045  03FC  00F3               	movwf	eepromReadByte@ReEepromData
  3046                           
  3047                           ;ms82_eeprom.c: 13: RD = 0;
  3048  03FD  101C               	bcf	28,0
  3049                           
  3050                           ;ms82_eeprom.c: 14: return ReEepromData;
  3051  03FE  0008               	return
  3052  03FF                     __end_of_eepromReadByte:	
  3053                           
  3054                           	psect	text452
  3055  03D9                     __ptext452:	
  3056 ;; =============== function _eepromReadByte ends ============
  3057                           
  3058                           
  3059 ;; *************** function _int_init *****************
  3060 ;; Defined at:
  3061 ;;		line 66 in file "sysinit.c"
  3062 ;; Parameters:    Size  Location     Type
  3063 ;;		None
  3064 ;; Auto vars:     Size  Location     Type
  3065 ;;		None
  3066 ;; Return value:  Size  Location     Type
  3067 ;;		None               void
  3068 ;; Registers used:
  3069 ;;		status,2
  3070 ;; Tracked objects:
  3071 ;;		On entry : 20/20
  3072 ;;		On exit  : 20/20
  3073 ;;		Unchanged: FFFDF/0
  3074 ;; Data sizes:     COMMON   BANK0   BANK1
  3075 ;;      Params:         0       0       0
  3076 ;;      Locals:         0       0       0
  3077 ;;      Temps:          0       0       0
  3078 ;;      Totals:         0       0       0
  3079 ;;Total ram usage:        0 bytes
  3080 ;; Hardware stack levels used:    1
  3081 ;; Hardware stack levels required when called:    1
  3082 ;; This function calls:
  3083 ;;		Nothing
  3084 ;; This function is called by:
  3085 ;;		_main
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088  03D9                     _int_init:	
  3089                           
  3090                           ;sysinit.c: 72: INTCON = 0B00000000;
  3091                           
  3092                           ; Regs used in _int_init: [status,2]
  3093  03D9  018B               	clrf	11	;volatile
  3094                           
  3095                           ;sysinit.c: 73: PIE1 = 0B00000000;
  3096  03DA  018C               	clrf	12	;volatile
  3097                           
  3098                           ;sysinit.c: 74: PIR1 = 0B00000000;
  3099  03DB  1283               	bcf	3,5	;RP0=0, select bank0
  3100  03DC  018C               	clrf	12	;volatile
  3101                           
  3102                           ;sysinit.c: 87: T0IF = 0;
  3103  03DD  110B               	bcf	11,2
  3104                           
  3105                           ;sysinit.c: 88: T0IE = 0;
  3106  03DE  128B               	bcf	11,5
  3107                           
  3108                           ;sysinit.c: 92: TMR2IF = 0;
  3109  03DF  108C               	bcf	12,1
  3110                           
  3111                           ;sysinit.c: 93: TMR2IE = 1;
  3112  03E0  1683               	bsf	3,5	;RP0=1, select bank1
  3113  03E1  148C               	bsf	12,1
  3114                           
  3115                           ;sysinit.c: 99: PEIE = 0;
  3116  03E2  130B               	bcf	11,6
  3117                           
  3118                           ;sysinit.c: 101: GIE = 1;
  3119  03E3  178B               	bsf	11,7
  3120  03E4  0008               	return
  3121  03E5                     __end_of_int_init:	
  3122                           
  3123                           	psect	text453
  3124  040E                     __ptext453:	
  3125 ;; =============== function _int_init ends ============
  3126                           
  3127                           
  3128 ;; *************** function _timer_init *****************
  3129 ;; Defined at:
  3130 ;;		line 44 in file "sysinit.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;		None
  3133 ;; Auto vars:     Size  Location     Type
  3134 ;;		None
  3135 ;; Return value:  Size  Location     Type
  3136 ;;		None               void
  3137 ;; Registers used:
  3138 ;;		wreg
  3139 ;; Tracked objects:
  3140 ;;		On entry : 20/20
  3141 ;;		On exit  : 20/20
  3142 ;;		Unchanged: FFFDF/0
  3143 ;; Data sizes:     COMMON   BANK0   BANK1
  3144 ;;      Params:         0       0       0
  3145 ;;      Locals:         0       0       0
  3146 ;;      Temps:          0       0       0
  3147 ;;      Totals:         0       0       0
  3148 ;;Total ram usage:        0 bytes
  3149 ;; Hardware stack levels used:    1
  3150 ;; Hardware stack levels required when called:    1
  3151 ;; This function calls:
  3152 ;;		Nothing
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157  040E                     _timer_init:	
  3158                           
  3159                           ;sysinit.c: 46: OPTION = 0B00000011;
  3160                           
  3161                           ; Regs used in _timer_init: [wreg]
  3162  040E  3003               	movlw	3
  3163  040F  0081               	movwf	1	;volatile
  3164  0410  0008               	return
  3165  0411                     __end_of_timer_init:	
  3166                           
  3167                           	psect	text454
  3168  03BC                     __ptext454:	
  3169 ;; =============== function _timer_init ends ============
  3170                           
  3171                           
  3172 ;; *************** function _gpio_init *****************
  3173 ;; Defined at:
  3174 ;;		line 32 in file "sysinit.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;		None               void
  3181 ;; Registers used:
  3182 ;;		wreg, status,2
  3183 ;; Tracked objects:
  3184 ;;		On entry : 20/20
  3185 ;;		On exit  : 20/20
  3186 ;;		Unchanged: FFFDF/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1
  3188 ;;      Params:         0       0       0
  3189 ;;      Locals:         0       0       0
  3190 ;;      Temps:          0       0       0
  3191 ;;      Totals:         0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    1
  3195 ;; This function calls:
  3196 ;;		Nothing
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;; This function uses a non-reentrant model
  3200 ;;
  3201  03BC                     _gpio_init:	
  3202                           
  3203                           ;sysinit.c: 34: PORTA = 0B00000000;
  3204                           
  3205                           ; Regs used in _gpio_init: [wreg+status,2]
  3206  03BC  1283               	bcf	3,5	;RP0=0, select bank0
  3207  03BD  0185               	clrf	5	;volatile
  3208                           
  3209                           ;sysinit.c: 35: TRISA = 0B01110011;
  3210  03BE  3073               	movlw	115
  3211  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  3212  03C0  0085               	movwf	5	;volatile
  3213                           
  3214                           ;sysinit.c: 36: WPUA = 0B10000000;
  3215  03C1  3080               	movlw	128
  3216  03C2  0095               	movwf	21	;volatile
  3217                           
  3218                           ;sysinit.c: 37: PORTC = 0B00000010;
  3219  03C3  3002               	movlw	2
  3220  03C4  1283               	bcf	3,5	;RP0=0, select bank0
  3221  03C5  0087               	movwf	7	;volatile
  3222                           
  3223                           ;sysinit.c: 38: TRISC = 0B11111110;
  3224  03C6  30FE               	movlw	254
  3225  03C7  1683               	bsf	3,5	;RP0=1, select bank1
  3226  03C8  0087               	movwf	7	;volatile
  3227                           
  3228                           ;sysinit.c: 39: WPUC = 0B00000000;
  3229  03C9  0193               	clrf	19	;volatile
  3230  03CA  0008               	return
  3231  03CB                     __end_of_gpio_init:	
  3232                           
  3233                           	psect	text455
  3234  0407                     __ptext455:	
  3235 ;; =============== function _gpio_init ends ============
  3236                           
  3237                           
  3238 ;; *************** function _ISR *****************
  3239 ;; Defined at:
  3240 ;;		line 89 in file "MAIN.C"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;		None               void
  3247 ;; Registers used:
  3248 ;;		None
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: FFFFF/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1
  3254 ;;      Params:         0       0       0
  3255 ;;      Locals:         0       0       0
  3256 ;;      Temps:          2       0       0
  3257 ;;      Totals:         2       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; This function calls:
  3261 ;;		Nothing
  3262 ;; This function is called by:
  3263 ;;		Interrupt level 1
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266  0407                     _ISR:	
  3267  0407  0871               	movf	??_ISR+1,w
  3268  0408  008A               	movwf	10
  3269  0409  0E70               	swapf	??_ISR^(0+-128),w
  3270  040A  0083               	movwf	3
  3271  040B  0EFE               	swapf	126,f
  3272  040C  0E7E               	swapf	126,w
  3273  040D  0009               	retfie
  3274  040E                     __end_of_ISR:	
  3275                           
  3276                           	psect	intentry
  3277  0004                     __pintentry:	
  3278                           ; Regs used in _ISR: []
  3279                           
  3280  0004                     interrupt_function:	
  3281  007E                     saved_w	set	btemp
  3282  0004  00FE               	movwf	btemp
  3283  0005  0E03               	swapf	3,w
  3284  0006  00F0               	movwf	??_ISR
  3285  0007  080A               	movf	10,w
  3286  0008  00F1               	movwf	??_ISR+1
  3287  0009  2C07               	ljmp	_ISR
  3288                           
  3289                           	psect	text456
  3290  0000                     __ptext456:	
  3291 ;; =============== function _ISR ends ============
  3292                           
  3293  007E                     btemp	set	126	;btemp
  3294  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Mar 24 15:34:17 2020

                         pc 0002              ___bmul@product 0073                          _RD 04E0  
                        _WR 04E8                          fsr 0004                         _C1R 08CA  
                       _C2R 08D2                         l790 0000                         l793 0000  
                       l787 03F3                         l796 0000                         l799 0000  
                       _GIE 005F                         _RA3 002B                         _RA5 002D  
                       _HTS 047A                         _ISR 0407                         _SR0 0CF6  
                       _SR1 0CF7                         _VR0 08C0                         _VR1 08C1  
                       _VR2 08C2                         _VR3 08C3                         u875 02F8  
                       _VRR 08C5                         fsr0 0004                         indf 0000  
          get_RFID@even_col 004A            get_RFID@even_row 004B                 main@idState 0055  
                      S6529 0400                        ?_ISR 0070                        _C1OE 08CD  
                      l1600 0295                        l1603 0000                        _C2OE 08D5  
                      l4200 0244                        _C1ON 08CF                        l1609 0000  
                      _C2ON 08D7                        l4128 0000                        l6001 0000  
                      l4137 0000                        l4145 0000                        l1594 0000  
                      l6011 0000                        l6003 0000                        l2459 0029  
                      l1588 0000                        l6021 0000                        l6013 0000  
                      l6005 0000                        l1597 0286                        l3294 02DB  
                      l2478 0075                        l6015 0000                        l6007 0000  
                      l6023 0000                        l6031 03CD                        l4175 01FC  
                      l3296 02E0                        l3297 0000                        l6017 0000  
                      l6009 0000                        l6025 0000                        l6201 0000  
                      l6019 0000                        l6027 0000                        l6051 0345  
                      l2499 00D5                        l6203 0000                        l6115 0000  
                      l6107 0000                        l6037 0000                        l6029 0000  
                      l6045 0000                        l6301 0000                        l6221 0000  
                      l6213 009C                        l6141 0000                        l6039 0000  
                      l6063 0000                        l6055 0000                        l6047 0000  
                      l6071 0000                        l6303 0000                        l6231 0000  
                      l6215 0000                        l6143 0049                        l6127 0031  
                      l6119 0000                        l6049 0000                        l6065 0358  
                      l6073 0000                        l6081 0000                        l6241 00CA  
                      l6233 00B7                        l6217 00A5                        l6161 0061  
                      l6153 0054                        l6129 0000                        l6321 035C  
                      l6401 0000                        l6059 0000                        l6091 0000  
                      l6083 028A                        l6251 0000                        l6243 0000  
                      l6227 00B0                        l6163 0000                        l6155 0000  
                      l6147 0000                        l6139 0040                        l6315 0000  
                      l6411 0000                        l6403 019E                        l6069 0000  
                      l6077 0000                        l6085 0000                        l6245 0000  
                      l6237 00C1                        l6253 00D8                        l6229 0000  
                      l6181 007E                        l6165 006A                        l6157 0057  
                      l6093 0000                        l6341 038C                        l6413 0000  
                      l4903 034B                        l6079 039E                        l6087 0000  
                      l6255 0000                        l6239 0000                        l6175 0000  
                      l6167 0000                        l6095 0000                        l6335 0000  
                      l6351 0000                        l6343 0000                        l6423 0000  
                      l6089 029A                        l6265 00E3                        l6169 0000  
                      l6177 0079                        l6185 002C                        l6097 000E  
                      l6329 0000                        l6353 0000                        l6345 0000  
                      l6361 0000                        l6433 0000                        l6417 01B8  
                      l6409 01AB                        l4906 0000                        l6291 011F  
                      l6275 00ED                        l6267 0000                        l6187 0084  
                      l6179 0000                        l6099 0000                        l6339 0000  
                      l6355 0000                        l6347 0000                        l6363 02B7  
                      l6443 0000                        l6435 0000                        l6419 0000  
                      l6427 01BD                        l6371 0000                        l6293 0000  
                      l6277 0000                        l6269 0000                        l6349 0000  
                      l6357 0000                        l6445 01DA                        l6437 01CF  
                      l6381 0000                        l6373 0000                        l6365 0000  
                      l4870 0000                        l5911 0000                        l6295 0129  
                      l6287 0000                        l6279 0000                        l6199 0088  
                      l6471 0215                        l6455 0000                        l6463 01F1  
                      l6391 0187                        l6383 0000                        l6375 0000  
                      l6367 0000                        l5913 0000                        l5921 0000  
                      l6297 0000                        l6481 022F                        l6465 0000  
                      l6449 01E4                        l6393 0000                        l6385 0000  
                      l6377 0000                        l6369 0000                        l5915 0000  
                      l5907 0000                        l5931 0000                        l5923 0000  
                      l6299 0000                        l6491 0245                        l6467 0208  
                      l6395 0000                        l6387 0000                        l6379 0000  
                      l5909 0000                        l5917 0000                        l5925 0000  
                      l5933 0000                        l5941 0000                        l6477 0223  
                      l6485 0234                        l6469 0000                        l6397 0193  
                      l5927 0000                        l5919 0000                        l5935 0000  
                      l6479 0229                        l6487 023F                        l6399 0000  
                      l5929 0000                        l5937 0000                        l5973 0000  
                      l5959 0308                        l5983 0000                        l5991 02E8  
                      l5975 0000                        l5993 02FD                        l5985 0000  
                      l5977 0000                        l5979 0000                        l5997 0000  
                      l5999 0000                        _EEIF 0067                        _ANS0 08F0  
                      _ANS1 08F1                        _ANS2 08F2                        _ANS3 08F3  
                      _ANS4 08F4                        _ANS5 08F5                        _ANS6 08F6  
                      _ANS7 08F7                        _ANS8 08F8                        _ANS9 08F9  
                      _P1OE 0090                        _T0IE 005D                        _T0IF 005A  
                      _T0ON 00FB                        _IOCB 0116                        u1364 00F6  
                      u1365 00F4                        u1635 0220                        _PIE1 008C  
                      u1657 016B                        u1667 0202                        u1677 020F  
                      u1687 029E                        _PEIE 005E                        _PR2H 0092  
                      _PR2L 0091                        _PIR1 000C                        _TMR0 0001  
                      _STRA 0CE8                        _STRB 0CE9                        _STRC 0CEA  
                      _STRD 0CEB                        _WREN 0C62                        _WPUA 0095  
                      _WPUB 0115                        _WPUC 0093                        _main 0155  
                      btemp 007E                        start 000A           ___bmul@multiplier 0074  
                     ??_ISR 0070                       _C1CH0 08C8                       _C1CH1 08C9  
                     _C2CH0 08D0                       _C2CH1 08D1                       _C1SEN 0CF5  
                     _C2REN 0CF4                       _C1POL 08CC                       _C2POL 08D4  
                     _C1OUT 08CE                       _C2OUT 08D6                       ?_main 0070  
           __end_of___lbdiv 035A                       _EEADR 009B                       _EEDAT 009A  
                     _ANS10 08FA                       _ANS11 08FB                       _P1CON 0016  
                     _EEPGD 0C67                       _ANSEL 011E                       _P1POL 0099  
                     _IOCB4 08B4                       _IOCB5 08B5                       _IOCB6 08B6  
                     _IOCB7 08B7                       _T1GSS 08D9                       _VP6EN 08C4  
                     _TMR2H 0013                       _TMR2L 0011                       _PORTA 0005  
                     _PORTC 0007                       _SRCON 019E                       _PULSR 0CF2  
                     _PULSS 0CF3                       _TRISA 0085                       _TRISC 0087  
                     _VRCON 0118                       _WPUB4 08AC                       _WPUB5 08AD  
                     _WPUB6 08AE                       _WPUB7 08AF    __size_of_eepromReadBlock 0011  
                     _keyID 005D                       pclath 000A                       status 0003  
                     wtemp0 007E             ___lbdiv@divisor 0072             ___lbdiv@counter 0074  
          ??_eepromReadByte 0072            _eepromWriteBlock 038A                __end_of_main 0249  
                    ??_main 0052            eepromReadBlock@i 0078                      _C1VREN 08C7  
                    _C2VREN 08C6                      _C2SYNC 08D8                      _EEADRH 010F  
                    _EEDATH 010E                      _EECON1 009C                      _P1ADTH 0014  
  __size_of_eepromWriteByte 0021                      _P1ADTL 000E                      _ANSELH 011F  
                    _MC1OUT 08DF                      _MC2OUT 08DE                      _T2CON0 0012  
                    _T2CON1 009E                      i1l4125 0000                      _INTCON 000B  
                    _OSCCON 008F                      _TMR2IE 0461                      _TMR2IF 0061  
                    _OPTION 0081                      _TMR2ON 0092                ?_SET_EPWM_ON 0070  
          __end_of_get_RFID 0143            __end_of_id_clear 02C4          get_RFID@timeOutVal 004F  
                    ___bmul 03CB                   ??___lbdiv 0073                      _comArr 0302  
          __end_of_int_init 03E5            __end_of_setState 03EF                      saved_w 007E  
          __end_of_timerOut 0302         eepromReadBlock@buff 0074            ___lbdiv@dividend 0073  
          __end_of_sys_init 03F7           ??_eepromReadBlock 0076         ___bmul@multiplicand 0072  
            __pcstackCOMMON 0070                __pidataBANK0 0321            ___lbdiv@quotient 0075  
        __size_of_id_search 001A                  __pbssBANK0 0058          __size_of_gpio_init 000F  
         ??_eepromWriteByte 0073                  __pmaintext 0155                     ?___bmul 0072  
                   ?_comArr 0072                  __pintentry 0004                     _CM1CON0 0119  
                   _CM2CON0 011A                     _CM2CON1 011B                  _id_replate 0249  
                 ?_get_RFID 0070                   ?_id_clear 0042    __end_of_eepromWriteBlock 039C  
                   _PSTRCON 019D                     _STRSYNC 0CEC                   ?_int_init 0070  
  get_RFID@RF_serial_55bits 003E           __end_of_id_search 0374                 setState@stt 0074  
      __size_of_SET_EPWM_ON 001F                   ?_setState 0072                   ?_timerOut 0072  
           __size_of___bmul 000E                     ___lbdiv 033F             __size_of_comArr 001F  
                   _buffTag 0025           __end_of_gpio_init 03CB                   ?_sys_init 0070  
              __size_of_ISR 0007                     _mtState 005C                     comArr@i 0079  
                ??_get_RFID 0077                  ??_id_clear 007C                     _timeOut 0058  
                comArr@arr1 0078                  comArr@arr2 0072                  comArr@len1 0073  
                comArr@len2 0074                     main@tmp 0056        end_of_initialization 0388  
                   init_ram 03B1                  get_RFID@ii 0051                  ??_int_init 0072  
                ??_setState 0074         eepromWriteBlock@len 0077                  ??_timerOut 0074  
     get_RFID@flag_RFID_syn 0049                  id_search@i 003F                  _timer_init 040E  
               ?_id_replate 003E                  ??_sys_init 0072             _eepromReadBlock 039C  
            __end_of___bmul 03D9              __end_of_comArr 0321     __size_of_eepromReadByte 0008  
      eepromReadByte@EEAddr 0072         start_initialization 0374                 __end_of_ISR 040E  
           _eepromWriteByte 0284               setState@_tOut 0072  eepromReadByte@ReEepromData 0073  
       __size_of_id_replate 0034                    ??___bmul 0073                    ??_comArr 0075  
               __pdataBANK0 0020     __end_of_eepromReadBlock 03AD               id_clear@F1097 0020  
               ?_timer_init 0070          eepromReadBlock@len 0075               __pcstackBANK0 003E  
             id_clear@idMax 0042               id_clear@idMin 0048           ?_eepromWriteBlock 0076  
         __size_of_get_RFID 0138           __size_of_id_clear 001F          ??_eepromWriteBlock 0078  
         __size_of_int_init 000C                    ?___lbdiv 0072           __size_of_setState 000A  
                 __ptext440 035A                   __ptext441 000B                   __ptext450 0302  
                 __ptext442 0284                   __ptext451 03F7                   __ptext443 039C  
                 __ptext452 03D9                   __ptext444 03EF                   __ptext453 040E  
                 __ptext445 033F                   __ptext437 02A5                   __ptext454 03BC  
                 __ptext446 03CB                   __ptext438 0249                   __ptext455 0407  
                 __ptext447 03E5                   __ptext439 038A                   __ptext456 0000  
                 __ptext448 02C4                   __ptext449 02E3                   _id_search 035A  
         __size_of_timerOut 001F                   __pswtext1 0400     __end_of_eepromWriteByte 02A5  
         __size_of_sys_init 0008                   _gpio_init 03BC           interrupt_function 0004  
             ??_SET_EPWM_ON 0072         __size_of_timer_init 0003                   get_RFID@i 004D  
                 get_RFID@j 004C                  ?_id_search 007A            timerOut@CurTimer 0075  
            _eepromReadByte 03F7            ?_eepromReadBlock 0074                ??_id_replate 0040  
                ?_gpio_init 0070          __end_of_id_replate 027D                   init_fetch 03AD  
       __end_of_SET_EPWM_ON 02E3              id_replate@Cont 003E      __end_of_eepromReadByte 03FF  
          __size_of___lbdiv 001B              id_replate@buff 003F           id_search@id_input 003E  
          ?_eepromWriteByte 0072     eepromReadBlock@addStart 0077                    _get_RFID 000B  
                  _id_clear 02A5               __size_of_main 00F4                    _int_init 03D9  
             id_search@buff 007A                    _setState 03E5           eepromWriteBlock@i 007A  
                  _timeTick 005A                    _timerOut 02E3                 ??_id_search 007B  
           ?_eepromReadByte 0070                    main@idop 0057                ??_timer_init 0072  
                  _sys_init 03EF    eepromWriteBlock@addStart 0079                 ??_gpio_init 0072  
               id_clear@tmp 0043                    intlevel1 0000                 _SET_EPWM_ON 02C4  
        __end_of_timer_init 0411        eepromWriteBlock@buff 0076   __size_of_eepromWriteBlock 0012  
     eepromWriteByte@EEAddr 0075       eepromWriteByte@EEData 0072      get_RFID@flag_RFID_last 004E  
              id_replate@id 007B               timerOut@Logic 0074                timerOut@time 0072  
